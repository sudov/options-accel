// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "black_scholes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic black_scholes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic black_scholes::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> black_scholes::ap_ST_st1_fsm_0 = "0000000";
const sc_lv<7> black_scholes::ap_ST_st2_fsm_1 = "1";
const sc_lv<7> black_scholes::ap_ST_st3_fsm_2 = "10";
const sc_lv<7> black_scholes::ap_ST_st4_fsm_3 = "11";
const sc_lv<7> black_scholes::ap_ST_st5_fsm_4 = "100";
const sc_lv<7> black_scholes::ap_ST_st6_fsm_5 = "101";
const sc_lv<7> black_scholes::ap_ST_st7_fsm_6 = "110";
const sc_lv<7> black_scholes::ap_ST_st8_fsm_7 = "111";
const sc_lv<7> black_scholes::ap_ST_st9_fsm_8 = "1000";
const sc_lv<7> black_scholes::ap_ST_st10_fsm_9 = "1001";
const sc_lv<7> black_scholes::ap_ST_st11_fsm_10 = "1010";
const sc_lv<7> black_scholes::ap_ST_st12_fsm_11 = "1011";
const sc_lv<7> black_scholes::ap_ST_st13_fsm_12 = "1100";
const sc_lv<7> black_scholes::ap_ST_st14_fsm_13 = "1101";
const sc_lv<7> black_scholes::ap_ST_st15_fsm_14 = "1110";
const sc_lv<7> black_scholes::ap_ST_st16_fsm_15 = "1111";
const sc_lv<7> black_scholes::ap_ST_st17_fsm_16 = "10000";
const sc_lv<7> black_scholes::ap_ST_st18_fsm_17 = "10001";
const sc_lv<7> black_scholes::ap_ST_st19_fsm_18 = "10010";
const sc_lv<7> black_scholes::ap_ST_st20_fsm_19 = "10011";
const sc_lv<7> black_scholes::ap_ST_st21_fsm_20 = "10100";
const sc_lv<7> black_scholes::ap_ST_st22_fsm_21 = "10101";
const sc_lv<7> black_scholes::ap_ST_st23_fsm_22 = "10110";
const sc_lv<7> black_scholes::ap_ST_st24_fsm_23 = "10111";
const sc_lv<7> black_scholes::ap_ST_st25_fsm_24 = "11000";
const sc_lv<7> black_scholes::ap_ST_st26_fsm_25 = "11001";
const sc_lv<7> black_scholes::ap_ST_st27_fsm_26 = "11010";
const sc_lv<7> black_scholes::ap_ST_st28_fsm_27 = "11011";
const sc_lv<7> black_scholes::ap_ST_st29_fsm_28 = "11100";
const sc_lv<7> black_scholes::ap_ST_st30_fsm_29 = "11101";
const sc_lv<7> black_scholes::ap_ST_st31_fsm_30 = "11110";
const sc_lv<7> black_scholes::ap_ST_st32_fsm_31 = "11111";
const sc_lv<7> black_scholes::ap_ST_st33_fsm_32 = "100000";
const sc_lv<7> black_scholes::ap_ST_st34_fsm_33 = "100001";
const sc_lv<7> black_scholes::ap_ST_st35_fsm_34 = "100010";
const sc_lv<7> black_scholes::ap_ST_st36_fsm_35 = "100011";
const sc_lv<7> black_scholes::ap_ST_st37_fsm_36 = "100100";
const sc_lv<7> black_scholes::ap_ST_st38_fsm_37 = "100101";
const sc_lv<7> black_scholes::ap_ST_st39_fsm_38 = "100110";
const sc_lv<7> black_scholes::ap_ST_st40_fsm_39 = "100111";
const sc_lv<7> black_scholes::ap_ST_st41_fsm_40 = "101000";
const sc_lv<7> black_scholes::ap_ST_st42_fsm_41 = "101001";
const sc_lv<7> black_scholes::ap_ST_st43_fsm_42 = "101010";
const sc_lv<7> black_scholes::ap_ST_st44_fsm_43 = "101011";
const sc_lv<7> black_scholes::ap_ST_st45_fsm_44 = "101100";
const sc_lv<7> black_scholes::ap_ST_st46_fsm_45 = "101101";
const sc_lv<7> black_scholes::ap_ST_st47_fsm_46 = "101110";
const sc_lv<7> black_scholes::ap_ST_st48_fsm_47 = "101111";
const sc_lv<7> black_scholes::ap_ST_st49_fsm_48 = "110000";
const sc_lv<7> black_scholes::ap_ST_st50_fsm_49 = "110001";
const sc_lv<7> black_scholes::ap_ST_st51_fsm_50 = "110010";
const sc_lv<7> black_scholes::ap_ST_st52_fsm_51 = "110011";
const sc_lv<7> black_scholes::ap_ST_st53_fsm_52 = "110100";
const sc_lv<7> black_scholes::ap_ST_st54_fsm_53 = "110101";
const sc_lv<7> black_scholes::ap_ST_st55_fsm_54 = "110110";
const sc_lv<7> black_scholes::ap_ST_st56_fsm_55 = "110111";
const sc_lv<7> black_scholes::ap_ST_st57_fsm_56 = "111000";
const sc_lv<7> black_scholes::ap_ST_st58_fsm_57 = "111001";
const sc_lv<7> black_scholes::ap_ST_st59_fsm_58 = "111010";
const sc_lv<7> black_scholes::ap_ST_st60_fsm_59 = "111011";
const sc_lv<7> black_scholes::ap_ST_st61_fsm_60 = "111100";
const sc_lv<7> black_scholes::ap_ST_st62_fsm_61 = "111101";
const sc_lv<7> black_scholes::ap_ST_st63_fsm_62 = "111110";
const sc_lv<7> black_scholes::ap_ST_st64_fsm_63 = "111111";
const sc_lv<7> black_scholes::ap_ST_st65_fsm_64 = "1000000";
const sc_lv<7> black_scholes::ap_ST_st66_fsm_65 = "1000001";
const sc_lv<7> black_scholes::ap_ST_st67_fsm_66 = "1000010";
const sc_lv<7> black_scholes::ap_ST_st68_fsm_67 = "1000011";
const sc_lv<7> black_scholes::ap_ST_st69_fsm_68 = "1000100";
const sc_lv<7> black_scholes::ap_ST_st70_fsm_69 = "1000101";
const sc_lv<7> black_scholes::ap_ST_st71_fsm_70 = "1000110";
const sc_lv<7> black_scholes::ap_ST_st72_fsm_71 = "1000111";
const sc_lv<7> black_scholes::ap_ST_st73_fsm_72 = "1001000";
const sc_lv<64> black_scholes::ap_const_lv64_3FFF5C28F5C28F5C = "11111111111111010111000010100011110101110000101000111101011100";
const sc_lv<64> black_scholes::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";

black_scholes::black_scholes(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_black_scholes_black_scholes_iterate_fu_89 = new black_scholes_black_scholes_iterate("grp_black_scholes_black_scholes_iterate_fu_89");
    grp_black_scholes_black_scholes_iterate_fu_89->ap_clk(ap_clk);
    grp_black_scholes_black_scholes_iterate_fu_89->ap_rst(ap_rst);
    grp_black_scholes_black_scholes_iterate_fu_89->ap_start(grp_black_scholes_black_scholes_iterate_fu_89_ap_start);
    grp_black_scholes_black_scholes_iterate_fu_89->ap_done(grp_black_scholes_black_scholes_iterate_fu_89_ap_done);
    grp_black_scholes_black_scholes_iterate_fu_89->ap_idle(grp_black_scholes_black_scholes_iterate_fu_89_ap_idle);
    grp_black_scholes_black_scholes_iterate_fu_89->ap_ready(grp_black_scholes_black_scholes_iterate_fu_89_ap_ready);
    grp_black_scholes_black_scholes_iterate_fu_89->the_args_S_read(grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read);
    grp_black_scholes_black_scholes_iterate_fu_89->the_args_E_read(grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read);
    grp_black_scholes_black_scholes_iterate_fu_89->the_args_r_read(grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read);
    grp_black_scholes_black_scholes_iterate_fu_89->the_args_sigma_read(grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read);
    grp_black_scholes_black_scholes_iterate_fu_89->the_args_T_read(grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read);
    grp_black_scholes_black_scholes_iterate_fu_89->ap_return_0(grp_black_scholes_black_scholes_iterate_fu_89_ap_return_0);
    grp_black_scholes_black_scholes_iterate_fu_89->ap_return_1(grp_black_scholes_black_scholes_iterate_fu_89_ap_return_1);
    black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28 = new black_scholes_dsub_64ns_64ns_64_5_full_dsp<28,5,64,64,64>("black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28");
    black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28->clk(ap_clk);
    black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28->reset(ap_rst);
    black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28->din0(grp_fu_107_p0);
    black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28->din1(grp_fu_107_p1);
    black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28->ce(grp_fu_107_ce);
    black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28->dout(grp_fu_107_p2);
    black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29 = new black_scholes_dadd_64ns_64ns_64_5_full_dsp<29,5,64,64,64>("black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29");
    black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29->clk(ap_clk);
    black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29->reset(ap_rst);
    black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29->din0(grp_fu_112_p0);
    black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29->din1(grp_fu_112_p1);
    black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29->ce(grp_fu_112_ce);
    black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29->dout(grp_fu_112_p2);
    black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30 = new black_scholes_dmul_64ns_64ns_64_6_max_dsp<30,6,64,64,64>("black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30");
    black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30->clk(ap_clk);
    black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30->reset(ap_rst);
    black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30->din0(grp_fu_117_p0);
    black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30->din1(grp_fu_117_p1);
    black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30->ce(grp_fu_117_ce);
    black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30->dout(grp_fu_117_p2);
    black_scholes_ddiv_64ns_64ns_64_31_U31 = new black_scholes_ddiv_64ns_64ns_64_31<31,31,64,64,64>("black_scholes_ddiv_64ns_64ns_64_31_U31");
    black_scholes_ddiv_64ns_64ns_64_31_U31->clk(ap_clk);
    black_scholes_ddiv_64ns_64ns_64_31_U31->reset(ap_rst);
    black_scholes_ddiv_64ns_64ns_64_31_U31->din0(grp_fu_122_p0);
    black_scholes_ddiv_64ns_64ns_64_31_U31->din1(grp_fu_122_p1);
    black_scholes_ddiv_64ns_64ns_64_31_U31->ce(grp_fu_122_ce);
    black_scholes_ddiv_64ns_64ns_64_31_U31->dout(grp_fu_122_p2);
    black_scholes_sitodp_32ns_64_6_U32 = new black_scholes_sitodp_32ns_64_6<32,6,32,64>("black_scholes_sitodp_32ns_64_6_U32");
    black_scholes_sitodp_32ns_64_6_U32->clk(ap_clk);
    black_scholes_sitodp_32ns_64_6_U32->reset(ap_rst);
    black_scholes_sitodp_32ns_64_6_U32->din0(grp_fu_126_p0);
    black_scholes_sitodp_32ns_64_6_U32->ce(grp_fu_126_ce);
    black_scholes_sitodp_32ns_64_6_U32->dout(grp_fu_126_p1);
    black_scholes_dsqrt_64ns_64ns_64_31_U33 = new black_scholes_dsqrt_64ns_64ns_64_31<33,31,64,64,64>("black_scholes_dsqrt_64ns_64ns_64_31_U33");
    black_scholes_dsqrt_64ns_64ns_64_31_U33->clk(ap_clk);
    black_scholes_dsqrt_64ns_64ns_64_31_U33->reset(ap_rst);
    black_scholes_dsqrt_64ns_64ns_64_31_U33->din0(grp_fu_130_p0);
    black_scholes_dsqrt_64ns_64ns_64_31_U33->din1(grp_fu_130_p1);
    black_scholes_dsqrt_64ns_64ns_64_31_U33->ce(grp_fu_130_ce);
    black_scholes_dsqrt_64ns_64ns_64_31_U33->dout(grp_fu_130_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_black_scholes_black_scholes_iterate_fu_89_ap_start);
    sensitive << ( grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg );

    SC_METHOD(thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( E );

    SC_METHOD(thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( S );

    SC_METHOD(thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( T );

    SC_METHOD(thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( r );

    SC_METHOD(thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sigma );

    SC_METHOD(thread_grp_fu_107_ce);

    SC_METHOD(thread_grp_fu_107_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( args_mean_reg_178 );

    SC_METHOD(thread_grp_fu_107_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( conf_width_reg_199 );

    SC_METHOD(thread_grp_fu_112_ce);

    SC_METHOD(thread_grp_fu_112_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( args_mean_reg_178 );

    SC_METHOD(thread_grp_fu_112_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( conf_width_reg_199 );

    SC_METHOD(thread_grp_fu_117_ce);

    SC_METHOD(thread_grp_fu_117_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( args_stdv_reg_184 );

    SC_METHOD(thread_grp_fu_117_p1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_122_ce);

    SC_METHOD(thread_grp_fu_122_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_s_reg_189 );

    SC_METHOD(thread_grp_fu_122_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_81_reg_194 );

    SC_METHOD(thread_grp_fu_126_ce);

    SC_METHOD(thread_grp_fu_126_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( M );

    SC_METHOD(thread_grp_fu_130_ce);
    sensitive << ( ap_CS_fsm );
    sensitive << ( grp_black_scholes_black_scholes_iterate_fu_89_ap_done );

    SC_METHOD(thread_grp_fu_130_p0);

    SC_METHOD(thread_grp_fu_130_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_80_reg_148 );

    SC_METHOD(thread_interval_max);
    sensitive << ( ap_CS_fsm );
    sensitive << ( grp_fu_112_p2 );

    SC_METHOD(thread_interval_max_ap_vld);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_interval_min);
    sensitive << ( ap_CS_fsm );
    sensitive << ( grp_fu_107_p2 );

    SC_METHOD(thread_interval_min_ap_vld);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( grp_black_scholes_black_scholes_iterate_fu_89_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000";
    grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "black_scholes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, interval_min, "(port)interval_min");
    sc_trace(mVcdFile, interval_min_ap_vld, "(port)interval_min_ap_vld");
    sc_trace(mVcdFile, interval_max, "(port)interval_max");
    sc_trace(mVcdFile, interval_max_ap_vld, "(port)interval_max_ap_vld");
    sc_trace(mVcdFile, S, "(port)S");
    sc_trace(mVcdFile, E, "(port)E");
    sc_trace(mVcdFile, r, "(port)r");
    sc_trace(mVcdFile, sigma, "(port)sigma");
    sc_trace(mVcdFile, T, "(port)T");
    sc_trace(mVcdFile, M, "(port)M");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, grp_fu_126_p1, "grp_fu_126_p1");
    sc_trace(mVcdFile, tmp_80_reg_148, "tmp_80_reg_148");
    sc_trace(mVcdFile, args_mean_reg_178, "args_mean_reg_178");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_ap_done, "grp_black_scholes_black_scholes_iterate_fu_89_ap_done");
    sc_trace(mVcdFile, args_stdv_reg_184, "args_stdv_reg_184");
    sc_trace(mVcdFile, grp_fu_117_p2, "grp_fu_117_p2");
    sc_trace(mVcdFile, tmp_s_reg_189, "tmp_s_reg_189");
    sc_trace(mVcdFile, grp_fu_130_p2, "grp_fu_130_p2");
    sc_trace(mVcdFile, tmp_81_reg_194, "tmp_81_reg_194");
    sc_trace(mVcdFile, grp_fu_122_p2, "grp_fu_122_p2");
    sc_trace(mVcdFile, conf_width_reg_199, "conf_width_reg_199");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_ap_start, "grp_black_scholes_black_scholes_iterate_fu_89_ap_start");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_ap_idle, "grp_black_scholes_black_scholes_iterate_fu_89_ap_idle");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_ap_ready, "grp_black_scholes_black_scholes_iterate_fu_89_ap_ready");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read, "grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read, "grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read, "grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read, "grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read, "grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_ap_return_0, "grp_black_scholes_black_scholes_iterate_fu_89_ap_return_0");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_ap_return_1, "grp_black_scholes_black_scholes_iterate_fu_89_ap_return_1");
    sc_trace(mVcdFile, grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg, "grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg");
    sc_trace(mVcdFile, grp_fu_107_p2, "grp_fu_107_p2");
    sc_trace(mVcdFile, grp_fu_112_p2, "grp_fu_112_p2");
    sc_trace(mVcdFile, grp_fu_107_p0, "grp_fu_107_p0");
    sc_trace(mVcdFile, grp_fu_107_p1, "grp_fu_107_p1");
    sc_trace(mVcdFile, grp_fu_112_p0, "grp_fu_112_p0");
    sc_trace(mVcdFile, grp_fu_112_p1, "grp_fu_112_p1");
    sc_trace(mVcdFile, grp_fu_117_p0, "grp_fu_117_p0");
    sc_trace(mVcdFile, grp_fu_117_p1, "grp_fu_117_p1");
    sc_trace(mVcdFile, grp_fu_122_p0, "grp_fu_122_p0");
    sc_trace(mVcdFile, grp_fu_122_p1, "grp_fu_122_p1");
    sc_trace(mVcdFile, grp_fu_126_p0, "grp_fu_126_p0");
    sc_trace(mVcdFile, grp_fu_130_p1, "grp_fu_130_p1");
    sc_trace(mVcdFile, grp_fu_107_ce, "grp_fu_107_ce");
    sc_trace(mVcdFile, grp_fu_112_ce, "grp_fu_112_ce");
    sc_trace(mVcdFile, grp_fu_117_ce, "grp_fu_117_ce");
    sc_trace(mVcdFile, grp_fu_122_ce, "grp_fu_122_ce");
    sc_trace(mVcdFile, grp_fu_126_ce, "grp_fu_126_ce");
    sc_trace(mVcdFile, grp_fu_130_p0, "grp_fu_130_p0");
    sc_trace(mVcdFile, grp_fu_130_ce, "grp_fu_130_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("black_scholes.hdltvin.dat");
    mHdltvoutHandle.open("black_scholes.hdltvout.dat");
}

black_scholes::~black_scholes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_black_scholes_black_scholes_iterate_fu_89;
    delete black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28;
    delete black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29;
    delete black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30;
    delete black_scholes_ddiv_64ns_64ns_64_31_U31;
    delete black_scholes_sitodp_32ns_64_6_U32;
    delete black_scholes_dsqrt_64ns_64ns_64_31_U33;
}

void black_scholes::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,7,7>(ap_ST_st30_fsm_29, ap_CS_fsm.read())) {
            grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_black_scholes_black_scholes_iterate_fu_89_ap_ready.read())) {
            grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,7,7>(ap_ST_st31_fsm_30, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(ap_const_logic_0, grp_black_scholes_black_scholes_iterate_fu_89_ap_done.read()))) {
        args_mean_reg_178 = grp_black_scholes_black_scholes_iterate_fu_89_ap_return_0.read();
        args_stdv_reg_184 = grp_black_scholes_black_scholes_iterate_fu_89_ap_return_1.read();
    }
    if (esl_seteq<1,7,7>(ap_ST_st68_fsm_67, ap_CS_fsm.read())) {
        conf_width_reg_199 = grp_fu_122_p2.read();
    }
    if (esl_seteq<1,7,7>(ap_ST_st6_fsm_5, ap_CS_fsm.read())) {
        tmp_80_reg_148 = grp_fu_126_p1.read();
    }
    if (esl_seteq<1,7,7>(ap_ST_st37_fsm_36, ap_CS_fsm.read())) {
        tmp_81_reg_194 = grp_fu_130_p2.read();
        tmp_s_reg_189 = grp_fu_117_p2.read();
    }
}

void black_scholes::thread_ap_done() {
    if (esl_seteq<1,7,7>(ap_ST_st73_fsm_72, ap_CS_fsm.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void black_scholes::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,7,7>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void black_scholes::thread_ap_ready() {
    if (esl_seteq<1,7,7>(ap_ST_st73_fsm_72, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void black_scholes::thread_grp_black_scholes_black_scholes_iterate_fu_89_ap_start() {
    grp_black_scholes_black_scholes_iterate_fu_89_ap_start = grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg.read();
}

void black_scholes::thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read() {
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read = E.read();
}

void black_scholes::thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read() {
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read = S.read();
}

void black_scholes::thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read() {
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read = T.read();
}

void black_scholes::thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read() {
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read = r.read();
}

void black_scholes::thread_grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read() {
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read = sigma.read();
}

void black_scholes::thread_grp_fu_107_ce() {
    grp_fu_107_ce = ap_const_logic_1;
}

void black_scholes::thread_grp_fu_107_p0() {
    grp_fu_107_p0 = args_mean_reg_178.read();
}

void black_scholes::thread_grp_fu_107_p1() {
    grp_fu_107_p1 = conf_width_reg_199.read();
}

void black_scholes::thread_grp_fu_112_ce() {
    grp_fu_112_ce = ap_const_logic_1;
}

void black_scholes::thread_grp_fu_112_p0() {
    grp_fu_112_p0 = args_mean_reg_178.read();
}

void black_scholes::thread_grp_fu_112_p1() {
    grp_fu_112_p1 = conf_width_reg_199.read();
}

void black_scholes::thread_grp_fu_117_ce() {
    grp_fu_117_ce = ap_const_logic_1;
}

void black_scholes::thread_grp_fu_117_p0() {
    grp_fu_117_p0 = args_stdv_reg_184.read();
}

void black_scholes::thread_grp_fu_117_p1() {
    grp_fu_117_p1 = ap_const_lv64_3FFF5C28F5C28F5C;
}

void black_scholes::thread_grp_fu_122_ce() {
    grp_fu_122_ce = ap_const_logic_1;
}

void black_scholes::thread_grp_fu_122_p0() {
    grp_fu_122_p0 = tmp_s_reg_189.read();
}

void black_scholes::thread_grp_fu_122_p1() {
    grp_fu_122_p1 = tmp_81_reg_194.read();
}

void black_scholes::thread_grp_fu_126_ce() {
    grp_fu_126_ce = ap_const_logic_1;
}

void black_scholes::thread_grp_fu_126_p0() {
    grp_fu_126_p0 = M.read();
}

void black_scholes::thread_grp_fu_130_ce() {
    if ((esl_seteq<1,7,7>(ap_ST_st30_fsm_29, ap_CS_fsm.read()) || 
         (esl_seteq<1,7,7>(ap_ST_st31_fsm_30, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, grp_black_scholes_black_scholes_iterate_fu_89_ap_done.read())) || 
         esl_seteq<1,7,7>(ap_ST_st37_fsm_36, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st7_fsm_6, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st8_fsm_7, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st9_fsm_8, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st10_fsm_9, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st11_fsm_10, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st12_fsm_11, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st13_fsm_12, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st14_fsm_13, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st15_fsm_14, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st16_fsm_15, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st17_fsm_16, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st18_fsm_17, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st19_fsm_18, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st20_fsm_19, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st21_fsm_20, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st22_fsm_21, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st23_fsm_22, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st24_fsm_23, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st25_fsm_24, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st26_fsm_25, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st27_fsm_26, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st28_fsm_27, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st29_fsm_28, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st33_fsm_32, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st34_fsm_33, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st35_fsm_34, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st36_fsm_35, ap_CS_fsm.read()))) {
        grp_fu_130_ce = ap_const_logic_1;
    } else {
        grp_fu_130_ce = ap_const_logic_0;
    }
}

void black_scholes::thread_grp_fu_130_p0() {
    grp_fu_130_p0 = ap_const_lv64_0;
}

void black_scholes::thread_grp_fu_130_p1() {
    grp_fu_130_p1 = tmp_80_reg_148.read();
}

void black_scholes::thread_interval_max() {
    interval_max = grp_fu_112_p2.read();
}

void black_scholes::thread_interval_max_ap_vld() {
    if (esl_seteq<1,7,7>(ap_ST_st73_fsm_72, ap_CS_fsm.read())) {
        interval_max_ap_vld = ap_const_logic_1;
    } else {
        interval_max_ap_vld = ap_const_logic_0;
    }
}

void black_scholes::thread_interval_min() {
    interval_min = grp_fu_107_p2.read();
}

void black_scholes::thread_interval_min_ap_vld() {
    if (esl_seteq<1,7,7>(ap_ST_st73_fsm_72, ap_CS_fsm.read())) {
        interval_min_ap_vld = ap_const_logic_1;
    } else {
        interval_min_ap_vld = ap_const_logic_0;
    }
}

void black_scholes::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 17 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
            break;
        case 19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
            break;
        case 20 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
            break;
        case 21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
            break;
        case 22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
            break;
        case 23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
            break;
        case 24 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
            break;
        case 25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
            break;
        case 26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
            break;
        case 27 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
            break;
        case 28 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
            break;
        case 29 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
            break;
        case 30 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_black_scholes_black_scholes_iterate_fu_89_ap_done.read())) {
                ap_NS_fsm = ap_ST_st32_fsm_31;
            } else {
                ap_NS_fsm = ap_ST_st31_fsm_30;
            }
            break;
        case 31 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
            break;
        case 33 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
            break;
        case 34 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
            break;
        case 35 : 
            ap_NS_fsm = ap_ST_st37_fsm_36;
            break;
        case 36 : 
            ap_NS_fsm = ap_ST_st38_fsm_37;
            break;
        case 37 : 
            ap_NS_fsm = ap_ST_st39_fsm_38;
            break;
        case 38 : 
            ap_NS_fsm = ap_ST_st40_fsm_39;
            break;
        case 39 : 
            ap_NS_fsm = ap_ST_st41_fsm_40;
            break;
        case 40 : 
            ap_NS_fsm = ap_ST_st42_fsm_41;
            break;
        case 41 : 
            ap_NS_fsm = ap_ST_st43_fsm_42;
            break;
        case 42 : 
            ap_NS_fsm = ap_ST_st44_fsm_43;
            break;
        case 43 : 
            ap_NS_fsm = ap_ST_st45_fsm_44;
            break;
        case 44 : 
            ap_NS_fsm = ap_ST_st46_fsm_45;
            break;
        case 45 : 
            ap_NS_fsm = ap_ST_st47_fsm_46;
            break;
        case 46 : 
            ap_NS_fsm = ap_ST_st48_fsm_47;
            break;
        case 47 : 
            ap_NS_fsm = ap_ST_st49_fsm_48;
            break;
        case 48 : 
            ap_NS_fsm = ap_ST_st50_fsm_49;
            break;
        case 49 : 
            ap_NS_fsm = ap_ST_st51_fsm_50;
            break;
        case 50 : 
            ap_NS_fsm = ap_ST_st52_fsm_51;
            break;
        case 51 : 
            ap_NS_fsm = ap_ST_st53_fsm_52;
            break;
        case 52 : 
            ap_NS_fsm = ap_ST_st54_fsm_53;
            break;
        case 53 : 
            ap_NS_fsm = ap_ST_st55_fsm_54;
            break;
        case 54 : 
            ap_NS_fsm = ap_ST_st56_fsm_55;
            break;
        case 55 : 
            ap_NS_fsm = ap_ST_st57_fsm_56;
            break;
        case 56 : 
            ap_NS_fsm = ap_ST_st58_fsm_57;
            break;
        case 57 : 
            ap_NS_fsm = ap_ST_st59_fsm_58;
            break;
        case 58 : 
            ap_NS_fsm = ap_ST_st60_fsm_59;
            break;
        case 59 : 
            ap_NS_fsm = ap_ST_st61_fsm_60;
            break;
        case 60 : 
            ap_NS_fsm = ap_ST_st62_fsm_61;
            break;
        case 61 : 
            ap_NS_fsm = ap_ST_st63_fsm_62;
            break;
        case 62 : 
            ap_NS_fsm = ap_ST_st64_fsm_63;
            break;
        case 63 : 
            ap_NS_fsm = ap_ST_st65_fsm_64;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st66_fsm_65;
            break;
        case 65 : 
            ap_NS_fsm = ap_ST_st67_fsm_66;
            break;
        case 66 : 
            ap_NS_fsm = ap_ST_st68_fsm_67;
            break;
        case 67 : 
            ap_NS_fsm = ap_ST_st69_fsm_68;
            break;
        case 68 : 
            ap_NS_fsm = ap_ST_st70_fsm_69;
            break;
        case 69 : 
            ap_NS_fsm = ap_ST_st71_fsm_70;
            break;
        case 70 : 
            ap_NS_fsm = ap_ST_st72_fsm_71;
            break;
        case 71 : 
            ap_NS_fsm = ap_ST_st73_fsm_72;
            break;
        case 72 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void black_scholes::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interval_min\" :  \"" << interval_min.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interval_min_ap_vld\" :  \"" << interval_min_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interval_max\" :  \"" << interval_max.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interval_max_ap_vld\" :  \"" << interval_max_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S\" :  \"" << S.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"E\" :  \"" << E.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"r\" :  \"" << r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sigma\" :  \"" << sigma.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"T\" :  \"" << T.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"M\" :  \"" << M.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

