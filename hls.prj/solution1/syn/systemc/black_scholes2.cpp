// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "black_scholes2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic black_scholes2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic black_scholes2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> black_scholes2::ap_ST_st1_fsm_0 = "0000000";
const sc_lv<7> black_scholes2::ap_ST_st2_fsm_1 = "1";
const sc_lv<7> black_scholes2::ap_ST_st3_fsm_2 = "10";
const sc_lv<7> black_scholes2::ap_ST_st4_fsm_3 = "11";
const sc_lv<7> black_scholes2::ap_ST_st5_fsm_4 = "100";
const sc_lv<7> black_scholes2::ap_ST_st6_fsm_5 = "101";
const sc_lv<7> black_scholes2::ap_ST_st7_fsm_6 = "110";
const sc_lv<7> black_scholes2::ap_ST_st8_fsm_7 = "111";
const sc_lv<7> black_scholes2::ap_ST_st9_fsm_8 = "1000";
const sc_lv<7> black_scholes2::ap_ST_st10_fsm_9 = "1001";
const sc_lv<7> black_scholes2::ap_ST_st11_fsm_10 = "1010";
const sc_lv<7> black_scholes2::ap_ST_st12_fsm_11 = "1011";
const sc_lv<7> black_scholes2::ap_ST_st13_fsm_12 = "1100";
const sc_lv<7> black_scholes2::ap_ST_st14_fsm_13 = "1101";
const sc_lv<7> black_scholes2::ap_ST_st15_fsm_14 = "1110";
const sc_lv<7> black_scholes2::ap_ST_st16_fsm_15 = "1111";
const sc_lv<7> black_scholes2::ap_ST_st17_fsm_16 = "10000";
const sc_lv<7> black_scholes2::ap_ST_st18_fsm_17 = "10001";
const sc_lv<7> black_scholes2::ap_ST_st19_fsm_18 = "10010";
const sc_lv<7> black_scholes2::ap_ST_st20_fsm_19 = "10011";
const sc_lv<7> black_scholes2::ap_ST_st21_fsm_20 = "10100";
const sc_lv<7> black_scholes2::ap_ST_st22_fsm_21 = "10101";
const sc_lv<7> black_scholes2::ap_ST_st23_fsm_22 = "10110";
const sc_lv<7> black_scholes2::ap_ST_st24_fsm_23 = "10111";
const sc_lv<7> black_scholes2::ap_ST_st25_fsm_24 = "11000";
const sc_lv<7> black_scholes2::ap_ST_st26_fsm_25 = "11001";
const sc_lv<7> black_scholes2::ap_ST_st27_fsm_26 = "11010";
const sc_lv<7> black_scholes2::ap_ST_st28_fsm_27 = "11011";
const sc_lv<7> black_scholes2::ap_ST_st29_fsm_28 = "11100";
const sc_lv<7> black_scholes2::ap_ST_st30_fsm_29 = "11101";
const sc_lv<7> black_scholes2::ap_ST_st31_fsm_30 = "11110";
const sc_lv<7> black_scholes2::ap_ST_st32_fsm_31 = "11111";
const sc_lv<7> black_scholes2::ap_ST_st33_fsm_32 = "100000";
const sc_lv<7> black_scholes2::ap_ST_st34_fsm_33 = "100001";
const sc_lv<7> black_scholes2::ap_ST_st35_fsm_34 = "100010";
const sc_lv<7> black_scholes2::ap_ST_st36_fsm_35 = "100011";
const sc_lv<7> black_scholes2::ap_ST_st37_fsm_36 = "100100";
const sc_lv<7> black_scholes2::ap_ST_st38_fsm_37 = "100101";
const sc_lv<7> black_scholes2::ap_ST_st39_fsm_38 = "100110";
const sc_lv<7> black_scholes2::ap_ST_st40_fsm_39 = "100111";
const sc_lv<7> black_scholes2::ap_ST_st41_fsm_40 = "101000";
const sc_lv<7> black_scholes2::ap_ST_st42_fsm_41 = "101001";
const sc_lv<7> black_scholes2::ap_ST_st43_fsm_42 = "101010";
const sc_lv<7> black_scholes2::ap_ST_st44_fsm_43 = "101011";
const sc_lv<7> black_scholes2::ap_ST_st45_fsm_44 = "101100";
const sc_lv<7> black_scholes2::ap_ST_st46_fsm_45 = "101101";
const sc_lv<7> black_scholes2::ap_ST_st47_fsm_46 = "101110";
const sc_lv<7> black_scholes2::ap_ST_st48_fsm_47 = "101111";
const sc_lv<7> black_scholes2::ap_ST_st49_fsm_48 = "110000";
const sc_lv<7> black_scholes2::ap_ST_st50_fsm_49 = "110001";
const sc_lv<7> black_scholes2::ap_ST_st51_fsm_50 = "110010";
const sc_lv<7> black_scholes2::ap_ST_st52_fsm_51 = "110011";
const sc_lv<7> black_scholes2::ap_ST_st53_fsm_52 = "110100";
const sc_lv<7> black_scholes2::ap_ST_st54_fsm_53 = "110101";
const sc_lv<7> black_scholes2::ap_ST_st55_fsm_54 = "110110";
const sc_lv<7> black_scholes2::ap_ST_st56_fsm_55 = "110111";
const sc_lv<7> black_scholes2::ap_ST_st57_fsm_56 = "111000";
const sc_lv<7> black_scholes2::ap_ST_st58_fsm_57 = "111001";
const sc_lv<7> black_scholes2::ap_ST_st59_fsm_58 = "111010";
const sc_lv<7> black_scholes2::ap_ST_st60_fsm_59 = "111011";
const sc_lv<7> black_scholes2::ap_ST_st61_fsm_60 = "111100";
const sc_lv<7> black_scholes2::ap_ST_st62_fsm_61 = "111101";
const sc_lv<7> black_scholes2::ap_ST_st63_fsm_62 = "111110";
const sc_lv<7> black_scholes2::ap_ST_st64_fsm_63 = "111111";
const sc_lv<7> black_scholes2::ap_ST_st65_fsm_64 = "1000000";
const sc_lv<7> black_scholes2::ap_ST_st66_fsm_65 = "1000001";
const sc_lv<7> black_scholes2::ap_ST_st67_fsm_66 = "1000010";
const sc_lv<7> black_scholes2::ap_ST_st68_fsm_67 = "1000011";
const sc_lv<7> black_scholes2::ap_ST_st69_fsm_68 = "1000100";
const sc_lv<7> black_scholes2::ap_ST_st70_fsm_69 = "1000101";
const sc_lv<7> black_scholes2::ap_ST_st71_fsm_70 = "1000110";
const sc_lv<7> black_scholes2::ap_ST_st72_fsm_71 = "1000111";
const sc_lv<7> black_scholes2::ap_ST_st73_fsm_72 = "1001000";
const sc_lv<7> black_scholes2::ap_ST_st74_fsm_73 = "1001001";
const sc_lv<7> black_scholes2::ap_ST_st75_fsm_74 = "1001010";
const sc_lv<7> black_scholes2::ap_ST_st76_fsm_75 = "1001011";
const sc_lv<7> black_scholes2::ap_ST_st77_fsm_76 = "1001100";
const sc_lv<7> black_scholes2::ap_ST_st78_fsm_77 = "1001101";
const sc_lv<7> black_scholes2::ap_ST_st79_fsm_78 = "1001110";
const sc_lv<7> black_scholes2::ap_ST_st80_fsm_79 = "1001111";
const sc_lv<7> black_scholes2::ap_ST_st81_fsm_80 = "1010000";
const sc_lv<7> black_scholes2::ap_ST_st82_fsm_81 = "1010001";
const sc_lv<7> black_scholes2::ap_ST_st83_fsm_82 = "1010010";
const sc_lv<7> black_scholes2::ap_ST_st84_fsm_83 = "1010011";
const sc_lv<7> black_scholes2::ap_ST_st85_fsm_84 = "1010100";
const sc_lv<7> black_scholes2::ap_ST_st86_fsm_85 = "1010101";
const sc_lv<64> black_scholes2::ap_const_lv64_3FE0000000000000 = "11111111100000000000000000000000000000000000000000000000000000";
const sc_lv<64> black_scholes2::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> black_scholes2::ap_const_lv64_8000000000000000 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<2> black_scholes2::ap_const_lv2_0 = "00";
const sc_lv<2> black_scholes2::ap_const_lv2_1 = "1";
const sc_lv<5> black_scholes2::ap_const_lv5_4 = "100";

black_scholes2::black_scholes2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1 = new black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp<1,5,64,64,64>("black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1");
    black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1->clk(ap_clk);
    black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1->reset(ap_rst);
    black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1->din0(grp_fu_67_p0);
    black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1->din1(grp_fu_67_p1);
    black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1->opcode(grp_fu_67_opcode);
    black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1->ce(grp_fu_67_ce);
    black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1->dout(grp_fu_67_p2);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2 = new black_scholes2_dmul_64ns_64ns_64_6_max_dsp<2,6,64,64,64>("black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2");
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2->clk(ap_clk);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2->reset(ap_rst);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2->din0(grp_fu_73_p0);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2->din1(grp_fu_73_p1);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2->ce(grp_fu_73_ce);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2->dout(grp_fu_73_p2);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3 = new black_scholes2_dmul_64ns_64ns_64_6_max_dsp<3,6,64,64,64>("black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3");
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3->clk(ap_clk);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3->reset(ap_rst);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3->din0(grp_fu_80_p0);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3->din1(grp_fu_80_p1);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3->ce(grp_fu_80_ce);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3->dout(grp_fu_80_p2);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4 = new black_scholes2_dmul_64ns_64ns_64_6_max_dsp<4,6,64,64,64>("black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4");
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4->clk(ap_clk);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4->reset(ap_rst);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4->din0(grp_fu_85_p0);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4->din1(grp_fu_85_p1);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4->ce(grp_fu_85_ce);
    black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4->dout(grp_fu_85_p2);
    black_scholes2_dcmp_64ns_64ns_1_3_U5 = new black_scholes2_dcmp_64ns_64ns_1_3<5,3,64,64,1>("black_scholes2_dcmp_64ns_64ns_1_3_U5");
    black_scholes2_dcmp_64ns_64ns_1_3_U5->clk(ap_clk);
    black_scholes2_dcmp_64ns_64ns_1_3_U5->reset(ap_rst);
    black_scholes2_dcmp_64ns_64ns_1_3_U5->din0(grp_fu_90_p0);
    black_scholes2_dcmp_64ns_64ns_1_3_U5->din1(grp_fu_90_p1);
    black_scholes2_dcmp_64ns_64ns_1_3_U5->ce(grp_fu_90_ce);
    black_scholes2_dcmp_64ns_64ns_1_3_U5->opcode(grp_fu_90_opcode);
    black_scholes2_dcmp_64ns_64ns_1_3_U5->dout(grp_fu_90_p2);
    black_scholes2_dsqrt_64ns_64ns_64_31_U6 = new black_scholes2_dsqrt_64ns_64ns_64_31<6,31,64,64,64>("black_scholes2_dsqrt_64ns_64ns_64_31_U6");
    black_scholes2_dsqrt_64ns_64ns_64_31_U6->clk(ap_clk);
    black_scholes2_dsqrt_64ns_64ns_64_31_U6->reset(ap_rst);
    black_scholes2_dsqrt_64ns_64ns_64_31_U6->din0(grp_fu_95_p0);
    black_scholes2_dsqrt_64ns_64ns_64_31_U6->din1(grp_fu_95_p1);
    black_scholes2_dsqrt_64ns_64ns_64_31_U6->ce(grp_fu_95_ce);
    black_scholes2_dsqrt_64ns_64ns_64_31_U6->dout(grp_fu_95_p2);
    black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7 = new black_scholes2_dexp_64ns_64ns_64_18_full_dsp<7,18,64,64,64>("black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7");
    black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7->clk(ap_clk);
    black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7->reset(ap_rst);
    black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7->din0(grp_fu_101_p0);
    black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7->din1(grp_fu_101_p1);
    black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7->ce(grp_fu_101_ce);
    black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7->dout(grp_fu_101_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm );
    sensitive << ( grp_fu_73_p2 );

    SC_METHOD(thread_grp_fu_101_ce);

    SC_METHOD(thread_grp_fu_101_p0);

    SC_METHOD(thread_grp_fu_101_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_114 );
    sensitive << ( tmp_s_reg_191 );

    SC_METHOD(thread_grp_fu_67_ce);

    SC_METHOD(thread_grp_fu_67_opcode);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_67_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( r );
    sensitive << ( reg_106 );

    SC_METHOD(thread_grp_fu_67_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( E );
    sensitive << ( reg_106 );
    sensitive << ( tmp_6_reg_186 );

    SC_METHOD(thread_grp_fu_73_ce);

    SC_METHOD(thread_grp_fu_73_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( sigma );
    sensitive << ( reg_106 );
    sensitive << ( reg_114 );
    sensitive << ( reg_121 );
    sensitive << ( tmp_4_reg_160 );

    SC_METHOD(thread_grp_fu_73_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( S );
    sensitive << ( sigma );
    sensitive << ( T );
    sensitive << ( tmp_13_reg_206 );

    SC_METHOD(thread_grp_fu_80_ce);

    SC_METHOD(thread_grp_fu_80_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_106 );

    SC_METHOD(thread_grp_fu_80_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( gaussian_random_number );

    SC_METHOD(thread_grp_fu_85_ce);

    SC_METHOD(thread_grp_fu_85_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_9_neg_reg_171 );

    SC_METHOD(thread_grp_fu_85_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( T );

    SC_METHOD(thread_grp_fu_90_ce);

    SC_METHOD(thread_grp_fu_90_opcode);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_90_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( reg_114 );

    SC_METHOD(thread_grp_fu_90_p1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_95_ce);

    SC_METHOD(thread_grp_fu_95_p0);

    SC_METHOD(thread_grp_fu_95_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( T );

    SC_METHOD(thread_tmp_13_fu_139_p3);
    sensitive << ( reg_114 );
    sensitive << ( grp_fu_90_p2 );

    SC_METHOD(thread_tmp_9_neg_fu_129_p2);
    sensitive << ( tmp_9_to_int_fu_126_p1 );

    SC_METHOD(thread_tmp_9_to_int_fu_126_p1);
    sensitive << ( r );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "black_scholes2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, S, "(port)S");
    sc_trace(mVcdFile, E, "(port)E");
    sc_trace(mVcdFile, r, "(port)r");
    sc_trace(mVcdFile, sigma, "(port)sigma");
    sc_trace(mVcdFile, T, "(port)T");
    sc_trace(mVcdFile, gaussian_random_number, "(port)gaussian_random_number");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, grp_fu_73_p2, "grp_fu_73_p2");
    sc_trace(mVcdFile, reg_106, "reg_106");
    sc_trace(mVcdFile, grp_fu_67_p2, "grp_fu_67_p2");
    sc_trace(mVcdFile, reg_114, "reg_114");
    sc_trace(mVcdFile, grp_fu_101_p2, "grp_fu_101_p2");
    sc_trace(mVcdFile, reg_121, "reg_121");
    sc_trace(mVcdFile, grp_fu_95_p2, "grp_fu_95_p2");
    sc_trace(mVcdFile, tmp_4_reg_160, "tmp_4_reg_160");
    sc_trace(mVcdFile, tmp_9_neg_fu_129_p2, "tmp_9_neg_fu_129_p2");
    sc_trace(mVcdFile, tmp_9_neg_reg_171, "tmp_9_neg_reg_171");
    sc_trace(mVcdFile, grp_fu_80_p2, "grp_fu_80_p2");
    sc_trace(mVcdFile, tmp_6_reg_186, "tmp_6_reg_186");
    sc_trace(mVcdFile, grp_fu_85_p2, "grp_fu_85_p2");
    sc_trace(mVcdFile, tmp_s_reg_191, "tmp_s_reg_191");
    sc_trace(mVcdFile, tmp_13_fu_139_p3, "tmp_13_fu_139_p3");
    sc_trace(mVcdFile, tmp_13_reg_206, "tmp_13_reg_206");
    sc_trace(mVcdFile, grp_fu_67_p0, "grp_fu_67_p0");
    sc_trace(mVcdFile, grp_fu_67_p1, "grp_fu_67_p1");
    sc_trace(mVcdFile, grp_fu_73_p0, "grp_fu_73_p0");
    sc_trace(mVcdFile, grp_fu_73_p1, "grp_fu_73_p1");
    sc_trace(mVcdFile, grp_fu_80_p0, "grp_fu_80_p0");
    sc_trace(mVcdFile, grp_fu_80_p1, "grp_fu_80_p1");
    sc_trace(mVcdFile, grp_fu_85_p0, "grp_fu_85_p0");
    sc_trace(mVcdFile, grp_fu_85_p1, "grp_fu_85_p1");
    sc_trace(mVcdFile, grp_fu_90_p0, "grp_fu_90_p0");
    sc_trace(mVcdFile, grp_fu_90_p1, "grp_fu_90_p1");
    sc_trace(mVcdFile, grp_fu_95_p1, "grp_fu_95_p1");
    sc_trace(mVcdFile, grp_fu_101_p1, "grp_fu_101_p1");
    sc_trace(mVcdFile, tmp_9_to_int_fu_126_p1, "tmp_9_to_int_fu_126_p1");
    sc_trace(mVcdFile, grp_fu_90_p2, "grp_fu_90_p2");
    sc_trace(mVcdFile, grp_fu_67_opcode, "grp_fu_67_opcode");
    sc_trace(mVcdFile, grp_fu_67_ce, "grp_fu_67_ce");
    sc_trace(mVcdFile, grp_fu_73_ce, "grp_fu_73_ce");
    sc_trace(mVcdFile, grp_fu_80_ce, "grp_fu_80_ce");
    sc_trace(mVcdFile, grp_fu_85_ce, "grp_fu_85_ce");
    sc_trace(mVcdFile, grp_fu_90_ce, "grp_fu_90_ce");
    sc_trace(mVcdFile, grp_fu_90_opcode, "grp_fu_90_opcode");
    sc_trace(mVcdFile, grp_fu_95_p0, "grp_fu_95_p0");
    sc_trace(mVcdFile, grp_fu_95_ce, "grp_fu_95_ce");
    sc_trace(mVcdFile, grp_fu_101_p0, "grp_fu_101_p0");
    sc_trace(mVcdFile, grp_fu_101_ce, "grp_fu_101_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("black_scholes2.hdltvin.dat");
    mHdltvoutHandle.open("black_scholes2.hdltvout.dat");
}

black_scholes2::~black_scholes2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete black_scholes2_dadddsub_64ns_64ns_64_5_full_dsp_U1;
    delete black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U2;
    delete black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U3;
    delete black_scholes2_dmul_64ns_64ns_64_6_max_dsp_U4;
    delete black_scholes2_dcmp_64ns_64ns_1_3_U5;
    delete black_scholes2_dsqrt_64ns_64ns_64_31_U6;
    delete black_scholes2_dexp_64ns_64ns_64_18_full_dsp_U7;
}

void black_scholes2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,7,7>(ap_ST_st26_fsm_25, ap_CS_fsm.read()) || esl_seteq<1,7,7>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) || esl_seteq<1,7,7>(ap_ST_st37_fsm_36, ap_CS_fsm.read()) || esl_seteq<1,7,7>(ap_ST_st43_fsm_42, ap_CS_fsm.read()) || esl_seteq<1,7,7>(ap_ST_st72_fsm_71, ap_CS_fsm.read()))) {
        reg_106 = grp_fu_73_p2.read();
    }
    if ((esl_seteq<1,7,7>(ap_ST_st37_fsm_36, ap_CS_fsm.read()) || esl_seteq<1,7,7>(ap_ST_st48_fsm_47, ap_CS_fsm.read()) || esl_seteq<1,7,7>(ap_ST_st77_fsm_76, ap_CS_fsm.read()))) {
        reg_114 = grp_fu_67_p2.read();
    }
    if ((esl_seteq<1,7,7>(ap_ST_st66_fsm_65, ap_CS_fsm.read()) || esl_seteq<1,7,7>(ap_ST_st80_fsm_79, ap_CS_fsm.read()))) {
        reg_121 = grp_fu_101_p2.read();
    }
    if (esl_seteq<1,7,7>(ap_ST_st80_fsm_79, ap_CS_fsm.read())) {
        tmp_13_reg_206 = tmp_13_fu_139_p3.read();
    }
    if (esl_seteq<1,7,7>(ap_ST_st31_fsm_30, ap_CS_fsm.read())) {
        tmp_4_reg_160 = grp_fu_95_p2.read();
    }
    if (esl_seteq<1,7,7>(ap_ST_st43_fsm_42, ap_CS_fsm.read())) {
        tmp_6_reg_186 = grp_fu_80_p2.read();
        tmp_s_reg_191 = grp_fu_85_p2.read();
    }
    if (esl_seteq<1,7,7>(ap_ST_st37_fsm_36, ap_CS_fsm.read())) {
        tmp_9_neg_reg_171 = tmp_9_neg_fu_129_p2.read();
    }
}

void black_scholes2::thread_ap_done() {
    if (esl_seteq<1,7,7>(ap_ST_st86_fsm_85, ap_CS_fsm.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void black_scholes2::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,7,7>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void black_scholes2::thread_ap_ready() {
    if (esl_seteq<1,7,7>(ap_ST_st86_fsm_85, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void black_scholes2::thread_ap_return() {
    ap_return = grp_fu_73_p2.read();
}

void black_scholes2::thread_grp_fu_101_ce() {
    grp_fu_101_ce = ap_const_logic_1;
}

void black_scholes2::thread_grp_fu_101_p0() {
    grp_fu_101_p0 = ap_const_lv64_0;
}

void black_scholes2::thread_grp_fu_101_p1() {
    if (esl_seteq<1,7,7>(ap_ST_st63_fsm_62, ap_CS_fsm.read())) {
        grp_fu_101_p1 = tmp_s_reg_191.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st49_fsm_48, ap_CS_fsm.read())) {
        grp_fu_101_p1 = reg_114.read();
    } else {
        grp_fu_101_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void black_scholes2::thread_grp_fu_67_ce() {
    grp_fu_67_ce = ap_const_logic_1;
}

void black_scholes2::thread_grp_fu_67_opcode() {
    if ((esl_seteq<1,7,7>(ap_ST_st33_fsm_32, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st73_fsm_72, ap_CS_fsm.read()))) {
        grp_fu_67_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,7,7>(ap_ST_st44_fsm_43, ap_CS_fsm.read())) {
        grp_fu_67_opcode = ap_const_lv2_0;
    } else {
        grp_fu_67_opcode =  (sc_lv<2>) ("XX");
    }
}

void black_scholes2::thread_grp_fu_67_p0() {
    if ((esl_seteq<1,7,7>(ap_ST_st73_fsm_72, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st44_fsm_43, ap_CS_fsm.read()))) {
        grp_fu_67_p0 = reg_106.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st33_fsm_32, ap_CS_fsm.read())) {
        grp_fu_67_p0 = r.read();
    } else {
        grp_fu_67_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void black_scholes2::thread_grp_fu_67_p1() {
    if (esl_seteq<1,7,7>(ap_ST_st73_fsm_72, ap_CS_fsm.read())) {
        grp_fu_67_p1 = E.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st44_fsm_43, ap_CS_fsm.read())) {
        grp_fu_67_p1 = tmp_6_reg_186.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st33_fsm_32, ap_CS_fsm.read())) {
        grp_fu_67_p1 = reg_106.read();
    } else {
        grp_fu_67_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void black_scholes2::thread_grp_fu_73_ce() {
    grp_fu_73_ce = ap_const_logic_1;
}

void black_scholes2::thread_grp_fu_73_p0() {
    if ((esl_seteq<1,7,7>(ap_ST_st67_fsm_66, ap_CS_fsm.read()) || 
         esl_seteq<1,7,7>(ap_ST_st81_fsm_80, ap_CS_fsm.read()))) {
        grp_fu_73_p0 = reg_121.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st38_fsm_37, ap_CS_fsm.read())) {
        grp_fu_73_p0 = reg_114.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st32_fsm_31, ap_CS_fsm.read())) {
        grp_fu_73_p0 = tmp_4_reg_160.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st27_fsm_26, ap_CS_fsm.read())) {
        grp_fu_73_p0 = reg_106.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st21_fsm_20, ap_CS_fsm.read())) {
        grp_fu_73_p0 = sigma.read();
    } else {
        grp_fu_73_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void black_scholes2::thread_grp_fu_73_p1() {
    if (esl_seteq<1,7,7>(ap_ST_st81_fsm_80, ap_CS_fsm.read())) {
        grp_fu_73_p1 = tmp_13_reg_206.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st67_fsm_66, ap_CS_fsm.read())) {
        grp_fu_73_p1 = S.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st38_fsm_37, ap_CS_fsm.read())) {
        grp_fu_73_p1 = T.read();
    } else if (esl_seteq<1,7,7>(ap_ST_st27_fsm_26, ap_CS_fsm.read())) {
        grp_fu_73_p1 = ap_const_lv64_3FE0000000000000;
    } else if ((esl_seteq<1,7,7>(ap_ST_st32_fsm_31, ap_CS_fsm.read()) || 
                esl_seteq<1,7,7>(ap_ST_st21_fsm_20, ap_CS_fsm.read()))) {
        grp_fu_73_p1 = sigma.read();
    } else {
        grp_fu_73_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void black_scholes2::thread_grp_fu_80_ce() {
    grp_fu_80_ce = ap_const_logic_1;
}

void black_scholes2::thread_grp_fu_80_p0() {
    grp_fu_80_p0 = reg_106.read();
}

void black_scholes2::thread_grp_fu_80_p1() {
    grp_fu_80_p1 = gaussian_random_number.read();
}

void black_scholes2::thread_grp_fu_85_ce() {
    grp_fu_85_ce = ap_const_logic_1;
}

void black_scholes2::thread_grp_fu_85_p0() {
    grp_fu_85_p0 = tmp_9_neg_reg_171.read();
}

void black_scholes2::thread_grp_fu_85_p1() {
    grp_fu_85_p1 = T.read();
}

void black_scholes2::thread_grp_fu_90_ce() {
    grp_fu_90_ce = ap_const_logic_1;
}

void black_scholes2::thread_grp_fu_90_opcode() {
    grp_fu_90_opcode = ap_const_lv5_4;
}

void black_scholes2::thread_grp_fu_90_p0() {
    grp_fu_90_p0 = reg_114.read();
}

void black_scholes2::thread_grp_fu_90_p1() {
    grp_fu_90_p1 = ap_const_lv64_0;
}

void black_scholes2::thread_grp_fu_95_ce() {
    grp_fu_95_ce = ap_const_logic_1;
}

void black_scholes2::thread_grp_fu_95_p0() {
    grp_fu_95_p0 = ap_const_lv64_0;
}

void black_scholes2::thread_grp_fu_95_p1() {
    grp_fu_95_p1 = T.read();
}

void black_scholes2::thread_tmp_13_fu_139_p3() {
    tmp_13_fu_139_p3 = (!grp_fu_90_p2.read()[0].is_01())? sc_lv<64>(): ((grp_fu_90_p2.read()[0].to_bool())? ap_const_lv64_0: reg_114.read());
}

void black_scholes2::thread_tmp_9_neg_fu_129_p2() {
    tmp_9_neg_fu_129_p2 = (tmp_9_to_int_fu_126_p1.read() ^ ap_const_lv64_8000000000000000);
}

void black_scholes2::thread_tmp_9_to_int_fu_126_p1() {
    tmp_9_to_int_fu_126_p1 = r.read();
}

void black_scholes2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
            break;
        case 12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
            break;
        case 13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
            break;
        case 14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
            break;
        case 15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
            break;
        case 17 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
            break;
        case 18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
            break;
        case 19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
            break;
        case 20 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
            break;
        case 21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
            break;
        case 22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
            break;
        case 23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
            break;
        case 24 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
            break;
        case 25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
            break;
        case 26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
            break;
        case 27 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
            break;
        case 28 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
            break;
        case 29 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
            break;
        case 30 : 
            ap_NS_fsm = ap_ST_st32_fsm_31;
            break;
        case 31 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
            break;
        case 33 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
            break;
        case 34 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
            break;
        case 35 : 
            ap_NS_fsm = ap_ST_st37_fsm_36;
            break;
        case 36 : 
            ap_NS_fsm = ap_ST_st38_fsm_37;
            break;
        case 37 : 
            ap_NS_fsm = ap_ST_st39_fsm_38;
            break;
        case 38 : 
            ap_NS_fsm = ap_ST_st40_fsm_39;
            break;
        case 39 : 
            ap_NS_fsm = ap_ST_st41_fsm_40;
            break;
        case 40 : 
            ap_NS_fsm = ap_ST_st42_fsm_41;
            break;
        case 41 : 
            ap_NS_fsm = ap_ST_st43_fsm_42;
            break;
        case 42 : 
            ap_NS_fsm = ap_ST_st44_fsm_43;
            break;
        case 43 : 
            ap_NS_fsm = ap_ST_st45_fsm_44;
            break;
        case 44 : 
            ap_NS_fsm = ap_ST_st46_fsm_45;
            break;
        case 45 : 
            ap_NS_fsm = ap_ST_st47_fsm_46;
            break;
        case 46 : 
            ap_NS_fsm = ap_ST_st48_fsm_47;
            break;
        case 47 : 
            ap_NS_fsm = ap_ST_st49_fsm_48;
            break;
        case 48 : 
            ap_NS_fsm = ap_ST_st50_fsm_49;
            break;
        case 49 : 
            ap_NS_fsm = ap_ST_st51_fsm_50;
            break;
        case 50 : 
            ap_NS_fsm = ap_ST_st52_fsm_51;
            break;
        case 51 : 
            ap_NS_fsm = ap_ST_st53_fsm_52;
            break;
        case 52 : 
            ap_NS_fsm = ap_ST_st54_fsm_53;
            break;
        case 53 : 
            ap_NS_fsm = ap_ST_st55_fsm_54;
            break;
        case 54 : 
            ap_NS_fsm = ap_ST_st56_fsm_55;
            break;
        case 55 : 
            ap_NS_fsm = ap_ST_st57_fsm_56;
            break;
        case 56 : 
            ap_NS_fsm = ap_ST_st58_fsm_57;
            break;
        case 57 : 
            ap_NS_fsm = ap_ST_st59_fsm_58;
            break;
        case 58 : 
            ap_NS_fsm = ap_ST_st60_fsm_59;
            break;
        case 59 : 
            ap_NS_fsm = ap_ST_st61_fsm_60;
            break;
        case 60 : 
            ap_NS_fsm = ap_ST_st62_fsm_61;
            break;
        case 61 : 
            ap_NS_fsm = ap_ST_st63_fsm_62;
            break;
        case 62 : 
            ap_NS_fsm = ap_ST_st64_fsm_63;
            break;
        case 63 : 
            ap_NS_fsm = ap_ST_st65_fsm_64;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st66_fsm_65;
            break;
        case 65 : 
            ap_NS_fsm = ap_ST_st67_fsm_66;
            break;
        case 66 : 
            ap_NS_fsm = ap_ST_st68_fsm_67;
            break;
        case 67 : 
            ap_NS_fsm = ap_ST_st69_fsm_68;
            break;
        case 68 : 
            ap_NS_fsm = ap_ST_st70_fsm_69;
            break;
        case 69 : 
            ap_NS_fsm = ap_ST_st71_fsm_70;
            break;
        case 70 : 
            ap_NS_fsm = ap_ST_st72_fsm_71;
            break;
        case 71 : 
            ap_NS_fsm = ap_ST_st73_fsm_72;
            break;
        case 72 : 
            ap_NS_fsm = ap_ST_st74_fsm_73;
            break;
        case 73 : 
            ap_NS_fsm = ap_ST_st75_fsm_74;
            break;
        case 74 : 
            ap_NS_fsm = ap_ST_st76_fsm_75;
            break;
        case 75 : 
            ap_NS_fsm = ap_ST_st77_fsm_76;
            break;
        case 76 : 
            ap_NS_fsm = ap_ST_st78_fsm_77;
            break;
        case 77 : 
            ap_NS_fsm = ap_ST_st79_fsm_78;
            break;
        case 78 : 
            ap_NS_fsm = ap_ST_st80_fsm_79;
            break;
        case 79 : 
            ap_NS_fsm = ap_ST_st81_fsm_80;
            break;
        case 80 : 
            ap_NS_fsm = ap_ST_st82_fsm_81;
            break;
        case 81 : 
            ap_NS_fsm = ap_ST_st83_fsm_82;
            break;
        case 82 : 
            ap_NS_fsm = ap_ST_st84_fsm_83;
            break;
        case 83 : 
            ap_NS_fsm = ap_ST_st85_fsm_84;
            break;
        case 84 : 
            ap_NS_fsm = ap_ST_st86_fsm_85;
            break;
        case 85 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void black_scholes2::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"S\" :  \"" << S.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"E\" :  \"" << E.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"r\" :  \"" << r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sigma\" :  \"" << sigma.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"T\" :  \"" << T.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"gaussian_random_number\" :  \"" << gaussian_random_number.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

