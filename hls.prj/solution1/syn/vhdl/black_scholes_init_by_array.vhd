-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity black_scholes_init_by_array is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mti : OUT STD_LOGIC_VECTOR (31 downto 0);
    mti_ap_vld : OUT STD_LOGIC;
    mt_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mt_ce0 : OUT STD_LOGIC;
    mt_we0 : OUT STD_LOGIC;
    mt_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    mt_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of black_scholes_init_by_array is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv10_270 : STD_LOGIC_VECTOR (9 downto 0) := "1001110000";
    constant ap_const_lv10_26F : STD_LOGIC_VECTOR (9 downto 0) := "1001101111";
    constant ap_const_lv64_12BD6AA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001001010111101011010101010";
    constant ap_const_lv64_80000000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_6C078965 : STD_LOGIC_VECTOR (31 downto 0) := "01101100000001111000100101100101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_19660D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000110010110011000001101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_123 : STD_LOGIC_VECTOR (10 downto 0) := "00100100011";
    constant ap_const_lv11_345 : STD_LOGIC_VECTOR (10 downto 0) := "01101000101";
    constant ap_const_lv11_234 : STD_LOGIC_VECTOR (10 downto 0) := "01000110100";
    constant ap_const_lv11_456 : STD_LOGIC_VECTOR (10 downto 0) := "10001010110";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv64_5D588B65 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000001011101010110001000101101100101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal tmp_1_i_cast_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_cast_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_cast_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_cast_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_fu_306_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal mt_addr_reg_593 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_464_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_fu_471_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_2_reg_623 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_498_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_636 : STD_LOGIC_VECTOR (63 downto 0);
    signal mt_addr_3_reg_641 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_520_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_646 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_546_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_i_reg_133 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_169 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_phi_fu_221_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_205 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_i_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_318_p2_temp: signed (32-1 downto 0);
    signal tmp_s_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_145_temp: signed (32-1 downto 0);
    signal tmp_11_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_483_p2_temp: signed (32-1 downto 0);
    signal tmp_2_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_194_temp: signed (32-1 downto 0);
    signal tmp_i_cast_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_256_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_267_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_23_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_339_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_339_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_359_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp4_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_cast_cast_fu_381_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal newSel7_fu_395_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal newSel9_fu_403_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_449_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_504_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_504_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_514_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_ce : STD_LOGIC;
    signal grp_fu_339_ce : STD_LOGIC;
    signal grp_fu_504_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component black_scholes_mul_32s_31ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component black_scholes_mul_64s_21ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component black_scholes_mul_64s_31ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    black_scholes_mul_32s_31ns_32_6_U1 : component black_scholes_mul_32s_31ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_287_p0,
        din1 => grp_fu_287_p1,
        ce => grp_fu_287_ce,
        dout => grp_fu_287_p2);

    black_scholes_mul_64s_21ns_64_6_U2 : component black_scholes_mul_64s_21ns_64_6
    generic map (
        ID => 2,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 21,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_339_p0,
        din1 => grp_fu_339_p1,
        ce => grp_fu_339_ce,
        dout => grp_fu_339_p2);

    black_scholes_mul_64s_31ns_64_6_U3 : component black_scholes_mul_64s_31ns_64_6
    generic map (
        ID => 3,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 31,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_504_p0,
        din1 => grp_fu_504_p1,
        ce => grp_fu_504_ce,
        dout => grp_fu_504_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_181 assign process. --
    i_1_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_21_fu_443_p2))) then 
                i_1_reg_181 <= i_4_fu_431_p2;
            elsif (((ap_ST_st21_fsm_20 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_21_reg_614)))) then 
                i_1_reg_181 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- i_2_reg_194 assign process. --
    i_2_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_fu_312_p2)))) then 
                i_2_reg_194 <= i_reg_145;
            elsif ((ap_ST_st33_fsm_32 = ap_CS_fsm)) then 
                i_2_reg_194 <= i_3_phi_fu_221_p4;
            end if; 
        end if;
    end process;

    -- i_3_reg_217 assign process. --
    i_3_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st31_fsm_30 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_22_fu_540_p2))) then 
                i_3_reg_217 <= i_5_fu_534_p2;
            elsif (((ap_ST_st33_fsm_32 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_22_reg_656)))) then 
                i_3_reg_217 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    -- i_reg_145 assign process. --
    i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_250_p2 = ap_const_lv1_0)))) then 
                i_reg_145 <= ap_const_lv32_1;
            elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                i_reg_145 <= i_1_reg_181;
            end if; 
        end if;
    end process;

    -- j_reg_157 assign process. --
    j_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_250_p2 = ap_const_lv1_0)))) then 
                j_reg_157 <= ap_const_lv32_0;
            elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                j_reg_157 <= p_s_reg_618;
            end if; 
        end if;
    end process;

    -- k_1_reg_205 assign process. --
    k_1_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_fu_312_p2)))) then 
                k_1_reg_205 <= ap_const_lv10_26F;
            elsif ((ap_ST_st33_fsm_32 = ap_CS_fsm)) then 
                k_1_reg_205 <= k_3_fu_546_p2;
            end if; 
        end if;
    end process;

    -- k_reg_169 assign process. --
    k_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_i_fu_250_p2 = ap_const_lv1_0)))) then 
                k_reg_169 <= ap_const_lv10_270;
            elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                k_reg_169 <= k_2_reg_623;
            end if; 
        end if;
    end process;

    -- tmp_1_i_reg_133 assign process. --
    tmp_1_i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
                tmp_1_i_reg_133 <= tmp_2_i_fu_306_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                tmp_1_i_reg_133 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then
                j_1_reg_608 <= j_1_fu_437_p2;
                tmp_21_reg_614 <= tmp_21_fu_443_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then
                k_2_reg_623 <= k_2_fu_471_p2;
                p_s_reg_618 <= p_s_fu_464_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st29_fsm_28 = ap_CS_fsm)) then
                mt_addr_3_reg_641 <= tmp_2_fu_509_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then
                mt_addr_reg_593 <= tmp_s_fu_344_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then
                tmp_13_reg_636 <= tmp_13_fu_498_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                tmp_18_reg_565 <= tmp_18_fu_281_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                tmp_1_i_cast_reg_552(0) <= tmp_1_i_cast_fu_240_p1(0);
    tmp_1_i_cast_reg_552(1) <= tmp_1_i_cast_fu_240_p1(1);
    tmp_1_i_cast_reg_552(2) <= tmp_1_i_cast_fu_240_p1(2);
    tmp_1_i_cast_reg_552(3) <= tmp_1_i_cast_fu_240_p1(3);
    tmp_1_i_cast_reg_552(4) <= tmp_1_i_cast_fu_240_p1(4);
    tmp_1_i_cast_reg_552(5) <= tmp_1_i_cast_fu_240_p1(5);
    tmp_1_i_cast_reg_552(6) <= tmp_1_i_cast_fu_240_p1(6);
    tmp_1_i_cast_reg_552(7) <= tmp_1_i_cast_fu_240_p1(7);
    tmp_1_i_cast_reg_552(8) <= tmp_1_i_cast_fu_240_p1(8);
    tmp_1_i_cast_reg_552(9) <= tmp_1_i_cast_fu_240_p1(9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st31_fsm_30 = ap_CS_fsm)) then
                tmp_22_reg_656 <= tmp_22_fu_540_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then
                tmp_25_reg_598 <= tmp_25_fu_355_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st30_fsm_29 = ap_CS_fsm)) then
                tmp_27_reg_646 <= tmp_27_fu_520_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                tmp_7_reg_588 <= tmp_7_fu_333_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                tmp_9_i_cast_reg_570 <= tmp_9_i_cast_fu_292_p2;
            end if;
        end if;
    end process;
    tmp_1_i_cast_reg_552(31 downto 10) <= "0000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_i_fu_250_p2, tmp_fu_312_p2, tmp_21_fu_443_p2, tmp_3_fu_477_p2, tmp_22_fu_540_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_i_fu_250_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_lv1_0 = tmp_fu_312_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                if ((ap_const_lv1_0 = tmp_21_fu_443_p2)) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st23_fsm_22 => 
                if (not((ap_const_lv1_0 = tmp_3_fu_477_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                if ((ap_const_lv1_0 = tmp_22_fu_540_p2)) then
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                else
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                end if;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, tmp_3_fu_477_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_477_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_3_fu_477_p2)
    begin
        if (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_477_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_250_p2 <= "1" when (tmp_1_i_reg_133 = ap_const_lv10_270) else "0";
    grp_fu_230_p4 <= mt_q0(63 downto 30);
    grp_fu_287_ce <= ap_const_logic_1;
    grp_fu_287_p0 <= tmp_18_reg_565;
    grp_fu_287_p1 <= ap_const_lv32_6C078965(31 - 1 downto 0);
    grp_fu_339_ce <= ap_const_logic_1;
    grp_fu_339_p0 <= tmp_7_reg_588;
    grp_fu_339_p1 <= ap_const_lv64_19660D(21 - 1 downto 0);
    grp_fu_504_ce <= ap_const_logic_1;
    grp_fu_504_p0 <= tmp_13_reg_636;
    grp_fu_504_p1 <= ap_const_lv64_5D588B65(31 - 1 downto 0);

    -- i_3_phi_fu_221_p4 assign process. --
    i_3_phi_fu_221_p4_assign_proc : process(ap_CS_fsm, tmp_22_reg_656, i_3_reg_217)
    begin
        if (((ap_ST_st33_fsm_32 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_22_reg_656)))) then 
            i_3_phi_fu_221_p4 <= ap_const_lv32_1;
        else 
            i_3_phi_fu_221_p4 <= i_3_reg_217;
        end if; 
    end process;

    i_4_fu_431_p2 <= std_logic_vector(unsigned(i_reg_145) + unsigned(ap_const_lv32_1));
    i_5_fu_534_p2 <= std_logic_vector(unsigned(i_2_reg_194) + unsigned(ap_const_lv32_1));
    icmp_fu_458_p2 <= "1" when (signed(tmp_28_fu_449_p4) < signed(ap_const_lv30_1)) else "0";
    j_1_fu_437_p2 <= std_logic_vector(unsigned(j_reg_157) + unsigned(ap_const_lv32_1));
    k_2_fu_471_p2 <= std_logic_vector(unsigned(k_reg_169) + unsigned(ap_const_lv10_3FF));
    k_3_fu_546_p2 <= std_logic_vector(unsigned(k_1_reg_205) + unsigned(ap_const_lv10_3FF));

    -- mt_address0 assign process. --
    mt_address0_assign_proc : process(ap_CS_fsm, mt_addr_reg_593, tmp_3_fu_477_p2, mt_addr_3_reg_641, tmp_4_i_fu_262_p1, tmp_8_i_fu_297_p1, tmp_5_fu_324_p1, tmp_s_fu_344_p1, tmp_11_fu_489_p1, tmp_2_fu_509_p1)
    begin
        if ((ap_ST_st31_fsm_30 = ap_CS_fsm)) then 
            mt_address0 <= mt_addr_3_reg_641;
        elsif ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            mt_address0 <= mt_addr_reg_593;
        elsif ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            mt_address0 <= tmp_8_i_fu_297_p1(10 - 1 downto 0);
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or ((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_477_p2))))) then 
            mt_address0 <= ap_const_lv10_0;
        elsif ((ap_ST_st29_fsm_28 = ap_CS_fsm)) then 
            mt_address0 <= tmp_2_fu_509_p1(10 - 1 downto 0);
        elsif (((ap_ST_st23_fsm_22 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_477_p2))) then 
            mt_address0 <= tmp_11_fu_489_p1(10 - 1 downto 0);
        elsif (((ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm))) then 
            mt_address0 <= ap_const_lv10_26F;
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            mt_address0 <= tmp_s_fu_344_p1(10 - 1 downto 0);
        elsif ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            mt_address0 <= tmp_5_fu_324_p1(10 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            mt_address0 <= tmp_4_i_fu_262_p1(10 - 1 downto 0);
        else 
            mt_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- mt_ce0 assign process. --
    mt_ce0_assign_proc : process(ap_start, ap_CS_fsm, tmp_3_fu_477_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or ((ap_ST_st23_fsm_22 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_3_fu_477_p2)) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or ((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_477_p2))) or (ap_ST_st32_fsm_31 = ap_CS_fsm))) then 
            mt_ce0 <= ap_const_logic_1;
        else 
            mt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- mt_d0 assign process. --
    mt_d0_assign_proc : process(ap_CS_fsm, mt_q0, tmp_3_fu_477_p2, tmp_i_cast_fu_302_p1, tmp_20_cast_fu_426_p1, tmp_17_cast_fu_529_p1)
    begin
        if ((ap_ST_st31_fsm_30 = ap_CS_fsm)) then 
            mt_d0 <= tmp_17_cast_fu_529_p1;
        elsif (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_477_p2)))) then 
            mt_d0 <= ap_const_lv64_80000000;
        elsif (((ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm))) then 
            mt_d0 <= mt_q0;
        elsif ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            mt_d0 <= tmp_20_cast_fu_426_p1;
        elsif ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            mt_d0 <= tmp_i_cast_fu_302_p1;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            mt_d0 <= ap_const_lv64_12BD6AA;
        else 
            mt_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- mt_we0 assign process. --
    mt_we0_assign_proc : process(ap_start, ap_CS_fsm, tmp_21_reg_614, tmp_3_fu_477_p2, tmp_22_reg_656)
    begin
        if (((ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_st21_fsm_20 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_21_reg_614))) or ((ap_ST_st33_fsm_32 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_22_reg_656))) or ((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_3_fu_477_p2))))) then 
            mt_we0 <= ap_const_logic_1;
        else 
            mt_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mti <= std_logic_vector(resize(unsigned(tmp_1_i_reg_133),32));

    -- mti_ap_vld assign process. --
    mti_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            mti_ap_vld <= ap_const_logic_1;
        else 
            mti_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    newSel7_fu_395_p3 <= 
        ap_const_lv11_234 when (sel_tmp_fu_363_p2(0) = '1') else 
        ap_const_lv11_456;
    newSel9_fu_403_p3 <= 
        newSel_cast_cast_fu_381_p3 when (or_cond_fu_389_p2(0) = '1') else 
        newSel7_fu_395_p3;
    newSel_cast_cast_fu_381_p3 <= 
        ap_const_lv11_123 when (sel_tmp4_fu_375_p2(0) = '1') else 
        ap_const_lv11_345;
    or_cond_fu_389_p2 <= (sel_tmp4_fu_375_p2 or sel_tmp2_fu_369_p2);
    p_s_fu_464_p3 <= 
        j_1_reg_608 when (icmp_fu_458_p2(0) = '1') else 
        ap_const_lv32_0;
    sel_tmp2_fu_369_p2 <= "1" when (tmp_24_fu_359_p1 = ap_const_lv2_2) else "0";
    sel_tmp4_fu_375_p2 <= "1" when (tmp_24_fu_359_p1 = ap_const_lv2_0) else "0";
    sel_tmp_fu_363_p2 <= "1" when (tmp_24_fu_359_p1 = ap_const_lv2_1) else "0";
    tmp_10_fu_483_p2 <= std_logic_vector(unsigned(i_2_reg_194) + unsigned(ap_const_lv32_FFFFFFFF));
    
    tmp_10_fu_483_p2_temp <= signed(tmp_10_fu_483_p2);
    tmp_11_fu_489_p1 <= std_logic_vector(resize(tmp_10_fu_483_p2_temp,64));

    tmp_13_fu_498_p2 <= (tmp_26_fu_494_p1 xor mt_q0);
    tmp_15_fu_514_p2 <= (grp_fu_504_p2 xor mt_q0);
    tmp_16_cast_fu_524_p2 <= std_logic_vector(unsigned(tmp_27_reg_646) - unsigned(i_2_reg_194));
    tmp_17_cast_fu_529_p1 <= std_logic_vector(resize(unsigned(tmp_16_cast_fu_524_p2),64));
    tmp_17_fu_277_p1 <= mt_q0(32 - 1 downto 0);
    tmp_18_fu_281_p2 <= (tmp_1_fu_267_p4 xor tmp_17_fu_277_p1);
    tmp_19_cast_fu_420_p2 <= std_logic_vector(unsigned(tmp_19_fu_411_p2) + unsigned(tmp_20_fu_416_p1));
    tmp_19_fu_411_p2 <= std_logic_vector(unsigned(tmp_25_reg_598) + unsigned(j_reg_157));
    tmp_1_fu_267_p4 <= mt_q0(61 downto 30);
    tmp_1_i_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(tmp_1_i_reg_133),32));
    tmp_20_cast_fu_426_p1 <= std_logic_vector(resize(unsigned(tmp_19_cast_fu_420_p2),64));
    tmp_20_fu_416_p1 <= std_logic_vector(resize(unsigned(newSel9_fu_403_p3),32));
    tmp_21_fu_443_p2 <= "1" when (signed(i_4_fu_431_p2) > signed(ap_const_lv32_26F)) else "0";
    tmp_22_fu_540_p2 <= "1" when (signed(i_5_fu_534_p2) > signed(ap_const_lv32_26F)) else "0";
    tmp_23_fu_329_p1 <= std_logic_vector(resize(unsigned(grp_fu_230_p4),64));
    tmp_24_fu_359_p1 <= j_reg_157(2 - 1 downto 0);
    tmp_25_fu_355_p1 <= tmp_9_fu_349_p2(32 - 1 downto 0);
    tmp_26_fu_494_p1 <= std_logic_vector(resize(unsigned(grp_fu_230_p4),64));
    tmp_27_fu_520_p1 <= tmp_15_fu_514_p2(32 - 1 downto 0);
    tmp_28_fu_449_p4 <= j_1_reg_608(31 downto 2);
    
    i_2_reg_194_temp <= signed(i_2_reg_194);
    tmp_2_fu_509_p1 <= std_logic_vector(resize(i_2_reg_194_temp,64));

    tmp_2_i_fu_306_p2 <= std_logic_vector(unsigned(tmp_1_i_reg_133) + unsigned(ap_const_lv10_1));
    tmp_3_fu_477_p2 <= "1" when (k_1_reg_205 = ap_const_lv10_0) else "0";
    tmp_3_i_fu_256_p2 <= std_logic_vector(unsigned(tmp_1_i_reg_133) + unsigned(ap_const_lv10_3FF));
    tmp_4_fu_318_p2 <= std_logic_vector(unsigned(i_reg_145) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_4_i_fu_262_p1 <= std_logic_vector(resize(unsigned(tmp_3_i_fu_256_p2),64));
    
    tmp_4_fu_318_p2_temp <= signed(tmp_4_fu_318_p2);
    tmp_5_fu_324_p1 <= std_logic_vector(resize(tmp_4_fu_318_p2_temp,64));

    tmp_7_fu_333_p2 <= (tmp_23_fu_329_p1 xor mt_q0);
    tmp_8_i_fu_297_p1 <= std_logic_vector(resize(unsigned(tmp_1_i_reg_133),64));
    tmp_9_fu_349_p2 <= (grp_fu_339_p2 xor mt_q0);
    tmp_9_i_cast_fu_292_p2 <= std_logic_vector(unsigned(grp_fu_287_p2) + unsigned(tmp_1_i_cast_reg_552));
    tmp_fu_312_p2 <= "1" when (k_reg_169 = ap_const_lv10_0) else "0";
    tmp_i_cast_fu_302_p1 <= std_logic_vector(resize(unsigned(tmp_9_i_cast_reg_570),64));
    
    i_reg_145_temp <= signed(i_reg_145);
    tmp_s_fu_344_p1 <= std_logic_vector(resize(i_reg_145_temp,64));

end behav;
