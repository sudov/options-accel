-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity black_scholes_genrand_int32 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mti_i : IN STD_LOGIC_VECTOR (31 downto 0);
    mti_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    mti_o_ap_vld : OUT STD_LOGIC;
    mt_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mt_ce0 : OUT STD_LOGIC;
    mt_we0 : OUT STD_LOGIC;
    mt_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    mt_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    mt_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    mt_ce1 : OUT STD_LOGIC;
    mt_we1 : OUT STD_LOGIC;
    mt_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    mt_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of black_scholes_genrand_int32 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_E3 : STD_LOGIC_VECTOR (9 downto 0) := "0011100011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_1571 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001010101110001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_26F : STD_LOGIC_VECTOR (9 downto 0) := "1001101111";
    constant ap_const_lv10_18C : STD_LOGIC_VECTOR (9 downto 0) := "0110001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_271 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110001";
    constant ap_const_lv10_270 : STD_LOGIC_VECTOR (9 downto 0) := "1001110000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_6C078965 : STD_LOGIC_VECTOR (31 downto 0) := "01101100000001111000100101100101";
    constant ap_const_lv8_E3 : STD_LOGIC_VECTOR (7 downto 0) := "11100011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_18D : STD_LOGIC_VECTOR (9 downto 0) := "0110001101";
    constant ap_const_lv64_9908B0DF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000010011001000010001011000011011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_11D : STD_LOGIC_VECTOR (8 downto 0) := "100011101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal reg_268 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_802 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_cast_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_cast_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_cast_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_cast_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_fu_354_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal kk_cast7_fu_360_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal kk_cast7_reg_838 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal mt_addr_reg_851 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_reg_862 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_872 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_56_fu_414_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal mt_addr_7_reg_885 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kk_2_fu_459_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal kk_2_reg_891 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_62_fu_470_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_62_reg_901 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_60_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_490_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_525_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_926 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_204 : STD_LOGIC_VECTOR (9 downto 0);
    signal kk_reg_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal kk_1_reg_227 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_47_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_i_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_reg_238_temp: signed (32-1 downto 0);
    signal tmp_48_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_cast_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_518_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_553_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_304_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_fu_315_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_418_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal mag01_load_phi_cast_cast_fu_428_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_fu_435_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_480_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_fu_494_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal mag01_load_2_phi_cast_cast_fu_505_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_512_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_529_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal mag01_load_1_phi_cast_cast_fu_540_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3_fu_547_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_cast_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_577_p4 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_54_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_1_fu_591_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_597_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_605_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_70_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_71_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_631_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_72_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_fu_649_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_657_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_74_fu_667_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_671_p19 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_cast_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_2_fu_715_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_721_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_67_fu_731_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_68_fu_741_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_53_fu_751_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_cast_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_3_fu_771_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_777_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_69_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_335_ce : STD_LOGIC;
    signal y_4_fu_791_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component black_scholes_mul_32s_31ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    black_scholes_mul_32s_31ns_32_6_U6 : component black_scholes_mul_32s_31ns_32_6
    generic map (
        ID => 6,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_335_p0,
        din1 => grp_fu_335_p1,
        ce => grp_fu_335_ce,
        dout => grp_fu_335_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
                    ap_return_preg <= y_4_fu_791_p2;
                end if; 
            end if;
        end if;
    end process;


    -- kk_1_reg_227 assign process. --
    kk_1_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_364_p2)))) then 
                kk_1_reg_227 <= ap_const_lv10_E3;
            elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
                kk_1_reg_227 <= kk_2_reg_891;
            end if; 
        end if;
    end process;

    -- kk_reg_216 assign process. --
    kk_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                kk_reg_216 <= tmp_26_reg_846;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and ((tmp_s_reg_806 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_298_p2))))) then 
                kk_reg_216 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- tmp_1_i_reg_204 assign process. --
    tmp_1_i_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
                tmp_1_i_reg_204 <= tmp_2_i_fu_354_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_276_p2 = ap_const_lv1_0)) and not((tmp_s_fu_282_p2 = ap_const_lv1_0)))) then 
                tmp_1_i_reg_204 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    -- tmp_47_reg_238 assign process. --
    tmp_47_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and (tmp_fu_276_p2 = ap_const_lv1_0))) then 
                tmp_47_reg_238 <= mti_i;
            elsif (((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((tmp_reg_802 = ap_const_lv1_0)))) then 
                tmp_47_reg_238 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_448_p2))) then
                kk_2_reg_891 <= kk_2_fu_459_p2;
                mt_addr_7_reg_885 <= tmp_38_fu_454_p1(10 - 1 downto 0);
                tmp_62_reg_901 <= tmp_62_fu_470_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then
                kk_cast7_reg_838(0) <= kk_cast7_fu_360_p1(0);
    kk_cast7_reg_838(1) <= kk_cast7_fu_360_p1(1);
    kk_cast7_reg_838(2) <= kk_cast7_fu_360_p1(2);
    kk_cast7_reg_838(3) <= kk_cast7_fu_360_p1(3);
    kk_cast7_reg_838(4) <= kk_cast7_fu_360_p1(4);
    kk_cast7_reg_838(5) <= kk_cast7_fu_360_p1(5);
    kk_cast7_reg_838(6) <= kk_cast7_fu_360_p1(6);
    kk_cast7_reg_838(7) <= kk_cast7_fu_360_p1(7);
                tmp_26_reg_846 <= tmp_26_fu_370_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_364_p2))) then
                mt_addr_reg_851(0) <= tmp_24_fu_376_p1(10 - 1 downto 0)(0);
    mt_addr_reg_851(1) <= tmp_24_fu_376_p1(10 - 1 downto 0)(1);
    mt_addr_reg_851(2) <= tmp_24_fu_376_p1(10 - 1 downto 0)(2);
    mt_addr_reg_851(3) <= tmp_24_fu_376_p1(10 - 1 downto 0)(3);
    mt_addr_reg_851(4) <= tmp_24_fu_376_p1(10 - 1 downto 0)(4);
    mt_addr_reg_851(5) <= tmp_24_fu_376_p1(10 - 1 downto 0)(5);
    mt_addr_reg_851(6) <= tmp_24_fu_376_p1(10 - 1 downto 0)(6);
    mt_addr_reg_851(7) <= tmp_24_fu_376_p1(10 - 1 downto 0)(7);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm))) then
                reg_268 <= mt_q0(30 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_reg_806 = ap_const_lv1_0)))) then
                tmp_1_i_cast_reg_810(0) <= tmp_1_i_cast_fu_288_p1(0);
    tmp_1_i_cast_reg_810(1) <= tmp_1_i_cast_fu_288_p1(1);
    tmp_1_i_cast_reg_810(2) <= tmp_1_i_cast_fu_288_p1(2);
    tmp_1_i_cast_reg_810(3) <= tmp_1_i_cast_fu_288_p1(3);
    tmp_1_i_cast_reg_810(4) <= tmp_1_i_cast_fu_288_p1(4);
    tmp_1_i_cast_reg_810(5) <= tmp_1_i_cast_fu_288_p1(5);
    tmp_1_i_cast_reg_810(6) <= tmp_1_i_cast_fu_288_p1(6);
    tmp_1_i_cast_reg_810(7) <= tmp_1_i_cast_fu_288_p1(7);
    tmp_1_i_cast_reg_810(8) <= tmp_1_i_cast_fu_288_p1(8);
    tmp_1_i_cast_reg_810(9) <= tmp_1_i_cast_fu_288_p1(9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                tmp_37_reg_872 <= mt_q1(30 downto 1);
                tmp_46_reg_862 <= mt_q0(31 downto 31);
                tmp_56_reg_877 <= tmp_56_fu_414_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                tmp_40_reg_823 <= tmp_40_fu_329_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then
                tmp_57_reg_921 <= mt_q1(31 downto 31);
                tmp_59_reg_926 <= tmp_59_fu_525_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then
                tmp_60_reg_906 <= mt_q1(31 downto 31);
                tmp_63_reg_916 <= tmp_63_fu_490_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                tmp_9_i_cast_reg_828 <= tmp_9_i_cast_fu_340_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                tmp_reg_802 <= tmp_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_276_p2 = ap_const_lv1_0)))) then
                tmp_s_reg_806 <= tmp_s_fu_282_p2;
            end if;
        end if;
    end process;
    tmp_1_i_cast_reg_810(31 downto 10) <= "0000000000000000000000";
    kk_cast7_reg_838(9 downto 8) <= "00";
    mt_addr_reg_851(9 downto 8) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_276_p2, tmp_s_reg_806, exitcond_i_fu_298_p2, exitcond1_fu_364_p2, exitcond_fu_448_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((tmp_fu_276_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not((ap_start = ap_const_logic_0)) and (tmp_fu_276_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((tmp_s_reg_806 = ap_const_lv1_0) or not((ap_const_lv1_0 = exitcond_i_fu_298_p2)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_364_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_lv1_0 = exitcond_fu_448_p2))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st20_fsm_19 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_CS_fsm, y_4_fu_791_p2, ap_return_preg)
    begin
        if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            ap_return <= y_4_fu_791_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    exitcond1_fu_364_p2 <= "1" when (kk_reg_216 = ap_const_lv8_E3) else "0";
    exitcond_fu_448_p2 <= "1" when (kk_1_reg_227 = ap_const_lv10_26F) else "0";
    exitcond_i_fu_298_p2 <= "1" when (tmp_1_i_reg_204 = ap_const_lv10_270) else "0";
    grp_fu_335_ce <= ap_const_logic_1;
    grp_fu_335_p0 <= tmp_40_reg_823;
    grp_fu_335_p1 <= ap_const_lv32_6C078965(31 - 1 downto 0);
    kk_2_fu_459_p2 <= std_logic_vector(unsigned(kk_1_reg_227) + unsigned(ap_const_lv10_1));
    kk_cast7_fu_360_p1 <= std_logic_vector(resize(unsigned(kk_reg_216),10));
    mag01_load_1_phi_cast_cast_fu_540_p3 <= 
        ap_const_lv64_9908B0DF when (tmp_59_reg_926(0) = '1') else 
        ap_const_lv64_0;
    mag01_load_2_phi_cast_cast_fu_505_p3 <= 
        ap_const_lv64_9908B0DF when (tmp_63_reg_916(0) = '1') else 
        ap_const_lv64_0;
    mag01_load_phi_cast_cast_fu_428_p3 <= 
        ap_const_lv64_9908B0DF when (tmp_56_reg_877(0) = '1') else 
        ap_const_lv64_0;

    -- mt_address0 assign process. --
    mt_address0_assign_proc : process(ap_CS_fsm, mt_addr_7_reg_885, exitcond_fu_448_p2, tmp_4_i_fu_310_p1, tmp_8_i_fu_345_p1, tmp_24_fu_376_p1, tmp_39_fu_465_p1)
    begin
        if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
            mt_address0 <= ap_const_lv10_26F;
        elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            mt_address0 <= mt_addr_7_reg_885;
        elsif ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            mt_address0 <= tmp_8_i_fu_345_p1(10 - 1 downto 0);
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_448_p2))))) then 
            mt_address0 <= ap_const_lv10_0;
        elsif (((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_448_p2))) then 
            mt_address0 <= tmp_39_fu_465_p1(10 - 1 downto 0);
        elsif ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            mt_address0 <= tmp_24_fu_376_p1(10 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            mt_address0 <= tmp_4_i_fu_310_p1(10 - 1 downto 0);
        else 
            mt_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- mt_address1 assign process. --
    mt_address1_assign_proc : process(ap_CS_fsm, mt_addr_reg_851, exitcond_fu_448_p2, tmp_27_fu_381_p1, tmp_30_fu_399_p1, tmp_38_fu_454_p1, tmp_43_fu_485_p1, tmp_49_fu_572_p1)
    begin
        if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            mt_address1 <= mt_addr_reg_851;
        elsif ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            mt_address1 <= tmp_49_fu_572_p1(10 - 1 downto 0);
        elsif ((ap_ST_st17_fsm_16 = ap_CS_fsm)) then 
            mt_address1 <= ap_const_lv10_18C;
        elsif ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            mt_address1 <= tmp_43_fu_485_p1(10 - 1 downto 0);
        elsif (((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_448_p2)))) then 
            mt_address1 <= ap_const_lv10_26F;
        elsif (((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_448_p2))) then 
            mt_address1 <= tmp_38_fu_454_p1(10 - 1 downto 0);
        elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            mt_address1 <= tmp_30_fu_399_p1(10 - 1 downto 0);
        elsif ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            mt_address1 <= tmp_27_fu_381_p1(10 - 1 downto 0);
        else 
            mt_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- mt_ce0 assign process. --
    mt_ce0_assign_proc : process(ap_start, ap_CS_fsm, exitcond_fu_448_p2)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_448_p2)) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st18_fsm_17 = ap_CS_fsm) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_448_p2))))) then 
            mt_ce0 <= ap_const_logic_1;
        else 
            mt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- mt_ce1 assign process. --
    mt_ce1_assign_proc : process(ap_CS_fsm, exitcond_fu_448_p2)
    begin
        if (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_448_p2)) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_448_p2))))) then 
            mt_ce1 <= ap_const_logic_1;
        else 
            mt_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- mt_d0 assign process. --
    mt_d0_assign_proc : process(ap_CS_fsm, tmp_i_cast_fu_350_p1, tmp_45_fu_518_p2, tmp_36_fu_553_p2)
    begin
        if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then 
            mt_d0 <= tmp_36_fu_553_p2;
        elsif ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            mt_d0 <= tmp_45_fu_518_p2;
        elsif ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            mt_d0 <= tmp_i_cast_fu_350_p1;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            mt_d0 <= ap_const_lv64_1571;
        else 
            mt_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mt_d1 <= (tmp1_fu_435_p2 xor tmp_31_cast_fu_424_p1);

    -- mt_we0 assign process. --
    mt_we0_assign_proc : process(ap_start, ap_CS_fsm, tmp_fu_276_p2, tmp_reg_802, tmp_s_fu_282_p2)
    begin
        if (((ap_ST_st10_fsm_9 = ap_CS_fsm) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)) and not((tmp_fu_276_p2 = ap_const_lv1_0)) and not((tmp_s_fu_282_p2 = ap_const_lv1_0))) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or ((ap_ST_st18_fsm_17 = ap_CS_fsm) and not((tmp_reg_802 = ap_const_lv1_0))))) then 
            mt_we0 <= ap_const_logic_1;
        else 
            mt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- mt_we1 assign process. --
    mt_we1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm))) then 
            mt_we1 <= ap_const_logic_1;
        else 
            mt_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- mti_o assign process. --
    mti_o_assign_proc : process(ap_CS_fsm, mti_i, tmp_s_reg_806, tmp_1_i_cast_fu_288_p1, exitcond_fu_448_p2, tmp_48_fu_560_p2)
    begin
        if ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            mti_o <= tmp_48_fu_560_p2;
        elsif (((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_448_p2)))) then 
            mti_o <= ap_const_lv32_0;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_reg_806 = ap_const_lv1_0)))) then 
            mti_o <= tmp_1_i_cast_fu_288_p1;
        else 
            mti_o <= mti_i;
        end if; 
    end process;


    -- mti_o_ap_vld assign process. --
    mti_o_ap_vld_assign_proc : process(ap_CS_fsm, tmp_s_reg_806, exitcond_fu_448_p2)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_s_reg_806 = ap_const_lv1_0))) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_448_p2))))) then 
            mti_o_ap_vld <= ap_const_logic_1;
        else 
            mti_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_435_p2 <= (mt_q1 xor mag01_load_phi_cast_cast_fu_428_p3);
    tmp2_fu_512_p2 <= (mt_q1 xor mag01_load_2_phi_cast_cast_fu_505_p3);
    tmp3_fu_547_p2 <= (mt_q1 xor mag01_load_1_phi_cast_cast_fu_540_p3);
    tmp_1_i_cast_fu_288_p1 <= std_logic_vector(resize(unsigned(tmp_1_i_reg_204),32));
    tmp_24_fu_376_p1 <= std_logic_vector(resize(unsigned(kk_reg_216),64));
    tmp_26_fu_370_p2 <= std_logic_vector(unsigned(kk_reg_216) + unsigned(ap_const_lv8_1));
    tmp_27_fu_381_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_370_p2),64));
    tmp_29_fu_394_p2 <= std_logic_vector(unsigned(kk_cast7_reg_838) + unsigned(ap_const_lv10_18D));
    tmp_2_i_fu_354_p2 <= std_logic_vector(unsigned(tmp_1_i_reg_204) + unsigned(ap_const_lv10_1));
    tmp_30_fu_399_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_394_p2),64));
    tmp_31_cast_fu_424_p1 <= std_logic_vector(resize(unsigned(tmp_31_fu_418_p3),64));
    tmp_31_fu_418_p3 <= (tmp_46_reg_862 & tmp_37_reg_872);
    tmp_33_fu_529_p3 <= (tmp_57_reg_921 & reg_268);
    tmp_34_fu_315_p4 <= mt_q0(61 downto 30);
    tmp_35_fu_325_p1 <= mt_q0(32 - 1 downto 0);
    tmp_36_cast_fu_536_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_529_p3),64));
    tmp_36_fu_553_p2 <= (tmp3_fu_547_p2 xor tmp_36_cast_fu_536_p1);
    tmp_38_fu_454_p1 <= std_logic_vector(resize(unsigned(kk_1_reg_227),64));
    tmp_39_fu_465_p1 <= std_logic_vector(resize(unsigned(kk_2_fu_459_p2),64));
    tmp_3_i_fu_304_p2 <= std_logic_vector(unsigned(tmp_1_i_reg_204) + unsigned(ap_const_lv10_3FF));
    tmp_40_fu_329_p2 <= (tmp_34_fu_315_p4 xor tmp_35_fu_325_p1);
    tmp_41_fu_480_p2 <= std_logic_vector(unsigned(tmp_62_reg_901) + unsigned(ap_const_lv9_11D));
    tmp_43_fu_485_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_480_p2),64));
    tmp_44_fu_494_p3 <= (tmp_60_reg_906 & reg_268);
    tmp_45_cast_fu_501_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_494_p3),64));
    tmp_45_fu_518_p2 <= (tmp2_fu_512_p2 xor tmp_45_cast_fu_501_p1);
    tmp_48_fu_560_p2 <= std_logic_vector(unsigned(tmp_47_reg_238) + unsigned(ap_const_lv32_1));
    
    tmp_47_reg_238_temp <= signed(tmp_47_reg_238);
    tmp_49_fu_572_p1 <= std_logic_vector(resize(tmp_47_reg_238_temp,64));

    tmp_4_i_fu_310_p1 <= std_logic_vector(resize(unsigned(tmp_3_i_fu_304_p2),64));
    tmp_50_fu_577_p4 <= mt_q1(63 downto 11);
    tmp_51_fu_671_p19 <= (((((((((((((((((tmp_65_fu_597_p3 & ap_const_lv2_0) & tmp_58_fu_605_p4) & ap_const_lv1_0) & tmp_70_fu_615_p3) & ap_const_lv2_0) & tmp_71_fu_623_p3) & ap_const_lv1_0) & tmp_61_fu_631_p4) & ap_const_lv3_0) & tmp_72_fu_641_p3) & ap_const_lv1_0) & tmp_73_fu_649_p3) & ap_const_lv1_0) & tmp_64_fu_657_p4) & ap_const_lv1_0) & tmp_74_fu_667_p1) & ap_const_lv7_0);
    tmp_53_cast_fu_711_p1 <= std_logic_vector(resize(unsigned(tmp_51_fu_671_p19),64));
    tmp_53_fu_751_p7 <= (((((tmp_66_fu_721_p4 & ap_const_lv1_0) & tmp_67_fu_731_p4) & ap_const_lv3_0) & tmp_68_fu_741_p4) & ap_const_lv17_0);
    tmp_54_fu_587_p1 <= std_logic_vector(resize(unsigned(tmp_50_fu_577_p4),64));
    tmp_55_cast_fu_767_p1 <= std_logic_vector(resize(unsigned(tmp_53_fu_751_p7),64));
    tmp_55_fu_777_p4 <= y_3_fu_771_p2(63 downto 18);
    tmp_56_fu_414_p1 <= mt_q1(1 - 1 downto 0);
    tmp_58_fu_605_p4 <= y_1_fu_591_p2(21 downto 19);
    tmp_59_fu_525_p1 <= mt_q0(1 - 1 downto 0);
    tmp_61_fu_631_p4 <= y_1_fu_591_p2(12 downto 11);
    tmp_62_fu_470_p1 <= kk_1_reg_227(9 - 1 downto 0);
    tmp_63_fu_490_p1 <= mt_q0(1 - 1 downto 0);
    tmp_64_fu_657_p4 <= y_1_fu_591_p2(3 downto 2);
    tmp_65_fu_597_p3 <= y_1_fu_591_p2(24 downto 24);
    tmp_66_fu_721_p4 <= y_2_fu_715_p2(16 downto 14);
    tmp_67_fu_731_p4 <= y_2_fu_715_p2(12 downto 7);
    tmp_68_fu_741_p4 <= y_2_fu_715_p2(3 downto 2);
    tmp_69_fu_787_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_777_p4),64));
    tmp_70_fu_615_p3 <= y_1_fu_591_p2(17 downto 17);
    tmp_71_fu_623_p3 <= y_1_fu_591_p2(14 downto 14);
    tmp_72_fu_641_p3 <= y_1_fu_591_p2(7 downto 7);
    tmp_73_fu_649_p3 <= y_1_fu_591_p2(5 downto 5);
    tmp_74_fu_667_p1 <= y_1_fu_591_p2(1 - 1 downto 0);
    tmp_8_i_fu_345_p1 <= std_logic_vector(resize(unsigned(tmp_1_i_reg_204),64));
    tmp_9_i_cast_fu_340_p2 <= std_logic_vector(unsigned(grp_fu_335_p2) + unsigned(tmp_1_i_cast_reg_810));
    tmp_fu_276_p2 <= "1" when (signed(mti_i) > signed(ap_const_lv32_26F)) else "0";
    tmp_i_cast_fu_350_p1 <= std_logic_vector(resize(unsigned(tmp_9_i_cast_reg_828),64));
    tmp_s_fu_282_p2 <= "1" when (mti_i = ap_const_lv32_271) else "0";
    y_1_fu_591_p2 <= (tmp_54_fu_587_p1 xor mt_q1);
    y_2_fu_715_p2 <= (tmp_53_cast_fu_711_p1 xor y_1_fu_591_p2);
    y_3_fu_771_p2 <= (tmp_55_cast_fu_767_p1 xor y_2_fu_715_p2);
    y_4_fu_791_p2 <= (tmp_69_fu_787_p1 xor y_3_fu_771_p2);
end behav;
