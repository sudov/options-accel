-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity black_scholes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    interval_min : OUT STD_LOGIC_VECTOR (63 downto 0);
    interval_min_ap_vld : OUT STD_LOGIC;
    interval_max : OUT STD_LOGIC_VECTOR (63 downto 0);
    interval_max_ap_vld : OUT STD_LOGIC;
    S : IN STD_LOGIC_VECTOR (63 downto 0);
    E : IN STD_LOGIC_VECTOR (63 downto 0);
    r : IN STD_LOGIC_VECTOR (63 downto 0);
    sigma : IN STD_LOGIC_VECTOR (63 downto 0);
    T : IN STD_LOGIC_VECTOR (63 downto 0);
    M : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of black_scholes is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "black_scholes,hls_ip_2014_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (6 downto 0) := "0010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (6 downto 0) := "0010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (6 downto 0) := "0010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (6 downto 0) := "0010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (6 downto 0) := "0011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (6 downto 0) := "0011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (6 downto 0) := "0011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (6 downto 0) := "0011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (6 downto 0) := "0100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (6 downto 0) := "0100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (6 downto 0) := "0100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (6 downto 0) := "0100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (6 downto 0) := "0100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (6 downto 0) := "0101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (6 downto 0) := "0101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (6 downto 0) := "0101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (6 downto 0) := "0101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (6 downto 0) := "0101101";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (6 downto 0) := "0101110";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (6 downto 0) := "0101111";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (6 downto 0) := "0110001";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (6 downto 0) := "0110101";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (6 downto 0) := "0110110";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (6 downto 0) := "0111001";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (6 downto 0) := "0111010";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (6 downto 0) := "0111011";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (6 downto 0) := "0111101";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (6 downto 0) := "0111110";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (6 downto 0) := "1000011";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (6 downto 0) := "1000100";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (6 downto 0) := "1000111";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv64_3FFF5C28F5C28F5C : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111111010111000010100011110101110000101000111101011100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal grp_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_reg_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal args_mean_reg_178 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_ap_done : STD_LOGIC;
    signal args_stdv_reg_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_117_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_189 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_130_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_81_reg_194 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_122_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal conf_width_reg_199 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_ap_start : STD_LOGIC;
    signal grp_black_scholes_black_scholes_iterate_fu_89_ap_idle : STD_LOGIC;
    signal grp_black_scholes_black_scholes_iterate_fu_89_ap_ready : STD_LOGIC;
    signal grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_107_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_112_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_107_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_107_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_112_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_117_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_122_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_126_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_107_ce : STD_LOGIC;
    signal grp_fu_112_ce : STD_LOGIC;
    signal grp_fu_117_ce : STD_LOGIC;
    signal grp_fu_122_ce : STD_LOGIC;
    signal grp_fu_126_ce : STD_LOGIC;
    signal grp_fu_130_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_130_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component black_scholes_black_scholes_iterate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        the_args_S_read : IN STD_LOGIC_VECTOR (63 downto 0);
        the_args_E_read : IN STD_LOGIC_VECTOR (63 downto 0);
        the_args_r_read : IN STD_LOGIC_VECTOR (63 downto 0);
        the_args_sigma_read : IN STD_LOGIC_VECTOR (63 downto 0);
        the_args_T_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component black_scholes_dsub_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component black_scholes_dadd_64ns_64ns_64_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component black_scholes_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component black_scholes_ddiv_64ns_64ns_64_31 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component black_scholes_sitodp_32ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component black_scholes_dsqrt_64ns_64ns_64_31 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_black_scholes_black_scholes_iterate_fu_89 : component black_scholes_black_scholes_iterate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_black_scholes_black_scholes_iterate_fu_89_ap_start,
        ap_done => grp_black_scholes_black_scholes_iterate_fu_89_ap_done,
        ap_idle => grp_black_scholes_black_scholes_iterate_fu_89_ap_idle,
        ap_ready => grp_black_scholes_black_scholes_iterate_fu_89_ap_ready,
        the_args_S_read => grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read,
        the_args_E_read => grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read,
        the_args_r_read => grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read,
        the_args_sigma_read => grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read,
        the_args_T_read => grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read,
        ap_return_0 => grp_black_scholes_black_scholes_iterate_fu_89_ap_return_0,
        ap_return_1 => grp_black_scholes_black_scholes_iterate_fu_89_ap_return_1);

    black_scholes_dsub_64ns_64ns_64_5_full_dsp_U28 : component black_scholes_dsub_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 28,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_107_p0,
        din1 => grp_fu_107_p1,
        ce => grp_fu_107_ce,
        dout => grp_fu_107_p2);

    black_scholes_dadd_64ns_64ns_64_5_full_dsp_U29 : component black_scholes_dadd_64ns_64ns_64_5_full_dsp
    generic map (
        ID => 29,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_112_p0,
        din1 => grp_fu_112_p1,
        ce => grp_fu_112_ce,
        dout => grp_fu_112_p2);

    black_scholes_dmul_64ns_64ns_64_6_max_dsp_U30 : component black_scholes_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 30,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_117_p0,
        din1 => grp_fu_117_p1,
        ce => grp_fu_117_ce,
        dout => grp_fu_117_p2);

    black_scholes_ddiv_64ns_64ns_64_31_U31 : component black_scholes_ddiv_64ns_64ns_64_31
    generic map (
        ID => 31,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_122_p0,
        din1 => grp_fu_122_p1,
        ce => grp_fu_122_ce,
        dout => grp_fu_122_p2);

    black_scholes_sitodp_32ns_64_6_U32 : component black_scholes_sitodp_32ns_64_6
    generic map (
        ID => 32,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_126_p0,
        ce => grp_fu_126_ce,
        dout => grp_fu_126_p1);

    black_scholes_dsqrt_64ns_64ns_64_31_U33 : component black_scholes_dsqrt_64ns_64ns_64_31
    generic map (
        ID => 33,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_130_p0,
        din1 => grp_fu_130_p1,
        ce => grp_fu_130_ce,
        dout => grp_fu_130_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg assign process. --
    grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st30_fsm_29 = ap_CS_fsm)) then 
                    grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_black_scholes_black_scholes_iterate_fu_89_ap_ready)) then 
                    grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st31_fsm_30 = ap_CS_fsm) and not((ap_const_logic_0 = grp_black_scholes_black_scholes_iterate_fu_89_ap_done)))) then
                args_mean_reg_178 <= grp_black_scholes_black_scholes_iterate_fu_89_ap_return_0;
                args_stdv_reg_184 <= grp_black_scholes_black_scholes_iterate_fu_89_ap_return_1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st68_fsm_67 = ap_CS_fsm)) then
                conf_width_reg_199 <= grp_fu_122_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                tmp_80_reg_148 <= grp_fu_126_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st37_fsm_36 = ap_CS_fsm)) then
                tmp_81_reg_194 <= grp_fu_130_p2;
                tmp_s_reg_189 <= grp_fu_117_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_black_scholes_black_scholes_iterate_fu_89_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                if (not((ap_const_logic_0 = grp_black_scholes_black_scholes_iterate_fu_89_ap_done))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st31_fsm_30;
                end if;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st73_fsm_72 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st73_fsm_72 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_black_scholes_black_scholes_iterate_fu_89_ap_start <= grp_black_scholes_black_scholes_iterate_fu_89_ap_start_ap_start_reg;
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_E_read <= E;
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_S_read <= S;
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_T_read <= T;
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_r_read <= r;
    grp_black_scholes_black_scholes_iterate_fu_89_the_args_sigma_read <= sigma;
    grp_fu_107_ce <= ap_const_logic_1;
    grp_fu_107_p0 <= args_mean_reg_178;
    grp_fu_107_p1 <= conf_width_reg_199;
    grp_fu_112_ce <= ap_const_logic_1;
    grp_fu_112_p0 <= args_mean_reg_178;
    grp_fu_112_p1 <= conf_width_reg_199;
    grp_fu_117_ce <= ap_const_logic_1;
    grp_fu_117_p0 <= args_stdv_reg_184;
    grp_fu_117_p1 <= ap_const_lv64_3FFF5C28F5C28F5C;
    grp_fu_122_ce <= ap_const_logic_1;
    grp_fu_122_p0 <= tmp_s_reg_189;
    grp_fu_122_p1 <= tmp_81_reg_194;
    grp_fu_126_ce <= ap_const_logic_1;
    grp_fu_126_p0 <= M;

    -- grp_fu_130_ce assign process. --
    grp_fu_130_ce_assign_proc : process(ap_CS_fsm, grp_black_scholes_black_scholes_iterate_fu_89_ap_done)
    begin
        if (((ap_ST_st30_fsm_29 = ap_CS_fsm) or ((ap_ST_st31_fsm_30 = ap_CS_fsm) and not((ap_const_logic_0 = grp_black_scholes_black_scholes_iterate_fu_89_ap_done))) or (ap_ST_st37_fsm_36 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st13_fsm_12 = ap_CS_fsm) or (ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st17_fsm_16 = ap_CS_fsm) or (ap_ST_st18_fsm_17 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st21_fsm_20 = ap_CS_fsm) or (ap_ST_st22_fsm_21 = ap_CS_fsm) or (ap_ST_st23_fsm_22 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st26_fsm_25 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st29_fsm_28 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st35_fsm_34 = ap_CS_fsm) or (ap_ST_st36_fsm_35 = ap_CS_fsm))) then 
            grp_fu_130_ce <= ap_const_logic_1;
        else 
            grp_fu_130_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_130_p0 <= ap_const_lv64_0;
    grp_fu_130_p1 <= tmp_80_reg_148;
    interval_max <= grp_fu_112_p2;

    -- interval_max_ap_vld assign process. --
    interval_max_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st73_fsm_72 = ap_CS_fsm)) then 
            interval_max_ap_vld <= ap_const_logic_1;
        else 
            interval_max_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    interval_min <= grp_fu_107_p2;

    -- interval_min_ap_vld assign process. --
    interval_min_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st73_fsm_72 = ap_CS_fsm)) then 
            interval_min_ap_vld <= ap_const_logic_1;
        else 
            interval_min_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
