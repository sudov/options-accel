// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.2
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2013_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.724000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1,HLS_SYN_LUT=2}" *)

module dut (
        ap_clk,
        ap_rst,
        in_fifo_V_dout,
        in_fifo_V_empty_n,
        in_fifo_V_read,
        out_fifo_V_din,
        out_fifo_V_full_n,
        out_fifo_V_write
);

input   ap_clk;
input   ap_rst;
input  [31:0] in_fifo_V_dout;
input   in_fifo_V_empty_n;
output   in_fifo_V_read;
output  [31:0] out_fifo_V_din;
input   out_fifo_V_full_n;
output   out_fifo_V_write;

reg in_fifo_V_read;
reg out_fifo_V_write;
reg   [0:0] ap_CS_fsm = 1'b0;
reg    ap_sig_bdd_22;
reg   [0:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b0;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// in_fifo_V_read assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_22)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_22)) begin
        in_fifo_V_read = ap_const_logic_1;
    end else begin
        in_fifo_V_read = ap_const_logic_0;
    end
end

/// out_fifo_V_write assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_22)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~ap_sig_bdd_22)) begin
        out_fifo_V_write = ap_const_logic_1;
    end else begin
        out_fifo_V_write = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or ap_sig_bdd_22)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_22 assign process. ///
always @ (in_fifo_V_empty_n or out_fifo_V_full_n)
begin
    ap_sig_bdd_22 = ((in_fifo_V_empty_n == ap_const_logic_0) | (out_fifo_V_full_n == ap_const_logic_0));
end
assign out_fifo_V_din = in_fifo_V_dout;


endmodule //dut

