-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gaussrand2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gaussrand_state_V1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    gaussrand_state_V1_ap_vld : OUT STD_LOGIC;
    gaussrand_state_V2_i : IN STD_LOGIC_VECTOR (63 downto 0);
    gaussrand_state_V2_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    gaussrand_state_V2_o_ap_vld : OUT STD_LOGIC;
    gaussrand_state_S_i : IN STD_LOGIC_VECTOR (63 downto 0);
    gaussrand_state_S_o : OUT STD_LOGIC_VECTOR (63 downto 0);
    gaussrand_state_S_o_ap_vld : OUT STD_LOGIC;
    gaussrand_state_phase_i : IN STD_LOGIC_VECTOR (31 downto 0);
    gaussrand_state_phase_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    gaussrand_state_phase_o_ap_vld : OUT STD_LOGIC;
    gaussrand_state_V2_o_ap_lwr : OUT STD_LOGIC;
    gaussrand_state_S_o_ap_lwr : OUT STD_LOGIC;
    gaussrand_state_phase_o_ap_lwr : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of gaussrand2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gaussrand2,hls_ip_2014_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=8.621000,HLS_SYN_LAT=80,HLS_SYN_TPT=12,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_pp0_stg4_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg5_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_pp0_stg6_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_pp0_stg7_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_pp0_stg8_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_pp0_stg9_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_ST_pp0_stg10_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_ST_pp0_stg11_fsm_11 : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_BFEAA449A0000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111101010101001000100100110100000000000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_C000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal tmp_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_174_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_174_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_174_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_174_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_174_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_174_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal S_reg_178 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_reg_178_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_reg_178_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal V2_reg_189 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_V2_reg_189_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_V2_reg_189_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_V2_reg_189_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_V2_reg_189_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_V2_reg_189_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_199 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_209 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal X_reg_229 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal grp_gaussrand2_rand_uint32_fu_119_ap_start : STD_LOGIC;
    signal grp_gaussrand2_rand_uint32_fu_119_ap_done : STD_LOGIC;
    signal grp_gaussrand2_rand_uint32_fu_119_ap_idle : STD_LOGIC;
    signal grp_gaussrand2_rand_uint32_fu_119_ap_ready : STD_LOGIC;
    signal grp_gaussrand2_rand_uint32_fu_119_ap_ce : STD_LOGIC;
    signal ap_reg_phiprechg_X2_reg_107pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_phiprechg_X2_reg_107pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal X2_phi_fu_111_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_gaussrand2_rand_uint32_fu_119_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_135_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_139_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_157_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_135_ce : STD_LOGIC;
    signal grp_fu_139_ce : STD_LOGIC;
    signal grp_fu_142_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_142_ce : STD_LOGIC;
    signal grp_fu_147_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_ce : STD_LOGIC;
    signal grp_fu_152_ce : STD_LOGIC;
    signal grp_fu_157_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component gaussrand2_rand_uint32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component gaussrand2_fptrunc_64ns_32_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussrand2_fpext_32ns_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gaussrand2_fsqrt_32ns_32ns_32_12 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussrand2_flog_32ns_32ns_32_13_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussrand2_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gaussrand2_ddiv_64ns_64ns_64_31 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_gaussrand2_rand_uint32_fu_119 : component gaussrand2_rand_uint32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gaussrand2_rand_uint32_fu_119_ap_start,
        ap_done => grp_gaussrand2_rand_uint32_fu_119_ap_done,
        ap_idle => grp_gaussrand2_rand_uint32_fu_119_ap_idle,
        ap_ready => grp_gaussrand2_rand_uint32_fu_119_ap_ready,
        ap_ce => grp_gaussrand2_rand_uint32_fu_119_ap_ce);

    gaussrand2_fptrunc_64ns_32_3_U2 : component gaussrand2_fptrunc_64ns_32_3
    generic map (
        ID => 2,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_135_p0,
        ce => grp_fu_135_ce,
        dout => grp_fu_135_p1);

    gaussrand2_fpext_32ns_64_3_U3 : component gaussrand2_fpext_32ns_64_3
    generic map (
        ID => 3,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_139_p0,
        ce => grp_fu_139_ce,
        dout => grp_fu_139_p1);

    gaussrand2_fsqrt_32ns_32ns_32_12_U4 : component gaussrand2_fsqrt_32ns_32ns_32_12
    generic map (
        ID => 4,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_142_p0,
        din1 => grp_fu_142_p1,
        ce => grp_fu_142_ce,
        dout => grp_fu_142_p2);

    gaussrand2_flog_32ns_32ns_32_13_full_dsp_U5 : component gaussrand2_flog_32ns_32ns_32_13_full_dsp
    generic map (
        ID => 5,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_147_p0,
        din1 => grp_fu_147_p1,
        ce => grp_fu_147_ce,
        dout => grp_fu_147_p2);

    gaussrand2_dmul_64ns_64ns_64_6_max_dsp_U6 : component gaussrand2_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 6,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_152_p0,
        din1 => grp_fu_152_p1,
        ce => grp_fu_152_ce,
        dout => grp_fu_152_p2);

    gaussrand2_ddiv_64ns_64ns_64_31_U7 : component gaussrand2_ddiv_64ns_64ns_64_31
    generic map (
        ID => 7,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_157_p0,
        din1 => grp_fu_157_p1,
        ce => grp_fu_157_ce,
        dout => grp_fu_157_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg8_fsm_8 = ap_CS_fsm) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                elsif ((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- grp_gaussrand2_rand_uint32_fu_119_ap_start_ap_start_reg assign process. --
    grp_gaussrand2_rand_uint32_fu_119_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gaussrand2_rand_uint32_fu_119_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((tmp_fu_161_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and not((tmp_reg_174 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg6_fsm_6 = ap_CS_fsm) and not((tmp_reg_174 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((tmp_reg_174 = ap_const_lv1_0)) and (ap_ST_pp0_stg9_fsm_9 = ap_CS_fsm)))) then 
                    grp_gaussrand2_rand_uint32_fu_119_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_gaussrand2_rand_uint32_fu_119_ap_ready)) then 
                    grp_gaussrand2_rand_uint32_fu_119_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_X2_reg_107pp0_it6 assign process. --
    ap_reg_phiprechg_X2_reg_107pp0_it6_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_ST_pp0_stg7_fsm_7 = ap_CS_fsm) and not((ap_reg_ppstg_tmp_reg_174_pp0_it6 = ap_const_lv1_0)))) then 
                ap_reg_phiprechg_X2_reg_107pp0_it6(0) <= '0';
                ap_reg_phiprechg_X2_reg_107pp0_it6(29) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(31) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(32) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(35) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(38) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(42) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(45) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(47) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(49) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(51) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(53) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(54) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(55) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(56) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(57) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(58) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(59) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(60) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(61) <= '1';
                ap_reg_phiprechg_X2_reg_107pp0_it6(63) <= '1';
            elsif (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
                ap_reg_phiprechg_X2_reg_107pp0_it6(0) <= ap_reg_phiprechg_X2_reg_107pp0_it5(0);
                ap_reg_phiprechg_X2_reg_107pp0_it6(29) <= ap_reg_phiprechg_X2_reg_107pp0_it5(29);
                ap_reg_phiprechg_X2_reg_107pp0_it6(31) <= ap_reg_phiprechg_X2_reg_107pp0_it5(31);
                ap_reg_phiprechg_X2_reg_107pp0_it6(32) <= ap_reg_phiprechg_X2_reg_107pp0_it5(32);
                ap_reg_phiprechg_X2_reg_107pp0_it6(35) <= ap_reg_phiprechg_X2_reg_107pp0_it5(35);
                ap_reg_phiprechg_X2_reg_107pp0_it6(38) <= ap_reg_phiprechg_X2_reg_107pp0_it5(38);
                ap_reg_phiprechg_X2_reg_107pp0_it6(42) <= ap_reg_phiprechg_X2_reg_107pp0_it5(42);
                ap_reg_phiprechg_X2_reg_107pp0_it6(45) <= ap_reg_phiprechg_X2_reg_107pp0_it5(45);
                ap_reg_phiprechg_X2_reg_107pp0_it6(47) <= ap_reg_phiprechg_X2_reg_107pp0_it5(47);
                ap_reg_phiprechg_X2_reg_107pp0_it6(49) <= ap_reg_phiprechg_X2_reg_107pp0_it5(49);
                ap_reg_phiprechg_X2_reg_107pp0_it6(51) <= ap_reg_phiprechg_X2_reg_107pp0_it5(51);
                ap_reg_phiprechg_X2_reg_107pp0_it6(53) <= ap_reg_phiprechg_X2_reg_107pp0_it5(53);
                ap_reg_phiprechg_X2_reg_107pp0_it6(54) <= ap_reg_phiprechg_X2_reg_107pp0_it5(54);
                ap_reg_phiprechg_X2_reg_107pp0_it6(55) <= ap_reg_phiprechg_X2_reg_107pp0_it5(55);
                ap_reg_phiprechg_X2_reg_107pp0_it6(56) <= ap_reg_phiprechg_X2_reg_107pp0_it5(56);
                ap_reg_phiprechg_X2_reg_107pp0_it6(57) <= ap_reg_phiprechg_X2_reg_107pp0_it5(57);
                ap_reg_phiprechg_X2_reg_107pp0_it6(58) <= ap_reg_phiprechg_X2_reg_107pp0_it5(58);
                ap_reg_phiprechg_X2_reg_107pp0_it6(59) <= ap_reg_phiprechg_X2_reg_107pp0_it5(59);
                ap_reg_phiprechg_X2_reg_107pp0_it6(60) <= ap_reg_phiprechg_X2_reg_107pp0_it5(60);
                ap_reg_phiprechg_X2_reg_107pp0_it6(61) <= ap_reg_phiprechg_X2_reg_107pp0_it5(61);
                ap_reg_phiprechg_X2_reg_107pp0_it6(63) <= ap_reg_phiprechg_X2_reg_107pp0_it5(63);
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (tmp_fu_161_p2 = ap_const_lv1_0))) then
                S_reg_178 <= gaussrand_state_S_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (tmp_reg_174 = ap_const_lv1_0))) then
                V2_reg_189 <= gaussrand_state_V2_i;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_ST_pp0_stg7_fsm_7 = ap_CS_fsm) and (ap_reg_ppstg_tmp_reg_174_pp0_it6 = ap_const_lv1_0))) then
                X_reg_229 <= grp_fu_152_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                ap_reg_ppstg_S_reg_178_pp0_it1 <= S_reg_178;
                ap_reg_ppstg_S_reg_178_pp0_it2 <= ap_reg_ppstg_S_reg_178_pp0_it1;
                ap_reg_ppstg_tmp_reg_174_pp0_it1 <= tmp_reg_174;
                ap_reg_ppstg_tmp_reg_174_pp0_it2 <= ap_reg_ppstg_tmp_reg_174_pp0_it1;
                ap_reg_ppstg_tmp_reg_174_pp0_it3 <= ap_reg_ppstg_tmp_reg_174_pp0_it2;
                ap_reg_ppstg_tmp_reg_174_pp0_it4 <= ap_reg_ppstg_tmp_reg_174_pp0_it3;
                ap_reg_ppstg_tmp_reg_174_pp0_it5 <= ap_reg_ppstg_tmp_reg_174_pp0_it4;
                ap_reg_ppstg_tmp_reg_174_pp0_it6 <= ap_reg_ppstg_tmp_reg_174_pp0_it5;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm)) then
                ap_reg_ppstg_V2_reg_189_pp0_it1 <= V2_reg_189;
                ap_reg_ppstg_V2_reg_189_pp0_it2 <= ap_reg_ppstg_V2_reg_189_pp0_it1;
                ap_reg_ppstg_V2_reg_189_pp0_it3 <= ap_reg_ppstg_V2_reg_189_pp0_it2;
                ap_reg_ppstg_V2_reg_189_pp0_it4 <= ap_reg_ppstg_V2_reg_189_pp0_it3;
                ap_reg_ppstg_V2_reg_189_pp0_it5 <= ap_reg_ppstg_V2_reg_189_pp0_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and (ap_reg_ppstg_tmp_reg_174_pp0_it6 = ap_const_lv1_0))) then
                tmp_1_reg_224 <= grp_fu_139_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_reg_ppstg_tmp_reg_174_pp0_it1 = ap_const_lv1_0))) then
                tmp_4_reg_194 <= grp_fu_147_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_reg_ppstg_tmp_reg_174_pp0_it1 = ap_const_lv1_0) and (ap_ST_pp0_stg6_fsm_6 = ap_CS_fsm))) then
                tmp_5_reg_199 <= grp_fu_139_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_reg_ppstg_tmp_reg_174_pp0_it1 = ap_const_lv1_0))) then
                tmp_6_reg_204 <= grp_fu_152_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_ST_pp0_stg7_fsm_7 = ap_CS_fsm) and (ap_reg_ppstg_tmp_reg_174_pp0_it4 = ap_const_lv1_0))) then
                tmp_7_reg_209 <= grp_fu_157_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_reg_ppstg_tmp_reg_174_pp0_it4 = ap_const_lv1_0) and (ap_ST_pp0_stg10_fsm_10 = ap_CS_fsm))) then
                tmp_8_reg_214 <= grp_fu_135_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_ST_pp0_stg10_fsm_10 = ap_CS_fsm) and (ap_reg_ppstg_tmp_reg_174_pp0_it5 = ap_const_lv1_0))) then
                tmp_9_reg_219 <= grp_fu_142_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_reg_174 <= tmp_fu_161_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and (tmp_reg_174 = ap_const_lv1_0))) then
                tmp_s_reg_184 <= grp_fu_135_p1;
            end if;
        end if;
    end process;
    ap_reg_phiprechg_X2_reg_107pp0_it6(28 downto 1) <= "0000000000000000000000000000";
    ap_reg_phiprechg_X2_reg_107pp0_it6(30 downto 30) <= "0";
    ap_reg_phiprechg_X2_reg_107pp0_it6(34 downto 33) <= "00";
    ap_reg_phiprechg_X2_reg_107pp0_it6(37 downto 36) <= "00";
    ap_reg_phiprechg_X2_reg_107pp0_it6(41 downto 39) <= "000";
    ap_reg_phiprechg_X2_reg_107pp0_it6(44 downto 43) <= "00";
    ap_reg_phiprechg_X2_reg_107pp0_it6(46 downto 46) <= "0";
    ap_reg_phiprechg_X2_reg_107pp0_it6(48 downto 48) <= "0";
    ap_reg_phiprechg_X2_reg_107pp0_it6(50 downto 50) <= "0";
    ap_reg_phiprechg_X2_reg_107pp0_it6(52 downto 52) <= "0";
    ap_reg_phiprechg_X2_reg_107pp0_it6(62) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
            when ap_ST_pp0_stg2_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
            when ap_ST_pp0_stg3_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
            when ap_ST_pp0_stg4_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg5_fsm_5;
            when ap_ST_pp0_stg5_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg6_fsm_6;
            when ap_ST_pp0_stg6_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg7_fsm_7;
            when ap_ST_pp0_stg7_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg8_fsm_8;
            when ap_ST_pp0_stg8_fsm_8 => 
                if (not((ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg9_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg9_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp0_stg10_fsm_10;
            when ap_ST_pp0_stg10_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp0_stg11_fsm_11;
            when ap_ST_pp0_stg11_fsm_11 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- X2_phi_fu_111_p4 assign process. --
    X2_phi_fu_111_p4_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_tmp_reg_174_pp0_it6, X_reg_229, ap_reg_phiprechg_X2_reg_107pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_reg_ppstg_tmp_reg_174_pp0_it6 = ap_const_lv1_0) and (ap_ST_pp0_stg8_fsm_8 = ap_CS_fsm))) then 
            X2_phi_fu_111_p4 <= X_reg_229;
        else 
            X2_phi_fu_111_p4 <= ap_reg_phiprechg_X2_reg_107pp0_it6;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_ST_pp0_stg8_fsm_8 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_phiprechg_X2_reg_107pp0_it5 <= ap_const_lv64_1;

    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;

    ap_return <= X2_phi_fu_111_p4;

    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    -- gaussrand_state_S_o assign process. --
    gaussrand_state_S_o_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, gaussrand_state_S_i, tmp_reg_174)
    begin
        if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((tmp_reg_174 = ap_const_lv1_0)))) then 
            gaussrand_state_S_o <= ap_const_lv64_3FE0000000000000;
        else 
            gaussrand_state_S_o <= gaussrand_state_S_i;
        end if; 
    end process;


    -- gaussrand_state_S_o_ap_lwr assign process. --
    gaussrand_state_S_o_ap_lwr_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            gaussrand_state_S_o_ap_lwr <= ap_const_logic_1;
        else 
            gaussrand_state_S_o_ap_lwr <= ap_const_logic_0;
        end if; 
    end process;


    -- gaussrand_state_S_o_ap_vld assign process. --
    gaussrand_state_S_o_ap_vld_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, tmp_reg_174)
    begin
        if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((tmp_reg_174 = ap_const_lv1_0)))) then 
            gaussrand_state_S_o_ap_vld <= ap_const_logic_1;
        else 
            gaussrand_state_S_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    gaussrand_state_V1 <= ap_const_lv64_BFE0000000000000;

    -- gaussrand_state_V1_ap_vld assign process. --
    gaussrand_state_V1_ap_vld_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_tmp_reg_174_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_ST_pp0_stg8_fsm_8 = ap_CS_fsm) and not((ap_reg_ppstg_tmp_reg_174_pp0_it6 = ap_const_lv1_0)))) then 
            gaussrand_state_V1_ap_vld <= ap_const_logic_1;
        else 
            gaussrand_state_V1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- gaussrand_state_V2_o assign process. --
    gaussrand_state_V2_o_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, gaussrand_state_V2_i, tmp_reg_174)
    begin
        if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((tmp_reg_174 = ap_const_lv1_0)))) then 
            gaussrand_state_V2_o <= ap_const_lv64_3FE0000000000000;
        else 
            gaussrand_state_V2_o <= gaussrand_state_V2_i;
        end if; 
    end process;


    -- gaussrand_state_V2_o_ap_lwr assign process. --
    gaussrand_state_V2_o_ap_lwr_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            gaussrand_state_V2_o_ap_lwr <= ap_const_logic_1;
        else 
            gaussrand_state_V2_o_ap_lwr <= ap_const_logic_0;
        end if; 
    end process;


    -- gaussrand_state_V2_o_ap_vld assign process. --
    gaussrand_state_V2_o_ap_vld_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, tmp_reg_174)
    begin
        if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((tmp_reg_174 = ap_const_lv1_0)))) then 
            gaussrand_state_V2_o_ap_vld <= ap_const_logic_1;
        else 
            gaussrand_state_V2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    gaussrand_state_phase_o <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(gaussrand_state_phase_i));

    -- gaussrand_state_phase_o_ap_lwr assign process. --
    gaussrand_state_phase_o_ap_lwr_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            gaussrand_state_phase_o_ap_lwr <= ap_const_logic_1;
        else 
            gaussrand_state_phase_o_ap_lwr <= ap_const_logic_0;
        end if; 
    end process;


    -- gaussrand_state_phase_o_ap_vld assign process. --
    gaussrand_state_phase_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            gaussrand_state_phase_o_ap_vld <= ap_const_logic_1;
        else 
            gaussrand_state_phase_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_135_ce <= ap_const_logic_1;

    -- grp_fu_135_p0 assign process. --
    grp_fu_135_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it4, gaussrand_state_S_i, tmp_7_reg_209)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it4) and (ap_ST_pp0_stg8_fsm_8 = ap_CS_fsm))) then 
            grp_fu_135_p0 <= tmp_7_reg_209;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            grp_fu_135_p0 <= gaussrand_state_S_i;
        else 
            grp_fu_135_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_139_ce <= ap_const_logic_1;

    -- grp_fu_139_p0 assign process. --
    grp_fu_139_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, tmp_4_reg_194, tmp_9_reg_219)
    begin
        if (((ap_ST_pp0_stg11_fsm_11 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) then 
            grp_fu_139_p0 <= tmp_9_reg_219;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg4_fsm_4 = ap_CS_fsm))) then 
            grp_fu_139_p0 <= tmp_4_reg_194;
        else 
            grp_fu_139_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_142_ce <= ap_const_logic_1;
    grp_fu_142_p0 <= ap_const_lv32_0;
    grp_fu_142_p1 <= tmp_8_reg_214;
    grp_fu_147_ce <= ap_const_logic_1;
    grp_fu_147_p0 <= ap_const_lv32_0;
    grp_fu_147_p1 <= tmp_s_reg_184;
    grp_fu_152_ce <= ap_const_logic_1;

    -- grp_fu_152_p0 assign process. --
    grp_fu_152_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_V2_reg_189_pp0_it5, tmp_5_reg_199)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_152_p0 <= ap_reg_ppstg_V2_reg_189_pp0_it5;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg7_fsm_7 = ap_CS_fsm))) then 
            grp_fu_152_p0 <= tmp_5_reg_199;
        else 
            grp_fu_152_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_152_p1 assign process. --
    grp_fu_152_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it6, tmp_1_reg_224)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_152_p1 <= tmp_1_reg_224;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_ST_pp0_stg7_fsm_7 = ap_CS_fsm))) then 
            grp_fu_152_p1 <= ap_const_lv64_C000000000000000;
        else 
            grp_fu_152_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_157_ce <= ap_const_logic_1;
    grp_fu_157_p0 <= tmp_6_reg_204;
    grp_fu_157_p1 <= ap_reg_ppstg_S_reg_178_pp0_it2;
    grp_gaussrand2_rand_uint32_fu_119_ap_ce <= ap_const_logic_1;
    grp_gaussrand2_rand_uint32_fu_119_ap_start <= grp_gaussrand2_rand_uint32_fu_119_ap_start_ap_start_reg;
    tmp_fu_161_p2 <= "1" when (gaussrand_state_phase_i = ap_const_lv32_0) else "0";
end behav;
