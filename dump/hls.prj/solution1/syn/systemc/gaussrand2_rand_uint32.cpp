// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "gaussrand2_rand_uint32.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gaussrand2_rand_uint32::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gaussrand2_rand_uint32::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> gaussrand2_rand_uint32::ap_ST_pp0_stg0_fsm_0 = "0";
const sc_lv<16> gaussrand2_rand_uint32::ap_const_lv16_1 = "1";
const sc_lv<16> gaussrand2_rand_uint32::ap_const_lv16_26F = "1001101111";
const sc_lv<16> gaussrand2_rand_uint32::ap_const_lv16_FD91 = "1111110110010001";
const sc_lv<32> gaussrand2_rand_uint32::ap_const_lv32_1 = "1";
const sc_lv<32> gaussrand2_rand_uint32::ap_const_lv32_1E = "11110";
const sc_lv<32> gaussrand2_rand_uint32::ap_const_lv32_1F = "11111";
const sc_lv<64> gaussrand2_rand_uint32::ap_const_lv64_9908B0DF = "10011001000010001011000011011111";
const sc_lv<64> gaussrand2_rand_uint32::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";

gaussrand2_rand_uint32::gaussrand2_rand_uint32(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mt_kk_U = new gaussrand2_rand_uint32_mt_kk("mt_kk_U");
    mt_kk_U->clk(ap_clk);
    mt_kk_U->reset(ap_rst);
    mt_kk_U->address0(mt_kk_address0);
    mt_kk_U->ce0(mt_kk_ce0);
    mt_kk_U->q0(mt_kk_q0);
    mt_kk_U->address1(mt_kk_address1);
    mt_kk_U->ce1(mt_kk_ce1);
    mt_kk_U->we1(mt_kk_we1);
    mt_kk_U->d1(mt_kk_d1);
    mt_kkp1_U = new gaussrand2_rand_uint32_mt_kk("mt_kkp1_U");
    mt_kkp1_U->clk(ap_clk);
    mt_kkp1_U->reset(ap_rst);
    mt_kkp1_U->address0(mt_kkp1_address0);
    mt_kkp1_U->ce0(mt_kkp1_ce0);
    mt_kkp1_U->q0(mt_kkp1_q0);
    mt_kkp1_U->address1(mt_kkp1_address1);
    mt_kkp1_U->ce1(mt_kkp1_ce1);
    mt_kkp1_U->we1(mt_kkp1_we1);
    mt_kkp1_U->d1(mt_kkp1_d1);
    mt_kkpm_U = new gaussrand2_rand_uint32_mt_kk("mt_kkpm_U");
    mt_kkpm_U->clk(ap_clk);
    mt_kkpm_U->reset(ap_rst);
    mt_kkpm_U->address0(mt_kkpm_address0);
    mt_kkpm_U->ce0(mt_kkpm_ce0);
    mt_kkpm_U->q0(mt_kkpm_q0);
    mt_kkpm_U->address1(mt_kkpm_address1);
    mt_kkpm_U->ce1(mt_kkpm_ce1);
    mt_kkpm_U->we1(mt_kkpm_we1);
    mt_kkpm_U->d1(mt_kkpm_d1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_1_fu_177_p3);
    sensitive << ( a_assign_fu_159_p2 );
    sensitive << ( tmp_i_fu_165_p2 );
    sensitive << ( tmp_1_i_fu_171_p2 );

    SC_METHOD(thread_a_assign_2_fu_95_p2);
    sensitive << ( kk_p1 );

    SC_METHOD(thread_a_assign_3_fu_113_p3);
    sensitive << ( a_assign_2_fu_95_p2 );
    sensitive << ( tmp_i1_fu_101_p2 );
    sensitive << ( tmp_2_i_fu_107_p2 );

    SC_METHOD(thread_a_assign_4_fu_191_p2);
    sensitive << ( kk_pm );

    SC_METHOD(thread_a_assign_5_fu_209_p3);
    sensitive << ( a_assign_4_fu_191_p2 );
    sensitive << ( tmp_i3_fu_197_p2 );
    sensitive << ( tmp_3_i_fu_203_p2 );

    SC_METHOD(thread_a_assign_fu_159_p2);
    sensitive << ( kk );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reg_ppiten_pp0_it0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_sig_pprstidle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_ap_sig_pprststart_0);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );

    SC_METHOD(thread_mag01_cast_cast_fu_231_p3);
    sensitive << ( tmp_3_reg_276 );

    SC_METHOD(thread_mt_kk_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_fu_131_p1 );

    SC_METHOD(thread_mt_kk_address1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( mt_kk_addr_reg_270 );

    SC_METHOD(thread_mt_kk_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_mt_kk_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_mt_kk_d1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( mt_kk_new_fu_255_p2 );

    SC_METHOD(thread_mt_kk_new_fu_255_p2);
    sensitive << ( tmp1_fu_249_p2 );
    sensitive << ( tmp_cast_fu_245_p1 );

    SC_METHOD(thread_mt_kk_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_mt_kkp1_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( tmp_5_fu_90_p1 );

    SC_METHOD(thread_mt_kkp1_address1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1 );

    SC_METHOD(thread_mt_kkp1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_mt_kkp1_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_mt_kkp1_d1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( mt_kk_new_fu_255_p2 );

    SC_METHOD(thread_mt_kkp1_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_mt_kkpm_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( tmp_9_fu_144_p1 );

    SC_METHOD(thread_mt_kkpm_address1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( mt_kkpm_addr_reg_281 );

    SC_METHOD(thread_mt_kkpm_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_mt_kkpm_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_mt_kkpm_d1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( mt_kk_new_fu_255_p2 );

    SC_METHOD(thread_mt_kkpm_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it2 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_tmp1_fu_249_p2);
    sensitive << ( mt_kkpm_q0 );
    sensitive << ( mag01_cast_cast_fu_231_p3 );

    SC_METHOD(thread_tmp_1_fu_223_p3);
    sensitive << ( mt_kk_q0 );

    SC_METHOD(thread_tmp_1_i_fu_171_p2);
    sensitive << ( kk );

    SC_METHOD(thread_tmp_2_i_fu_107_p2);
    sensitive << ( kk_p1 );

    SC_METHOD(thread_tmp_3_fu_136_p1);
    sensitive << ( mt_kkp1_q0 );

    SC_METHOD(thread_tmp_3_i_fu_203_p2);
    sensitive << ( kk_pm );

    SC_METHOD(thread_tmp_5_fu_90_p1);
    sensitive << ( kk_p1 );

    SC_METHOD(thread_tmp_9_fu_144_p1);
    sensitive << ( kk_pm );

    SC_METHOD(thread_tmp_cast_fu_245_p1);
    sensitive << ( tmp_s_fu_238_p3 );

    SC_METHOD(thread_tmp_fu_131_p1);
    sensitive << ( kk );

    SC_METHOD(thread_tmp_i1_fu_101_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_ce );
    sensitive << ( a_assign_2_fu_95_p2 );

    SC_METHOD(thread_tmp_i3_fu_197_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_ce );
    sensitive << ( a_assign_4_fu_191_p2 );

    SC_METHOD(thread_tmp_i_fu_165_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_reg_ppiten_pp0_it1 );
    sensitive << ( ap_ce );
    sensitive << ( a_assign_fu_159_p2 );

    SC_METHOD(thread_tmp_s_fu_238_p3);
    sensitive << ( tmp_2_reg_287 );
    sensitive << ( tmp_1_fu_223_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_reg_ppiten_pp0_it0 );
    sensitive << ( ap_ce );
    sensitive << ( ap_sig_pprstidle_pp0 );
    sensitive << ( ap_sig_pprststart_0 );

    ap_CS_fsm = "0";
    ap_reg_ppiten_pp0_it1 = SC_LOGIC_0;
    ap_reg_ppiten_pp0_it2 = SC_LOGIC_0;
    kk = "0000000000000000";
    kk_p1 = "0000000000000001";
    kk_pm = "0000000110001101";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gaussrand2_rand_uint32_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it0, "ap_reg_ppiten_pp0_it0");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it1, "ap_reg_ppiten_pp0_it1");
    sc_trace(mVcdFile, ap_reg_ppiten_pp0_it2, "ap_reg_ppiten_pp0_it2");
    sc_trace(mVcdFile, kk, "kk");
    sc_trace(mVcdFile, mt_kk_address0, "mt_kk_address0");
    sc_trace(mVcdFile, mt_kk_ce0, "mt_kk_ce0");
    sc_trace(mVcdFile, mt_kk_q0, "mt_kk_q0");
    sc_trace(mVcdFile, mt_kk_address1, "mt_kk_address1");
    sc_trace(mVcdFile, mt_kk_ce1, "mt_kk_ce1");
    sc_trace(mVcdFile, mt_kk_we1, "mt_kk_we1");
    sc_trace(mVcdFile, mt_kk_d1, "mt_kk_d1");
    sc_trace(mVcdFile, kk_p1, "kk_p1");
    sc_trace(mVcdFile, mt_kkp1_address0, "mt_kkp1_address0");
    sc_trace(mVcdFile, mt_kkp1_ce0, "mt_kkp1_ce0");
    sc_trace(mVcdFile, mt_kkp1_q0, "mt_kkp1_q0");
    sc_trace(mVcdFile, mt_kkp1_address1, "mt_kkp1_address1");
    sc_trace(mVcdFile, mt_kkp1_ce1, "mt_kkp1_ce1");
    sc_trace(mVcdFile, mt_kkp1_we1, "mt_kkp1_we1");
    sc_trace(mVcdFile, mt_kkp1_d1, "mt_kkp1_d1");
    sc_trace(mVcdFile, kk_pm, "kk_pm");
    sc_trace(mVcdFile, mt_kkpm_address0, "mt_kkpm_address0");
    sc_trace(mVcdFile, mt_kkpm_ce0, "mt_kkpm_ce0");
    sc_trace(mVcdFile, mt_kkpm_q0, "mt_kkpm_q0");
    sc_trace(mVcdFile, mt_kkpm_address1, "mt_kkpm_address1");
    sc_trace(mVcdFile, mt_kkpm_ce1, "mt_kkpm_ce1");
    sc_trace(mVcdFile, mt_kkpm_we1, "mt_kkpm_we1");
    sc_trace(mVcdFile, mt_kkpm_d1, "mt_kkpm_d1");
    sc_trace(mVcdFile, mt_kkp1_addr_reg_264, "mt_kkp1_addr_reg_264");
    sc_trace(mVcdFile, ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1, "ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1");
    sc_trace(mVcdFile, mt_kk_addr_reg_270, "mt_kk_addr_reg_270");
    sc_trace(mVcdFile, tmp_3_fu_136_p1, "tmp_3_fu_136_p1");
    sc_trace(mVcdFile, tmp_3_reg_276, "tmp_3_reg_276");
    sc_trace(mVcdFile, mt_kkpm_addr_reg_281, "mt_kkpm_addr_reg_281");
    sc_trace(mVcdFile, tmp_2_reg_287, "tmp_2_reg_287");
    sc_trace(mVcdFile, tmp_5_fu_90_p1, "tmp_5_fu_90_p1");
    sc_trace(mVcdFile, tmp_fu_131_p1, "tmp_fu_131_p1");
    sc_trace(mVcdFile, tmp_9_fu_144_p1, "tmp_9_fu_144_p1");
    sc_trace(mVcdFile, a_assign_1_fu_177_p3, "a_assign_1_fu_177_p3");
    sc_trace(mVcdFile, a_assign_3_fu_113_p3, "a_assign_3_fu_113_p3");
    sc_trace(mVcdFile, a_assign_5_fu_209_p3, "a_assign_5_fu_209_p3");
    sc_trace(mVcdFile, mt_kk_new_fu_255_p2, "mt_kk_new_fu_255_p2");
    sc_trace(mVcdFile, a_assign_2_fu_95_p2, "a_assign_2_fu_95_p2");
    sc_trace(mVcdFile, tmp_i1_fu_101_p2, "tmp_i1_fu_101_p2");
    sc_trace(mVcdFile, tmp_2_i_fu_107_p2, "tmp_2_i_fu_107_p2");
    sc_trace(mVcdFile, a_assign_fu_159_p2, "a_assign_fu_159_p2");
    sc_trace(mVcdFile, tmp_i_fu_165_p2, "tmp_i_fu_165_p2");
    sc_trace(mVcdFile, tmp_1_i_fu_171_p2, "tmp_1_i_fu_171_p2");
    sc_trace(mVcdFile, a_assign_4_fu_191_p2, "a_assign_4_fu_191_p2");
    sc_trace(mVcdFile, tmp_i3_fu_197_p2, "tmp_i3_fu_197_p2");
    sc_trace(mVcdFile, tmp_3_i_fu_203_p2, "tmp_3_i_fu_203_p2");
    sc_trace(mVcdFile, tmp_1_fu_223_p3, "tmp_1_fu_223_p3");
    sc_trace(mVcdFile, tmp_s_fu_238_p3, "tmp_s_fu_238_p3");
    sc_trace(mVcdFile, mag01_cast_cast_fu_231_p3, "mag01_cast_cast_fu_231_p3");
    sc_trace(mVcdFile, tmp1_fu_249_p2, "tmp1_fu_249_p2");
    sc_trace(mVcdFile, tmp_cast_fu_245_p1, "tmp_cast_fu_245_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_pprstidle_pp0, "ap_sig_pprstidle_pp0");
    sc_trace(mVcdFile, ap_sig_pprststart_0, "ap_sig_pprststart_0");
#endif

    }
}

gaussrand2_rand_uint32::~gaussrand2_rand_uint32() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete mt_kk_U;
    delete mt_kkp1_U;
    delete mt_kkpm_U;
}

void gaussrand2_rand_uint32::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_pp0_stg0_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it1 = ap_reg_ppiten_pp0_it0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ppiten_pp0_it2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
            ap_reg_ppiten_pp0_it2 = ap_reg_ppiten_pp0_it1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1 = mt_kkp1_addr_reg_264.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        kk = a_assign_1_fu_177_p3.read();
        kk_pm = a_assign_5_fu_209_p3.read();
        mt_kk_addr_reg_270 =  (sc_lv<10>) (tmp_fu_131_p1.read());
        mt_kkpm_addr_reg_281 =  (sc_lv<10>) (tmp_9_fu_144_p1.read());
        tmp_2_reg_287 = mt_kkp1_q0.read().range(30, 1);
        tmp_3_reg_276 = tmp_3_fu_136_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        kk_p1 = a_assign_3_fu_113_p3.read();
        mt_kkp1_addr_reg_264 =  (sc_lv<10>) (tmp_5_fu_90_p1.read());
    }
}

void gaussrand2_rand_uint32::thread_a_assign_1_fu_177_p3() {
    a_assign_1_fu_177_p3 = (!tmp_i_fu_165_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_i_fu_165_p2.read()[0].to_bool())? tmp_1_i_fu_171_p2.read(): a_assign_fu_159_p2.read());
}

void gaussrand2_rand_uint32::thread_a_assign_2_fu_95_p2() {
    a_assign_2_fu_95_p2 = (!kk_p1.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_bigint<16>(kk_p1.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void gaussrand2_rand_uint32::thread_a_assign_3_fu_113_p3() {
    a_assign_3_fu_113_p3 = (!tmp_i1_fu_101_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_i1_fu_101_p2.read()[0].to_bool())? tmp_2_i_fu_107_p2.read(): a_assign_2_fu_95_p2.read());
}

void gaussrand2_rand_uint32::thread_a_assign_4_fu_191_p2() {
    a_assign_4_fu_191_p2 = (!kk_pm.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_bigint<16>(kk_pm.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void gaussrand2_rand_uint32::thread_a_assign_5_fu_209_p3() {
    a_assign_5_fu_209_p3 = (!tmp_i3_fu_197_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_i3_fu_197_p2.read()[0].to_bool())? tmp_3_i_fu_203_p2.read(): a_assign_4_fu_191_p2.read());
}

void gaussrand2_rand_uint32::thread_a_assign_fu_159_p2() {
    a_assign_fu_159_p2 = (!kk.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_bigint<16>(kk.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void gaussrand2_rand_uint32::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read())) || 
         (esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it2.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_ap_reg_ppiten_pp0_it0() {
    ap_reg_ppiten_pp0_it0 = ap_start.read();
}

void gaussrand2_rand_uint32::thread_ap_sig_pprstidle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()))) {
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    } else {
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_ap_sig_pprststart_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ppiten_pp0_it1.read()))) {
        ap_sig_pprststart_0 = ap_const_logic_1;
    } else {
        ap_sig_pprststart_0 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mag01_cast_cast_fu_231_p3() {
    mag01_cast_cast_fu_231_p3 = (!tmp_3_reg_276.read()[0].is_01())? sc_lv<64>(): ((tmp_3_reg_276.read()[0].to_bool())? ap_const_lv64_9908B0DF: ap_const_lv64_0);
}

void gaussrand2_rand_uint32::thread_mt_kk_address0() {
    mt_kk_address0 =  (sc_lv<10>) (tmp_fu_131_p1.read());
}

void gaussrand2_rand_uint32::thread_mt_kk_address1() {
    mt_kk_address1 = mt_kk_addr_reg_270.read();
}

void gaussrand2_rand_uint32::thread_mt_kk_ce0() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        mt_kk_ce0 = ap_const_logic_1;
    } else {
        mt_kk_ce0 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mt_kk_ce1() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        mt_kk_ce1 = ap_const_logic_1;
    } else {
        mt_kk_ce1 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mt_kk_d1() {
    mt_kk_d1 = mt_kk_new_fu_255_p2.read();
}

void gaussrand2_rand_uint32::thread_mt_kk_new_fu_255_p2() {
    mt_kk_new_fu_255_p2 = (tmp1_fu_249_p2.read() ^ tmp_cast_fu_245_p1.read());
}

void gaussrand2_rand_uint32::thread_mt_kk_we1() {
    if (((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
        mt_kk_we1 = ap_const_logic_1;
    } else {
        mt_kk_we1 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mt_kkp1_address0() {
    mt_kkp1_address0 =  (sc_lv<10>) (tmp_5_fu_90_p1.read());
}

void gaussrand2_rand_uint32::thread_mt_kkp1_address1() {
    mt_kkp1_address1 = ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1.read();
}

void gaussrand2_rand_uint32::thread_mt_kkp1_ce0() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        mt_kkp1_ce0 = ap_const_logic_1;
    } else {
        mt_kkp1_ce0 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mt_kkp1_ce1() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        mt_kkp1_ce1 = ap_const_logic_1;
    } else {
        mt_kkp1_ce1 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mt_kkp1_d1() {
    mt_kkp1_d1 = mt_kk_new_fu_255_p2.read();
}

void gaussrand2_rand_uint32::thread_mt_kkp1_we1() {
    if (((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
        mt_kkp1_we1 = ap_const_logic_1;
    } else {
        mt_kkp1_we1 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mt_kkpm_address0() {
    mt_kkpm_address0 =  (sc_lv<10>) (tmp_9_fu_144_p1.read());
}

void gaussrand2_rand_uint32::thread_mt_kkpm_address1() {
    mt_kkpm_address1 = mt_kkpm_addr_reg_281.read();
}

void gaussrand2_rand_uint32::thread_mt_kkpm_ce0() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        mt_kkpm_ce0 = ap_const_logic_1;
    } else {
        mt_kkpm_ce0 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mt_kkpm_ce1() {
    if ((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        mt_kkpm_ce1 = ap_const_logic_1;
    } else {
        mt_kkpm_ce1 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_mt_kkpm_d1() {
    mt_kkpm_d1 = mt_kk_new_fu_255_p2.read();
}

void gaussrand2_rand_uint32::thread_mt_kkpm_we1() {
    if (((esl_seteq<1,1,1>(ap_ST_pp0_stg0_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ppiten_pp0_it0.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
        mt_kkpm_we1 = ap_const_logic_1;
    } else {
        mt_kkpm_we1 = ap_const_logic_0;
    }
}

void gaussrand2_rand_uint32::thread_tmp1_fu_249_p2() {
    tmp1_fu_249_p2 = (mag01_cast_cast_fu_231_p3.read() ^ mt_kkpm_q0.read());
}

void gaussrand2_rand_uint32::thread_tmp_1_fu_223_p3() {
    tmp_1_fu_223_p3 = mt_kk_q0.read().range(31, 31);
}

void gaussrand2_rand_uint32::thread_tmp_1_i_fu_171_p2() {
    tmp_1_i_fu_171_p2 = (!kk.read().is_01() || !ap_const_lv16_FD91.is_01())? sc_lv<16>(): (sc_bigint<16>(kk.read()) + sc_biguint<16>(ap_const_lv16_FD91));
}

void gaussrand2_rand_uint32::thread_tmp_2_i_fu_107_p2() {
    tmp_2_i_fu_107_p2 = (!kk_p1.read().is_01() || !ap_const_lv16_FD91.is_01())? sc_lv<16>(): (sc_bigint<16>(kk_p1.read()) + sc_biguint<16>(ap_const_lv16_FD91));
}

void gaussrand2_rand_uint32::thread_tmp_3_fu_136_p1() {
    tmp_3_fu_136_p1 = mt_kkp1_q0.read().range(1-1, 0);
}

void gaussrand2_rand_uint32::thread_tmp_3_i_fu_203_p2() {
    tmp_3_i_fu_203_p2 = (!kk_pm.read().is_01() || !ap_const_lv16_FD91.is_01())? sc_lv<16>(): (sc_bigint<16>(kk_pm.read()) + sc_biguint<16>(ap_const_lv16_FD91));
}

void gaussrand2_rand_uint32::thread_tmp_5_fu_90_p1() {
    tmp_5_fu_90_p1 = esl_zext<64,16>(kk_p1.read());
}

void gaussrand2_rand_uint32::thread_tmp_9_fu_144_p1() {
    tmp_9_fu_144_p1 = esl_zext<64,16>(kk_pm.read());
}

void gaussrand2_rand_uint32::thread_tmp_cast_fu_245_p1() {
    tmp_cast_fu_245_p1 = esl_zext<64,31>(tmp_s_fu_238_p3.read());
}

void gaussrand2_rand_uint32::thread_tmp_fu_131_p1() {
    tmp_fu_131_p1 = esl_zext<64,16>(kk.read());
}

void gaussrand2_rand_uint32::thread_tmp_i1_fu_101_p2() {
    tmp_i1_fu_101_p2 = (!a_assign_2_fu_95_p2.read().is_01() || !ap_const_lv16_26F.is_01())? sc_lv<1>(): (sc_biguint<16>(a_assign_2_fu_95_p2.read()) > sc_biguint<16>(ap_const_lv16_26F));
}

void gaussrand2_rand_uint32::thread_tmp_i3_fu_197_p2() {
    tmp_i3_fu_197_p2 = (!a_assign_4_fu_191_p2.read().is_01() || !ap_const_lv16_26F.is_01())? sc_lv<1>(): (sc_biguint<16>(a_assign_4_fu_191_p2.read()) > sc_biguint<16>(ap_const_lv16_26F));
}

void gaussrand2_rand_uint32::thread_tmp_i_fu_165_p2() {
    tmp_i_fu_165_p2 = (!a_assign_fu_159_p2.read().is_01() || !ap_const_lv16_26F.is_01())? sc_lv<1>(): (sc_biguint<16>(a_assign_fu_159_p2.read()) > sc_biguint<16>(ap_const_lv16_26F));
}

void gaussrand2_rand_uint32::thread_tmp_s_fu_238_p3() {
    tmp_s_fu_238_p3 = esl_concat<1,30>(tmp_1_fu_223_p3.read(), tmp_2_reg_287.read());
}

void gaussrand2_rand_uint32::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

