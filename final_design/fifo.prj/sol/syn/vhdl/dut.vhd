-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_fifo_V_empty_n : IN STD_LOGIC;
    in_fifo_V_read : OUT STD_LOGIC;
    out_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_fifo_V_full_n : IN STD_LOGIC;
    out_fifo_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.789000,HLS_SYN_LAT=12,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal tmp_3_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal tmp_6_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal full_fu_66_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal full_reg_134 : STD_LOGIC_VECTOR (63 downto 0);
    signal full_1_fu_83_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal full_1_reg_139 : STD_LOGIC_VECTOR (63 downto 0);
    signal data1_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_fu_111_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal data2_reg_159 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_52_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_52_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_56_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal full_fu_66_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_124_temp: signed (32-1 downto 0);
    signal tmp_s_fu_72_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal full_1_fu_83_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal in_fifo_V_dout_temp: signed (32-1 downto 0);
    signal grp_fu_52_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_fu_97_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_52_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component dut_dmul_64ns_64ns_64_6_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dut_dmul_64ns_64ns_64_6_max_dsp_U1 : component dut_dmul_64ns_64ns_64_6_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_52_p0,
        din1 => grp_fu_52_p1,
        ce => grp_fu_52_ce,
        dout => grp_fu_52_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then
                data1_reg_154 <= ret_fu_97_p1(63 downto 32);
                data2_reg_159 <= data2_fu_111_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((in_fifo_V_empty_n = ap_const_logic_0)) and (ap_ST_st5_fsm_4 = ap_CS_fsm))) then
                full_1_reg_139 <= full_1_fu_83_p2;
                full_reg_134 <= full_fu_66_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((in_fifo_V_empty_n = ap_const_logic_0)))) then
                tmp_3_reg_119 <= in_fifo_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((in_fifo_V_empty_n = ap_const_logic_0)) and (ap_ST_st3_fsm_2 = ap_CS_fsm))) then
                tmp_6_reg_124 <= in_fifo_V_dout;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((in_fifo_V_empty_n = ap_const_logic_0)) and (ap_ST_st4_fsm_3 = ap_CS_fsm))) then
                tmp_7_reg_129 <= in_fifo_V_dout;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (in_fifo_V_empty_n, out_fifo_V_full_n, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((in_fifo_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((in_fifo_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((in_fifo_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((in_fifo_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((in_fifo_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                if (not((out_fifo_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not((out_fifo_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    data2_fu_111_p1 <= ret_fu_97_p1(16 - 1 downto 0);
    
    in_fifo_V_dout_temp <= signed(in_fifo_V_dout);
    full_1_fu_83_p1 <= std_logic_vector(resize(in_fifo_V_dout_temp,64));

    full_1_fu_83_p2 <= std_logic_vector(unsigned(tmp_s_fu_72_p3) + unsigned(full_1_fu_83_p1));
    
    tmp_6_reg_124_temp <= signed(tmp_6_reg_124);
    full_fu_66_p1 <= std_logic_vector(resize(tmp_6_reg_124_temp,64));

    full_fu_66_p2 <= std_logic_vector(unsigned(tmp_4_fu_56_p3) + unsigned(full_fu_66_p1));
    grp_fu_52_ce <= ap_const_logic_1;
    grp_fu_52_p0 <= full_reg_134;
    grp_fu_52_p1 <= full_1_reg_139;

    -- in_fifo_V_read assign process. --
    in_fifo_V_read_assign_proc : process(in_fifo_V_empty_n, ap_CS_fsm)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((in_fifo_V_empty_n = ap_const_logic_0))) or (not((in_fifo_V_empty_n = ap_const_logic_0)) and (ap_ST_st3_fsm_2 = ap_CS_fsm)) or (not((in_fifo_V_empty_n = ap_const_logic_0)) and (ap_ST_st4_fsm_3 = ap_CS_fsm)) or (not((in_fifo_V_empty_n = ap_const_logic_0)) and (ap_ST_st5_fsm_4 = ap_CS_fsm)) or (not((in_fifo_V_empty_n = ap_const_logic_0)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)))) then 
            in_fifo_V_read <= ap_const_logic_1;
        else 
            in_fifo_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- out_fifo_V_din assign process. --
    out_fifo_V_din_assign_proc : process(out_fifo_V_full_n, ap_CS_fsm, data1_reg_154, tmp_2_fu_115_p1)
    begin
        if (not((out_fifo_V_full_n = ap_const_logic_0))) then
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                out_fifo_V_din <= tmp_2_fu_115_p1;
            elsif ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                out_fifo_V_din <= data1_reg_154;
            else 
                out_fifo_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            out_fifo_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- out_fifo_V_write assign process. --
    out_fifo_V_write_assign_proc : process(out_fifo_V_full_n, ap_CS_fsm)
    begin
        if ((((ap_ST_st12_fsm_11 = ap_CS_fsm) and not((out_fifo_V_full_n = ap_const_logic_0))) or (not((out_fifo_V_full_n = ap_const_logic_0)) and (ap_ST_st13_fsm_12 = ap_CS_fsm)))) then 
            out_fifo_V_write <= ap_const_logic_1;
        else 
            out_fifo_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_fu_97_p1 <= grp_fu_52_p2;
    tmp_2_fu_115_p1 <= std_logic_vector(resize(unsigned(data2_reg_159),32));
    tmp_4_fu_56_p3 <= (tmp_3_reg_119 & ap_const_lv32_0);
    tmp_s_fu_72_p3 <= (tmp_7_reg_129 & ap_const_lv32_0);
end behav;
