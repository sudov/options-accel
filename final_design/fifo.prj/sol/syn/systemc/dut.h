// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _dut_HH_
#define _dut_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dut_dmul_64ns_64ns_64_6_max_dsp.h"

namespace ap_rtl {

struct dut : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > in_fifo_V_dout;
    sc_in< sc_logic > in_fifo_V_empty_n;
    sc_out< sc_logic > in_fifo_V_read;
    sc_out< sc_lv<32> > out_fifo_V_din;
    sc_in< sc_logic > out_fifo_V_full_n;
    sc_out< sc_logic > out_fifo_V_write;


    // Module declarations
    dut(sc_module_name name);
    SC_HAS_PROCESS(dut);

    ~dut();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    dut_dmul_64ns_64ns_64_6_max_dsp<1,6,64,64,64>* dut_dmul_64ns_64ns_64_6_max_dsp_U1;
    sc_signal< sc_lv<32> > tmp_3_reg_119;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_lv<32> > tmp_6_reg_124;
    sc_signal< sc_lv<32> > tmp_7_reg_129;
    sc_signal< sc_lv<64> > full_fu_66_p2;
    sc_signal< sc_lv<64> > full_reg_134;
    sc_signal< sc_lv<64> > full_1_fu_83_p2;
    sc_signal< sc_lv<64> > full_1_reg_139;
    sc_signal< sc_lv<32> > data1_reg_154;
    sc_signal< sc_lv<16> > data2_fu_111_p1;
    sc_signal< sc_lv<16> > data2_reg_159;
    sc_signal< sc_lv<32> > tmp_2_fu_115_p1;
    sc_signal< sc_lv<64> > grp_fu_52_p0;
    sc_signal< sc_lv<64> > grp_fu_52_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_56_p3;
    sc_signal< sc_lv<64> > full_fu_66_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_72_p3;
    sc_signal< sc_lv<64> > full_1_fu_83_p1;
    sc_signal< sc_lv<64> > grp_fu_52_p2;
    sc_signal< sc_lv<64> > ret_fu_97_p1;
    sc_signal< sc_logic > grp_fu_52_ce;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_st3_fsm_2;
    static const sc_lv<4> ap_ST_st4_fsm_3;
    static const sc_lv<4> ap_ST_st5_fsm_4;
    static const sc_lv<4> ap_ST_st6_fsm_5;
    static const sc_lv<4> ap_ST_st7_fsm_6;
    static const sc_lv<4> ap_ST_st8_fsm_7;
    static const sc_lv<4> ap_ST_st9_fsm_8;
    static const sc_lv<4> ap_ST_st10_fsm_9;
    static const sc_lv<4> ap_ST_st11_fsm_10;
    static const sc_lv<4> ap_ST_st12_fsm_11;
    static const sc_lv<4> ap_ST_st13_fsm_12;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_data2_fu_111_p1();
    void thread_full_1_fu_83_p1();
    void thread_full_1_fu_83_p2();
    void thread_full_fu_66_p1();
    void thread_full_fu_66_p2();
    void thread_grp_fu_52_ce();
    void thread_grp_fu_52_p0();
    void thread_grp_fu_52_p1();
    void thread_in_fifo_V_read();
    void thread_out_fifo_V_din();
    void thread_out_fifo_V_write();
    void thread_ret_fu_97_p1();
    void thread_tmp_2_fu_115_p1();
    void thread_tmp_4_fu_56_p3();
    void thread_tmp_s_fu_72_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
