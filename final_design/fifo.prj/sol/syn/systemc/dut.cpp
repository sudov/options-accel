// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "dut.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dut::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> dut::ap_ST_st1_fsm_0 = "0000";
const sc_lv<4> dut::ap_ST_st2_fsm_1 = "1";
const sc_lv<4> dut::ap_ST_st3_fsm_2 = "10";
const sc_lv<4> dut::ap_ST_st4_fsm_3 = "11";
const sc_lv<4> dut::ap_ST_st5_fsm_4 = "100";
const sc_lv<4> dut::ap_ST_st6_fsm_5 = "101";
const sc_lv<4> dut::ap_ST_st7_fsm_6 = "110";
const sc_lv<4> dut::ap_ST_st8_fsm_7 = "111";
const sc_lv<4> dut::ap_ST_st9_fsm_8 = "1000";
const sc_lv<4> dut::ap_ST_st10_fsm_9 = "1001";
const sc_lv<4> dut::ap_ST_st11_fsm_10 = "1010";
const sc_lv<4> dut::ap_ST_st12_fsm_11 = "1011";
const sc_lv<4> dut::ap_ST_st13_fsm_12 = "1100";
const sc_lv<32> dut::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dut::ap_const_lv32_20 = "100000";
const sc_lv<32> dut::ap_const_lv32_3F = "111111";

dut::dut(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dut_dmul_64ns_64ns_64_6_max_dsp_U1 = new dut_dmul_64ns_64ns_64_6_max_dsp<1,6,64,64,64>("dut_dmul_64ns_64ns_64_6_max_dsp_U1");
    dut_dmul_64ns_64ns_64_6_max_dsp_U1->clk(ap_clk);
    dut_dmul_64ns_64ns_64_6_max_dsp_U1->reset(ap_rst);
    dut_dmul_64ns_64ns_64_6_max_dsp_U1->din0(grp_fu_52_p0);
    dut_dmul_64ns_64ns_64_6_max_dsp_U1->din1(grp_fu_52_p1);
    dut_dmul_64ns_64ns_64_6_max_dsp_U1->ce(grp_fu_52_ce);
    dut_dmul_64ns_64ns_64_6_max_dsp_U1->dout(grp_fu_52_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_data2_fu_111_p1);
    sensitive << ( ret_fu_97_p1 );

    SC_METHOD(thread_full_1_fu_83_p1);
    sensitive << ( in_fifo_V_dout );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_full_1_fu_83_p2);
    sensitive << ( tmp_s_fu_72_p3 );
    sensitive << ( full_1_fu_83_p1 );

    SC_METHOD(thread_full_fu_66_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_6_reg_124 );

    SC_METHOD(thread_full_fu_66_p2);
    sensitive << ( tmp_4_fu_56_p3 );
    sensitive << ( full_fu_66_p1 );

    SC_METHOD(thread_grp_fu_52_ce);

    SC_METHOD(thread_grp_fu_52_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( full_reg_134 );

    SC_METHOD(thread_grp_fu_52_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( full_1_reg_139 );

    SC_METHOD(thread_in_fifo_V_read);
    sensitive << ( in_fifo_V_empty_n );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_out_fifo_V_din);
    sensitive << ( out_fifo_V_full_n );
    sensitive << ( ap_CS_fsm );
    sensitive << ( data1_reg_154 );
    sensitive << ( tmp_2_fu_115_p1 );

    SC_METHOD(thread_out_fifo_V_write);
    sensitive << ( out_fifo_V_full_n );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ret_fu_97_p1);
    sensitive << ( grp_fu_52_p2 );

    SC_METHOD(thread_tmp_2_fu_115_p1);
    sensitive << ( data2_reg_159 );

    SC_METHOD(thread_tmp_4_fu_56_p3);
    sensitive << ( tmp_3_reg_119 );

    SC_METHOD(thread_tmp_s_fu_72_p3);
    sensitive << ( tmp_7_reg_129 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( in_fifo_V_empty_n );
    sensitive << ( out_fifo_V_full_n );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, in_fifo_V_dout, "(port)in_fifo_V_dout");
    sc_trace(mVcdFile, in_fifo_V_empty_n, "(port)in_fifo_V_empty_n");
    sc_trace(mVcdFile, in_fifo_V_read, "(port)in_fifo_V_read");
    sc_trace(mVcdFile, out_fifo_V_din, "(port)out_fifo_V_din");
    sc_trace(mVcdFile, out_fifo_V_full_n, "(port)out_fifo_V_full_n");
    sc_trace(mVcdFile, out_fifo_V_write, "(port)out_fifo_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_3_reg_119, "tmp_3_reg_119");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, tmp_6_reg_124, "tmp_6_reg_124");
    sc_trace(mVcdFile, tmp_7_reg_129, "tmp_7_reg_129");
    sc_trace(mVcdFile, full_fu_66_p2, "full_fu_66_p2");
    sc_trace(mVcdFile, full_reg_134, "full_reg_134");
    sc_trace(mVcdFile, full_1_fu_83_p2, "full_1_fu_83_p2");
    sc_trace(mVcdFile, full_1_reg_139, "full_1_reg_139");
    sc_trace(mVcdFile, data1_reg_154, "data1_reg_154");
    sc_trace(mVcdFile, data2_fu_111_p1, "data2_fu_111_p1");
    sc_trace(mVcdFile, data2_reg_159, "data2_reg_159");
    sc_trace(mVcdFile, tmp_2_fu_115_p1, "tmp_2_fu_115_p1");
    sc_trace(mVcdFile, grp_fu_52_p0, "grp_fu_52_p0");
    sc_trace(mVcdFile, grp_fu_52_p1, "grp_fu_52_p1");
    sc_trace(mVcdFile, tmp_4_fu_56_p3, "tmp_4_fu_56_p3");
    sc_trace(mVcdFile, full_fu_66_p1, "full_fu_66_p1");
    sc_trace(mVcdFile, tmp_s_fu_72_p3, "tmp_s_fu_72_p3");
    sc_trace(mVcdFile, full_1_fu_83_p1, "full_1_fu_83_p1");
    sc_trace(mVcdFile, grp_fu_52_p2, "grp_fu_52_p2");
    sc_trace(mVcdFile, ret_fu_97_p1, "ret_fu_97_p1");
    sc_trace(mVcdFile, grp_fu_52_ce, "grp_fu_52_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dut.hdltvin.dat");
    mHdltvoutHandle.open("dut.hdltvout.dat");
}

dut::~dut() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dut_dmul_64ns_64ns_64_6_max_dsp_U1;
}

void dut::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,4,4>(ap_ST_st11_fsm_10, ap_CS_fsm.read())) {
        data1_reg_154 = ret_fu_97_p1.read().range(63, 32);
        data2_reg_159 = data2_fu_111_p1.read();
    }
    if ((!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0) && esl_seteq<1,4,4>(ap_ST_st5_fsm_4, ap_CS_fsm.read()))) {
        full_1_reg_139 = full_1_fu_83_p2.read();
        full_reg_134 = full_fu_66_p2.read();
    }
    if ((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0))) {
        tmp_3_reg_119 = in_fifo_V_dout.read();
    }
    if ((!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0) && esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read()))) {
        tmp_6_reg_124 = in_fifo_V_dout.read();
    }
    if ((!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0) && esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read()))) {
        tmp_7_reg_129 = in_fifo_V_dout.read();
    }
}

void dut::thread_data2_fu_111_p1() {
    data2_fu_111_p1 = ret_fu_97_p1.read().range(16-1, 0);
}

void dut::thread_full_1_fu_83_p1() {
    full_1_fu_83_p1 = esl_sext<64,32>(in_fifo_V_dout.read());
}

void dut::thread_full_1_fu_83_p2() {
    full_1_fu_83_p2 = (!tmp_s_fu_72_p3.read().is_01() || !full_1_fu_83_p1.read().is_01())? sc_lv<64>(): (sc_bigint<64>(tmp_s_fu_72_p3.read()) + sc_biguint<64>(full_1_fu_83_p1.read()));
}

void dut::thread_full_fu_66_p1() {
    full_fu_66_p1 = esl_sext<64,32>(tmp_6_reg_124.read());
}

void dut::thread_full_fu_66_p2() {
    full_fu_66_p2 = (!tmp_4_fu_56_p3.read().is_01() || !full_fu_66_p1.read().is_01())? sc_lv<64>(): (sc_bigint<64>(tmp_4_fu_56_p3.read()) + sc_biguint<64>(full_fu_66_p1.read()));
}

void dut::thread_grp_fu_52_ce() {
    grp_fu_52_ce = ap_const_logic_1;
}

void dut::thread_grp_fu_52_p0() {
    grp_fu_52_p0 = full_reg_134.read();
}

void dut::thread_grp_fu_52_p1() {
    grp_fu_52_p1 = full_1_reg_139.read();
}

void dut::thread_in_fifo_V_read() {
    if (((esl_seteq<1,4,4>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0)) || 
         (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0) && 
          esl_seteq<1,4,4>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0) && 
          esl_seteq<1,4,4>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0) && 
          esl_seteq<1,4,4>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) || 
         (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0) && 
          esl_seteq<1,4,4>(ap_ST_st1_fsm_0, ap_CS_fsm.read())))) {
        in_fifo_V_read = ap_const_logic_1;
    } else {
        in_fifo_V_read = ap_const_logic_0;
    }
}

void dut::thread_out_fifo_V_din() {
    if (!esl_seteq<1,1,1>(out_fifo_V_full_n.read(), ap_const_logic_0)) {
        if (esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read())) {
            out_fifo_V_din = tmp_2_fu_115_p1.read();
        } else if (esl_seteq<1,4,4>(ap_ST_st12_fsm_11, ap_CS_fsm.read())) {
            out_fifo_V_din = data1_reg_154.read();
        } else {
            out_fifo_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        out_fifo_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dut::thread_out_fifo_V_write() {
    if (((esl_seteq<1,4,4>(ap_ST_st12_fsm_11, ap_CS_fsm.read()) && 
          !esl_seteq<1,1,1>(out_fifo_V_full_n.read(), ap_const_logic_0)) || 
         (!esl_seteq<1,1,1>(out_fifo_V_full_n.read(), ap_const_logic_0) && 
          esl_seteq<1,4,4>(ap_ST_st13_fsm_12, ap_CS_fsm.read())))) {
        out_fifo_V_write = ap_const_logic_1;
    } else {
        out_fifo_V_write = ap_const_logic_0;
    }
}

void dut::thread_ret_fu_97_p1() {
    ret_fu_97_p1 = grp_fu_52_p2.read();
}

void dut::thread_tmp_2_fu_115_p1() {
    tmp_2_fu_115_p1 = esl_zext<32,16>(data2_reg_159.read());
}

void dut::thread_tmp_4_fu_56_p3() {
    tmp_4_fu_56_p3 = esl_concat<32,32>(tmp_3_reg_119.read(), ap_const_lv32_0);
}

void dut::thread_tmp_s_fu_72_p3() {
    tmp_s_fu_72_p3 = esl_concat<32,32>(tmp_7_reg_129.read(), ap_const_lv32_0);
}

void dut::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 3 : 
            if (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
            break;
        case 7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
            break;
        case 9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
            break;
        case 11 : 
            if (!esl_seteq<1,1,1>(out_fifo_V_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            } else {
                ap_NS_fsm = ap_ST_st12_fsm_11;
            }
            break;
        case 12 : 
            if (!esl_seteq<1,1,1>(out_fifo_V_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st13_fsm_12;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void dut::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_fifo_V_dout\" :  \"" << in_fifo_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_fifo_V_empty_n\" :  \"" << in_fifo_V_empty_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_fifo_V_read\" :  \"" << in_fifo_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_fifo_V_din\" :  \"" << out_fifo_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_fifo_V_full_n\" :  \"" << out_fifo_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_fifo_V_write\" :  \"" << out_fifo_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

