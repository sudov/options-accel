// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "BlackScholes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic BlackScholes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic BlackScholes::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> BlackScholes::ap_ST_st1_fsm_0 = "00";
const sc_lv<2> BlackScholes::ap_ST_st2_fsm_1 = "1";
const sc_lv<2> BlackScholes::ap_ST_st3_fsm_2 = "10";

BlackScholes::BlackScholes(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_rand_uint32_fu_25 = new rand_uint32("grp_rand_uint32_fu_25");
    grp_rand_uint32_fu_25->ap_clk(ap_clk);
    grp_rand_uint32_fu_25->ap_rst(ap_rst);
    grp_rand_uint32_fu_25->ap_start(grp_rand_uint32_fu_25_ap_start);
    grp_rand_uint32_fu_25->ap_done(grp_rand_uint32_fu_25_ap_done);
    grp_rand_uint32_fu_25->ap_idle(grp_rand_uint32_fu_25_ap_idle);
    grp_rand_uint32_fu_25->ap_ready(grp_rand_uint32_fu_25_ap_ready);
    grp_rand_uint32_fu_25->ap_ce(grp_rand_uint32_fu_25_ap_ce);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_rand_uint32_fu_25_ap_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_rand_uint32_fu_25_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_ce );

    ap_CS_fsm = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "BlackScholes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, grp_rand_uint32_fu_25_ap_start, "grp_rand_uint32_fu_25_ap_start");
    sc_trace(mVcdFile, grp_rand_uint32_fu_25_ap_done, "grp_rand_uint32_fu_25_ap_done");
    sc_trace(mVcdFile, grp_rand_uint32_fu_25_ap_idle, "grp_rand_uint32_fu_25_ap_idle");
    sc_trace(mVcdFile, grp_rand_uint32_fu_25_ap_ready, "grp_rand_uint32_fu_25_ap_ready");
    sc_trace(mVcdFile, grp_rand_uint32_fu_25_ap_ce, "grp_rand_uint32_fu_25_ap_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

BlackScholes::~BlackScholes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_rand_uint32_fu_25;
}

void BlackScholes::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void BlackScholes::thread_ap_done() {
    if (((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read())) || 
         (esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void BlackScholes::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void BlackScholes::thread_ap_ready() {
    if ((esl_seteq<1,2,2>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void BlackScholes::thread_grp_rand_uint32_fu_25_ap_ce() {
    if (((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         !esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        grp_rand_uint32_fu_25_ap_ce = ap_const_logic_0;
    } else {
        grp_rand_uint32_fu_25_ap_ce = ap_const_logic_1;
    }
}

void BlackScholes::thread_grp_rand_uint32_fu_25_ap_start() {
    if ((esl_seteq<1,2,2>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        grp_rand_uint32_fu_25_ap_start = ap_const_logic_1;
    } else {
        grp_rand_uint32_fu_25_ap_start = ap_const_logic_0;
    }
}

void BlackScholes::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

