// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _rand_uint32_HH_
#define _rand_uint32_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "rand_uint32_mt_kk.h"

namespace ap_rtl {

struct rand_uint32 : public sc_module {
    // Port declarations 7
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    rand_uint32(sc_module_name name);
    SC_HAS_PROCESS(rand_uint32);

    ~rand_uint32();

    sc_trace_file* mVcdFile;

    rand_uint32_mt_kk* mt_kk_U;
    rand_uint32_mt_kk* mt_kkp1_U;
    rand_uint32_mt_kk* mt_kkpm_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it2;
    sc_signal< sc_lv<16> > kk;
    sc_signal< sc_lv<10> > mt_kk_address0;
    sc_signal< sc_logic > mt_kk_ce0;
    sc_signal< sc_lv<64> > mt_kk_q0;
    sc_signal< sc_lv<10> > mt_kk_address1;
    sc_signal< sc_logic > mt_kk_ce1;
    sc_signal< sc_logic > mt_kk_we1;
    sc_signal< sc_lv<64> > mt_kk_d1;
    sc_signal< sc_lv<16> > kk_p1;
    sc_signal< sc_lv<10> > mt_kkp1_address0;
    sc_signal< sc_logic > mt_kkp1_ce0;
    sc_signal< sc_lv<64> > mt_kkp1_q0;
    sc_signal< sc_lv<10> > mt_kkp1_address1;
    sc_signal< sc_logic > mt_kkp1_ce1;
    sc_signal< sc_logic > mt_kkp1_we1;
    sc_signal< sc_lv<64> > mt_kkp1_d1;
    sc_signal< sc_lv<16> > kk_pm;
    sc_signal< sc_lv<10> > mt_kkpm_address0;
    sc_signal< sc_logic > mt_kkpm_ce0;
    sc_signal< sc_lv<64> > mt_kkpm_q0;
    sc_signal< sc_lv<10> > mt_kkpm_address1;
    sc_signal< sc_logic > mt_kkpm_ce1;
    sc_signal< sc_logic > mt_kkpm_we1;
    sc_signal< sc_lv<64> > mt_kkpm_d1;
    sc_signal< sc_lv<10> > mt_kkp1_addr_reg_264;
    sc_signal< sc_lv<10> > ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1;
    sc_signal< sc_lv<10> > mt_kk_addr_reg_270;
    sc_signal< sc_lv<1> > tmp_3_fu_136_p1;
    sc_signal< sc_lv<1> > tmp_3_reg_276;
    sc_signal< sc_lv<10> > mt_kkpm_addr_reg_281;
    sc_signal< sc_lv<30> > tmp_2_reg_287;
    sc_signal< sc_lv<64> > tmp_5_fu_90_p1;
    sc_signal< sc_lv<64> > tmp_fu_131_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_144_p1;
    sc_signal< sc_lv<16> > a_assign_1_fu_177_p3;
    sc_signal< sc_lv<16> > a_assign_3_fu_113_p3;
    sc_signal< sc_lv<16> > a_assign_5_fu_209_p3;
    sc_signal< sc_lv<64> > mt_kk_new_fu_255_p2;
    sc_signal< sc_lv<16> > a_assign_2_fu_95_p2;
    sc_signal< sc_lv<1> > tmp_i1_fu_101_p2;
    sc_signal< sc_lv<16> > tmp_2_i_fu_107_p2;
    sc_signal< sc_lv<16> > a_assign_fu_159_p2;
    sc_signal< sc_lv<1> > tmp_i_fu_165_p2;
    sc_signal< sc_lv<16> > tmp_1_i_fu_171_p2;
    sc_signal< sc_lv<16> > a_assign_4_fu_191_p2;
    sc_signal< sc_lv<1> > tmp_i3_fu_197_p2;
    sc_signal< sc_lv<16> > tmp_3_i_fu_203_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_223_p3;
    sc_signal< sc_lv<31> > tmp_s_fu_238_p3;
    sc_signal< sc_lv<64> > mag01_cast_cast_fu_231_p3;
    sc_signal< sc_lv<64> > tmp1_fu_249_p2;
    sc_signal< sc_lv<64> > tmp_cast_fu_245_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_pprstidle_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_pp0_stg0_fsm_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<16> ap_const_lv16_18D;
    static const sc_lv<16> ap_const_lv16_26F;
    static const sc_lv<16> ap_const_lv16_FD91;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<64> ap_const_lv64_9908B0DF;
    static const sc_lv<64> ap_const_lv64_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_assign_1_fu_177_p3();
    void thread_a_assign_2_fu_95_p2();
    void thread_a_assign_3_fu_113_p3();
    void thread_a_assign_4_fu_191_p2();
    void thread_a_assign_5_fu_209_p3();
    void thread_a_assign_fu_159_p2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_ppiten_pp0_it0();
    void thread_ap_sig_pprstidle_pp0();
    void thread_mag01_cast_cast_fu_231_p3();
    void thread_mt_kk_address0();
    void thread_mt_kk_address1();
    void thread_mt_kk_ce0();
    void thread_mt_kk_ce1();
    void thread_mt_kk_d1();
    void thread_mt_kk_new_fu_255_p2();
    void thread_mt_kk_we1();
    void thread_mt_kkp1_address0();
    void thread_mt_kkp1_address1();
    void thread_mt_kkp1_ce0();
    void thread_mt_kkp1_ce1();
    void thread_mt_kkp1_d1();
    void thread_mt_kkp1_we1();
    void thread_mt_kkpm_address0();
    void thread_mt_kkpm_address1();
    void thread_mt_kkpm_ce0();
    void thread_mt_kkpm_ce1();
    void thread_mt_kkpm_d1();
    void thread_mt_kkpm_we1();
    void thread_tmp1_fu_249_p2();
    void thread_tmp_1_fu_223_p3();
    void thread_tmp_1_i_fu_171_p2();
    void thread_tmp_2_i_fu_107_p2();
    void thread_tmp_3_fu_136_p1();
    void thread_tmp_3_i_fu_203_p2();
    void thread_tmp_5_fu_90_p1();
    void thread_tmp_9_fu_144_p1();
    void thread_tmp_cast_fu_245_p1();
    void thread_tmp_fu_131_p1();
    void thread_tmp_i1_fu_101_p2();
    void thread_tmp_i3_fu_197_p2();
    void thread_tmp_i_fu_165_p2();
    void thread_tmp_s_fu_238_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
