-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BlackScholes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of BlackScholes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal grp_rand_uint32_fu_25_ap_start : STD_LOGIC;
    signal grp_rand_uint32_fu_25_ap_done : STD_LOGIC;
    signal grp_rand_uint32_fu_25_ap_idle : STD_LOGIC;
    signal grp_rand_uint32_fu_25_ap_ready : STD_LOGIC;
    signal grp_rand_uint32_fu_25_ap_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component rand_uint32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_rand_uint32_fu_25 : component rand_uint32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rand_uint32_fu_25_ap_start,
        ap_done => grp_rand_uint32_fu_25_ap_done,
        ap_idle => grp_rand_uint32_fu_25_ap_idle,
        ap_ready => grp_rand_uint32_fu_25_ap_ready,
        ap_ce => grp_rand_uint32_fu_25_ap_ce);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (((ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, ap_ce)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, ap_ce)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_rand_uint32_fu_25_ap_ce assign process. --
    grp_rand_uint32_fu_25_ap_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_ce)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce)))) then 
            grp_rand_uint32_fu_25_ap_ce <= ap_const_logic_0;
        else 
            grp_rand_uint32_fu_25_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_rand_uint32_fu_25_ap_start assign process. --
    grp_rand_uint32_fu_25_ap_start_assign_proc : process(ap_start, ap_CS_fsm, ap_ce)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce) and not((ap_start = ap_const_logic_0)))) then 
            grp_rand_uint32_fu_25_ap_start <= ap_const_logic_1;
        else 
            grp_rand_uint32_fu_25_ap_start <= ap_const_logic_0;
        end if; 
    end process;

end behav;
