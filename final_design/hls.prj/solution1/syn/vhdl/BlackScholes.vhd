-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BlackScholes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    CallPutFlag : IN STD_LOGIC_VECTOR (7 downto 0);
    S : IN STD_LOGIC_VECTOR (63 downto 0);
    X : IN STD_LOGIC_VECTOR (63 downto 0);
    T : IN STD_LOGIC_VECTOR (63 downto 0);
    r : IN STD_LOGIC_VECTOR (63 downto 0);
    b : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of BlackScholes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_BFFD23DD4EF278D0 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111111101001000111101110101001110111100100111100011010000";
    constant ap_const_lv64_3FD470BF3A92F8EC : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010100011100001011111100111010100100101111100011101100";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FFC80EF025F5E68 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111100100000001110111100000010010111110101111001101000";
    constant ap_const_lv64_BFD6D1F0E5A8325B : STD_LOGIC_VECTOR (63 downto 0) := "1011111111010110110100011111000011100101101010000011001001011011";
    constant ap_const_lv64_3FCDA6711871100E : STD_LOGIC_VECTOR (63 downto 0) := "0011111111001101101001100111000100011000011100010001000000001110";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FF548CDD6F42943 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110101010010001100110111010110111101000010100101000011";
    constant ap_const_lv64_3FD9884533D43651 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111011001100010000100010100110011110101000011011001010001";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_41CDCD6500000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000111001101110011010110010100000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_63 : STD_LOGIC_VECTOR (7 downto 0) := "01100011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "10";
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it40 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it41 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it42 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it43 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it44 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it45 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it46 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it47 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it48 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it49 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it50 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it51 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it52 : STD_LOGIC := '0';
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_238 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_194_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it40 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it41 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_read_reg_445 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it13 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it25 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it27 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it28 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it29 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it30 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it31 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it32 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it33 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it34 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it35 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it36 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it37 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_r_read_reg_445_pp0_it38 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_neg_fu_257_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_neg_reg_451 : STD_LOGIC_VECTOR (63 downto 0);
    signal T_read_reg_456 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it13 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it25 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it27 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it28 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it29 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it30 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it31 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it32 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it33 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it34 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it35 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it36 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it37 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it38 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_T_read_reg_456_pp0_it39 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_rand_uint32_fu_143_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_read_reg_473 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_b_read_reg_473_pp0_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal X_read_reg_478 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it13 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it25 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it27 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it28 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it29 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it30 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it31 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it32 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it33 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it34 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it35 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it36 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it37 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it38 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it39 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it40 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it41 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it42 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it43 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it44 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it45 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it46 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_X_read_reg_478_pp0_it47 : STD_LOGIC_VECTOR (63 downto 0);
    signal S_read_reg_484 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it13 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it25 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it27 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it28 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it29 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it30 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it31 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it32 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it33 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it34 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it35 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it36 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it37 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it38 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it39 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it40 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it41 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it42 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it43 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it44 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it45 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_S_read_reg_484_pp0_it46 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it42 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it43 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it44 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it45 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it46 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it47 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it48 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_490_pp0_it49 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rand_number_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_505 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it7 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it8 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it12 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it13 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it25 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it27 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it28 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it29 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it30 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it31 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it32 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it33 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it34 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it35 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it36 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it37 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it38 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it39 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it40 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it41 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it42 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it43 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it44 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it45 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it46 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it47 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it48 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it49 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_25_reg_505_pp0_it50 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rand_number_1_reg_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_1_reg_510_pp0_it10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_1_reg_510_pp0_it11 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_298_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_1_reg_521 : STD_LOGIC_VECTOR (52 downto 0);
    signal isNeg_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_cast_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_fu_334_p3_temp: signed (12-1 downto 0);
    signal sh_assign_1_cast_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_i_i_fu_350_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_69_i_i_reg_536 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Val2_4_fu_378_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_4_reg_541 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_i_i_fu_388_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_i_i_reg_546 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal rand_number_2_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it14 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it15 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it17 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it18 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it19 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it25 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it27 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it28 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it29 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it30 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it31 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it32 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it33 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it34 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it35 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it36 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_rand_number_2_reg_561_pp0_it37 : STD_LOGIC_VECTOR (63 downto 0);
    signal X_assign_reg_567 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i_i_i_i_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_i_reg_580 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_34_i_reg_580_pp0_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_585 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_i_reg_590 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_i_reg_595 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_i_reg_600 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal K_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it20 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it21 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it22 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it25 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it27 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it28 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it29 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_K_reg_605_pp0_it30 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_i_reg_612 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_i_reg_617 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_i_reg_622 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it23 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it24 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it25 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it26 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it27 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it28 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it29 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it30 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_24_i_reg_622_pp0_it31 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_i_reg_627 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_i_reg_632 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_i_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_i_reg_642 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_reg_647 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_i_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_i_reg_657 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_i_reg_662 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_reg_667 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_w_reg_667_pp0_it34 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_i_reg_673 : STD_LOGIC_VECTOR (63 downto 0);
    signal sig_fu_420_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sig_reg_678 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_685 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_690 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_695 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_700 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_706 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_706_pp0_it39 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_706_pp0_it40 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_711 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_reg_716 : STD_LOGIC_VECTOR (63 downto 0);
    signal vc_reg_721 : STD_LOGIC_VECTOR (63 downto 0);
    signal vp_reg_726 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_reg_731 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_reg_737 : STD_LOGIC_VECTOR (63 downto 0);
    signal call_fu_425_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal call_reg_743 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_v_fu_439_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_v_reg_748 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppiten_pp0_it0_preg : STD_LOGIC := '0';
    signal ap_reg_ptbuf_CallPutFlag : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_S : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ptbuf_X : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ptbuf_T : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ptbuf_b : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_rand_uint32_fu_143_ap_start : STD_LOGIC;
    signal grp_rand_uint32_fu_143_ap_done : STD_LOGIC;
    signal grp_rand_uint32_fu_143_ap_idle : STD_LOGIC;
    signal grp_rand_uint32_fu_143_ap_ready : STD_LOGIC;
    signal grp_rand_uint32_fu_143_ap_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_start_in_grp_rand_uint32_fu_143_ap_start : STD_LOGIC;
    signal grp_fu_159_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_187_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_194_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_212_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_217_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_to_int_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_294_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_fu_284_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_cast1_fu_306_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_101_fu_324_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_assign_1_fu_334_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_101_fu_324_p2_temp: signed (11-1 downto 0);
    signal sh_assign_1_fu_334_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_68_i_i_cast_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_i_i_cast_fu_346_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_i_i_fu_356_p1 : STD_LOGIC_VECTOR (167 downto 0);
    signal tmp_68_i_i_fu_359_p1 : STD_LOGIC_VECTOR (167 downto 0);
    signal tmp_69_i_i_cast_fu_362_p1 : STD_LOGIC_VECTOR (167 downto 0);
    signal tmp_71_i_i_fu_365_p2 : STD_LOGIC_VECTOR (167 downto 0);
    signal p_Val2_3_fu_371_p3 : STD_LOGIC_VECTOR (167 downto 0);
    signal p_Val2_7_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_403_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_2_fu_407_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal put_fu_432_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_159_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_159_ce : STD_LOGIC;
    signal grp_fu_163_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_163_ce : STD_LOGIC;
    signal grp_fu_170_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_170_ce : STD_LOGIC;
    signal grp_fu_176_ce : STD_LOGIC;
    signal grp_fu_181_ce : STD_LOGIC;
    signal grp_fu_187_ce : STD_LOGIC;
    signal grp_fu_194_ce : STD_LOGIC;
    signal grp_fu_198_ce : STD_LOGIC;
    signal grp_fu_202_ce : STD_LOGIC;
    signal grp_fu_207_ce : STD_LOGIC;
    signal grp_fu_212_ce : STD_LOGIC;
    signal grp_fu_212_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_217_ce : STD_LOGIC;
    signal grp_fu_220_ce : STD_LOGIC;
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_223_ce : STD_LOGIC;
    signal grp_fu_228_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_233_ce : STD_LOGIC;
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_bdd_1441 : BOOLEAN;

    component rand_uint32 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_dadddsub_64ns_64ns_64_5_no_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_dsub_64ns_64ns_64_5_no_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_ddiv_64ns_64ns_64_31 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_dcmp_64ns_64ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component BlackScholesWrapper_uitodp_64ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_sitodp_64ns_64_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_dsqrt_64ns_64ns_64_31 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_drecip_64ns_64ns_64_11 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component BlackScholesWrapper_dexp_64ns_64ns_64_15_med_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_rand_uint32_fu_143 : component rand_uint32
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_rand_uint32_fu_143_ap_start,
        ap_done => grp_rand_uint32_fu_143_ap_done,
        ap_idle => grp_rand_uint32_fu_143_ap_idle,
        ap_ready => grp_rand_uint32_fu_143_ap_ready,
        ap_ce => grp_rand_uint32_fu_143_ap_ce,
        ap_return => grp_rand_uint32_fu_143_ap_return);

    BlackScholesWrapper_dadddsub_64ns_64ns_64_5_no_dsp_U2 : component BlackScholesWrapper_dadddsub_64ns_64ns_64_5_no_dsp
    generic map (
        ID => 2,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_159_p0,
        din1 => grp_fu_159_p1,
        opcode => grp_fu_159_opcode,
        ce => grp_fu_159_ce,
        dout => grp_fu_159_p2);

    BlackScholesWrapper_dadddsub_64ns_64ns_64_5_no_dsp_U3 : component BlackScholesWrapper_dadddsub_64ns_64ns_64_5_no_dsp
    generic map (
        ID => 3,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_163_p0,
        din1 => grp_fu_163_p1,
        opcode => grp_fu_163_opcode,
        ce => grp_fu_163_ce,
        dout => grp_fu_163_p2);

    BlackScholesWrapper_dadddsub_64ns_64ns_64_5_no_dsp_U4 : component BlackScholesWrapper_dadddsub_64ns_64ns_64_5_no_dsp
    generic map (
        ID => 4,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_170_p0,
        din1 => grp_fu_170_p1,
        opcode => grp_fu_170_opcode,
        ce => grp_fu_170_ce,
        dout => grp_fu_170_p2);

    BlackScholesWrapper_dsub_64ns_64ns_64_5_no_dsp_U5 : component BlackScholesWrapper_dsub_64ns_64ns_64_5_no_dsp
    generic map (
        ID => 5,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_176_p0,
        din1 => grp_fu_176_p1,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp_U6 : component BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp
    generic map (
        ID => 6,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_181_p0,
        din1 => grp_fu_181_p1,
        ce => grp_fu_181_ce,
        dout => grp_fu_181_p2);

    BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp_U7 : component BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp
    generic map (
        ID => 7,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_187_p0,
        din1 => grp_fu_187_p1,
        ce => grp_fu_187_ce,
        dout => grp_fu_187_p2);

    BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp_U8 : component BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp
    generic map (
        ID => 8,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_194_p0,
        din1 => grp_fu_194_p1,
        ce => grp_fu_194_ce,
        dout => grp_fu_194_p2);

    BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp_U9 : component BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp
    generic map (
        ID => 9,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        ce => grp_fu_198_ce,
        dout => grp_fu_198_p2);

    BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp_U10 : component BlackScholesWrapper_dmul_64ns_64ns_64_6_med_dsp
    generic map (
        ID => 10,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => grp_fu_202_ce,
        dout => grp_fu_202_p2);

    BlackScholesWrapper_ddiv_64ns_64ns_64_31_U11 : component BlackScholesWrapper_ddiv_64ns_64ns_64_31
    generic map (
        ID => 11,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_207_p0,
        din1 => grp_fu_207_p1,
        ce => grp_fu_207_ce,
        dout => grp_fu_207_p2);

    BlackScholesWrapper_dcmp_64ns_64ns_1_3_U12 : component BlackScholesWrapper_dcmp_64ns_64ns_1_3
    generic map (
        ID => 12,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_212_p0,
        din1 => grp_fu_212_p1,
        ce => grp_fu_212_ce,
        opcode => grp_fu_212_opcode,
        dout => grp_fu_212_p2);

    BlackScholesWrapper_uitodp_64ns_64_6_U13 : component BlackScholesWrapper_uitodp_64ns_64_6
    generic map (
        ID => 13,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_217_p0,
        ce => grp_fu_217_ce,
        dout => grp_fu_217_p1);

    BlackScholesWrapper_sitodp_64ns_64_6_U14 : component BlackScholesWrapper_sitodp_64ns_64_6
    generic map (
        ID => 14,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        ce => grp_fu_220_ce,
        dout => grp_fu_220_p1);

    BlackScholesWrapper_dsqrt_64ns_64ns_64_31_U15 : component BlackScholesWrapper_dsqrt_64ns_64ns_64_31
    generic map (
        ID => 15,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_223_p0,
        din1 => grp_fu_223_p1,
        ce => grp_fu_223_ce,
        dout => grp_fu_223_p2);

    BlackScholesWrapper_drecip_64ns_64ns_64_11_U16 : component BlackScholesWrapper_drecip_64ns_64ns_64_11
    generic map (
        ID => 16,
        NUM_STAGE => 11,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_228_p0,
        din1 => grp_fu_228_p1,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    BlackScholesWrapper_dexp_64ns_64ns_64_15_med_dsp_U17 : component BlackScholesWrapper_dexp_64ns_64ns_64_15_med_dsp
    generic map (
        ID => 17,
        NUM_STAGE => 15,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_233_p0,
        din1 => grp_fu_233_p1,
        ce => grp_fu_233_ce,
        dout => grp_fu_233_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0_preg assign process. --
    ap_reg_ppiten_pp0_it0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
                    ap_reg_ppiten_pp0_it0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it26 assign process. --
    ap_reg_ppiten_pp0_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it27 assign process. --
    ap_reg_ppiten_pp0_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it28 assign process. --
    ap_reg_ppiten_pp0_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it29 assign process. --
    ap_reg_ppiten_pp0_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it30 assign process. --
    ap_reg_ppiten_pp0_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it31 assign process. --
    ap_reg_ppiten_pp0_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it32 assign process. --
    ap_reg_ppiten_pp0_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it33 assign process. --
    ap_reg_ppiten_pp0_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it34 assign process. --
    ap_reg_ppiten_pp0_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it35 assign process. --
    ap_reg_ppiten_pp0_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it35 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it35 <= ap_reg_ppiten_pp0_it34;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it36 assign process. --
    ap_reg_ppiten_pp0_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it36 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it36 <= ap_reg_ppiten_pp0_it35;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it37 assign process. --
    ap_reg_ppiten_pp0_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it37 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it37 <= ap_reg_ppiten_pp0_it36;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it38 assign process. --
    ap_reg_ppiten_pp0_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it38 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it38 <= ap_reg_ppiten_pp0_it37;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it39 assign process. --
    ap_reg_ppiten_pp0_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it39 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it39 <= ap_reg_ppiten_pp0_it38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it40 assign process. --
    ap_reg_ppiten_pp0_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it40 <= ap_reg_ppiten_pp0_it39;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it41 assign process. --
    ap_reg_ppiten_pp0_it41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it41 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it41 <= ap_reg_ppiten_pp0_it40;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it42 assign process. --
    ap_reg_ppiten_pp0_it42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it42 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it42 <= ap_reg_ppiten_pp0_it41;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it43 assign process. --
    ap_reg_ppiten_pp0_it43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it43 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it43 <= ap_reg_ppiten_pp0_it42;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it44 assign process. --
    ap_reg_ppiten_pp0_it44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it44 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it44 <= ap_reg_ppiten_pp0_it43;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it45 assign process. --
    ap_reg_ppiten_pp0_it45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it45 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it45 <= ap_reg_ppiten_pp0_it44;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it46 assign process. --
    ap_reg_ppiten_pp0_it46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it46 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it46 <= ap_reg_ppiten_pp0_it45;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it47 assign process. --
    ap_reg_ppiten_pp0_it47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it47 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it47 <= ap_reg_ppiten_pp0_it46;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it48 assign process. --
    ap_reg_ppiten_pp0_it48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it48 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it48 <= ap_reg_ppiten_pp0_it47;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it49 assign process. --
    ap_reg_ppiten_pp0_it49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it49 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it49 <= ap_reg_ppiten_pp0_it48;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it50 assign process. --
    ap_reg_ppiten_pp0_it50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it50 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it50 <= ap_reg_ppiten_pp0_it49;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it51 assign process. --
    ap_reg_ppiten_pp0_it51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it51 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it51 <= ap_reg_ppiten_pp0_it50;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it52 assign process. --
    ap_reg_ppiten_pp0_it52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it52 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_ce)) then
                    if (ap_sig_bdd_1441) then 
                        ap_reg_ppiten_pp0_it52 <= ap_const_logic_0;
                    elsif ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm)) then 
                        ap_reg_ppiten_pp0_it52 <= ap_reg_ppiten_pp0_it51;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it19) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                K_reg_605 <= grp_fu_228_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                S_read_reg_484 <= ap_reg_ptbuf_S;
                X_read_reg_478 <= ap_reg_ptbuf_X;
                b_read_reg_473 <= ap_reg_ptbuf_b;
                tmp_11_reg_490 <= tmp_11_fu_267_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                T_read_reg_456 <= ap_reg_ptbuf_T;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                X_assign_reg_567 <= grp_fu_159_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                ap_reg_ppstg_K_reg_605_pp0_it20 <= K_reg_605;
                ap_reg_ppstg_K_reg_605_pp0_it21 <= ap_reg_ppstg_K_reg_605_pp0_it20;
                ap_reg_ppstg_K_reg_605_pp0_it22 <= ap_reg_ppstg_K_reg_605_pp0_it21;
                ap_reg_ppstg_K_reg_605_pp0_it23 <= ap_reg_ppstg_K_reg_605_pp0_it22;
                ap_reg_ppstg_K_reg_605_pp0_it24 <= ap_reg_ppstg_K_reg_605_pp0_it23;
                ap_reg_ppstg_K_reg_605_pp0_it25 <= ap_reg_ppstg_K_reg_605_pp0_it24;
                ap_reg_ppstg_K_reg_605_pp0_it26 <= ap_reg_ppstg_K_reg_605_pp0_it25;
                ap_reg_ppstg_K_reg_605_pp0_it27 <= ap_reg_ppstg_K_reg_605_pp0_it26;
                ap_reg_ppstg_K_reg_605_pp0_it28 <= ap_reg_ppstg_K_reg_605_pp0_it27;
                ap_reg_ppstg_K_reg_605_pp0_it29 <= ap_reg_ppstg_K_reg_605_pp0_it28;
                ap_reg_ppstg_K_reg_605_pp0_it30 <= ap_reg_ppstg_K_reg_605_pp0_it29;
                ap_reg_ppstg_S_read_reg_484_pp0_it1 <= S_read_reg_484;
                ap_reg_ppstg_S_read_reg_484_pp0_it10 <= ap_reg_ppstg_S_read_reg_484_pp0_it9;
                ap_reg_ppstg_S_read_reg_484_pp0_it11 <= ap_reg_ppstg_S_read_reg_484_pp0_it10;
                ap_reg_ppstg_S_read_reg_484_pp0_it12 <= ap_reg_ppstg_S_read_reg_484_pp0_it11;
                ap_reg_ppstg_S_read_reg_484_pp0_it13 <= ap_reg_ppstg_S_read_reg_484_pp0_it12;
                ap_reg_ppstg_S_read_reg_484_pp0_it14 <= ap_reg_ppstg_S_read_reg_484_pp0_it13;
                ap_reg_ppstg_S_read_reg_484_pp0_it15 <= ap_reg_ppstg_S_read_reg_484_pp0_it14;
                ap_reg_ppstg_S_read_reg_484_pp0_it16 <= ap_reg_ppstg_S_read_reg_484_pp0_it15;
                ap_reg_ppstg_S_read_reg_484_pp0_it17 <= ap_reg_ppstg_S_read_reg_484_pp0_it16;
                ap_reg_ppstg_S_read_reg_484_pp0_it18 <= ap_reg_ppstg_S_read_reg_484_pp0_it17;
                ap_reg_ppstg_S_read_reg_484_pp0_it19 <= ap_reg_ppstg_S_read_reg_484_pp0_it18;
                ap_reg_ppstg_S_read_reg_484_pp0_it2 <= ap_reg_ppstg_S_read_reg_484_pp0_it1;
                ap_reg_ppstg_S_read_reg_484_pp0_it20 <= ap_reg_ppstg_S_read_reg_484_pp0_it19;
                ap_reg_ppstg_S_read_reg_484_pp0_it21 <= ap_reg_ppstg_S_read_reg_484_pp0_it20;
                ap_reg_ppstg_S_read_reg_484_pp0_it22 <= ap_reg_ppstg_S_read_reg_484_pp0_it21;
                ap_reg_ppstg_S_read_reg_484_pp0_it23 <= ap_reg_ppstg_S_read_reg_484_pp0_it22;
                ap_reg_ppstg_S_read_reg_484_pp0_it24 <= ap_reg_ppstg_S_read_reg_484_pp0_it23;
                ap_reg_ppstg_S_read_reg_484_pp0_it25 <= ap_reg_ppstg_S_read_reg_484_pp0_it24;
                ap_reg_ppstg_S_read_reg_484_pp0_it26 <= ap_reg_ppstg_S_read_reg_484_pp0_it25;
                ap_reg_ppstg_S_read_reg_484_pp0_it27 <= ap_reg_ppstg_S_read_reg_484_pp0_it26;
                ap_reg_ppstg_S_read_reg_484_pp0_it28 <= ap_reg_ppstg_S_read_reg_484_pp0_it27;
                ap_reg_ppstg_S_read_reg_484_pp0_it29 <= ap_reg_ppstg_S_read_reg_484_pp0_it28;
                ap_reg_ppstg_S_read_reg_484_pp0_it3 <= ap_reg_ppstg_S_read_reg_484_pp0_it2;
                ap_reg_ppstg_S_read_reg_484_pp0_it30 <= ap_reg_ppstg_S_read_reg_484_pp0_it29;
                ap_reg_ppstg_S_read_reg_484_pp0_it31 <= ap_reg_ppstg_S_read_reg_484_pp0_it30;
                ap_reg_ppstg_S_read_reg_484_pp0_it32 <= ap_reg_ppstg_S_read_reg_484_pp0_it31;
                ap_reg_ppstg_S_read_reg_484_pp0_it33 <= ap_reg_ppstg_S_read_reg_484_pp0_it32;
                ap_reg_ppstg_S_read_reg_484_pp0_it34 <= ap_reg_ppstg_S_read_reg_484_pp0_it33;
                ap_reg_ppstg_S_read_reg_484_pp0_it35 <= ap_reg_ppstg_S_read_reg_484_pp0_it34;
                ap_reg_ppstg_S_read_reg_484_pp0_it36 <= ap_reg_ppstg_S_read_reg_484_pp0_it35;
                ap_reg_ppstg_S_read_reg_484_pp0_it37 <= ap_reg_ppstg_S_read_reg_484_pp0_it36;
                ap_reg_ppstg_S_read_reg_484_pp0_it38 <= ap_reg_ppstg_S_read_reg_484_pp0_it37;
                ap_reg_ppstg_S_read_reg_484_pp0_it39 <= ap_reg_ppstg_S_read_reg_484_pp0_it38;
                ap_reg_ppstg_S_read_reg_484_pp0_it4 <= ap_reg_ppstg_S_read_reg_484_pp0_it3;
                ap_reg_ppstg_S_read_reg_484_pp0_it40 <= ap_reg_ppstg_S_read_reg_484_pp0_it39;
                ap_reg_ppstg_S_read_reg_484_pp0_it41 <= ap_reg_ppstg_S_read_reg_484_pp0_it40;
                ap_reg_ppstg_S_read_reg_484_pp0_it42 <= ap_reg_ppstg_S_read_reg_484_pp0_it41;
                ap_reg_ppstg_S_read_reg_484_pp0_it43 <= ap_reg_ppstg_S_read_reg_484_pp0_it42;
                ap_reg_ppstg_S_read_reg_484_pp0_it44 <= ap_reg_ppstg_S_read_reg_484_pp0_it43;
                ap_reg_ppstg_S_read_reg_484_pp0_it45 <= ap_reg_ppstg_S_read_reg_484_pp0_it44;
                ap_reg_ppstg_S_read_reg_484_pp0_it46 <= ap_reg_ppstg_S_read_reg_484_pp0_it45;
                ap_reg_ppstg_S_read_reg_484_pp0_it5 <= ap_reg_ppstg_S_read_reg_484_pp0_it4;
                ap_reg_ppstg_S_read_reg_484_pp0_it6 <= ap_reg_ppstg_S_read_reg_484_pp0_it5;
                ap_reg_ppstg_S_read_reg_484_pp0_it7 <= ap_reg_ppstg_S_read_reg_484_pp0_it6;
                ap_reg_ppstg_S_read_reg_484_pp0_it8 <= ap_reg_ppstg_S_read_reg_484_pp0_it7;
                ap_reg_ppstg_S_read_reg_484_pp0_it9 <= ap_reg_ppstg_S_read_reg_484_pp0_it8;
                ap_reg_ppstg_X_read_reg_478_pp0_it1 <= X_read_reg_478;
                ap_reg_ppstg_X_read_reg_478_pp0_it10 <= ap_reg_ppstg_X_read_reg_478_pp0_it9;
                ap_reg_ppstg_X_read_reg_478_pp0_it11 <= ap_reg_ppstg_X_read_reg_478_pp0_it10;
                ap_reg_ppstg_X_read_reg_478_pp0_it12 <= ap_reg_ppstg_X_read_reg_478_pp0_it11;
                ap_reg_ppstg_X_read_reg_478_pp0_it13 <= ap_reg_ppstg_X_read_reg_478_pp0_it12;
                ap_reg_ppstg_X_read_reg_478_pp0_it14 <= ap_reg_ppstg_X_read_reg_478_pp0_it13;
                ap_reg_ppstg_X_read_reg_478_pp0_it15 <= ap_reg_ppstg_X_read_reg_478_pp0_it14;
                ap_reg_ppstg_X_read_reg_478_pp0_it16 <= ap_reg_ppstg_X_read_reg_478_pp0_it15;
                ap_reg_ppstg_X_read_reg_478_pp0_it17 <= ap_reg_ppstg_X_read_reg_478_pp0_it16;
                ap_reg_ppstg_X_read_reg_478_pp0_it18 <= ap_reg_ppstg_X_read_reg_478_pp0_it17;
                ap_reg_ppstg_X_read_reg_478_pp0_it19 <= ap_reg_ppstg_X_read_reg_478_pp0_it18;
                ap_reg_ppstg_X_read_reg_478_pp0_it2 <= ap_reg_ppstg_X_read_reg_478_pp0_it1;
                ap_reg_ppstg_X_read_reg_478_pp0_it20 <= ap_reg_ppstg_X_read_reg_478_pp0_it19;
                ap_reg_ppstg_X_read_reg_478_pp0_it21 <= ap_reg_ppstg_X_read_reg_478_pp0_it20;
                ap_reg_ppstg_X_read_reg_478_pp0_it22 <= ap_reg_ppstg_X_read_reg_478_pp0_it21;
                ap_reg_ppstg_X_read_reg_478_pp0_it23 <= ap_reg_ppstg_X_read_reg_478_pp0_it22;
                ap_reg_ppstg_X_read_reg_478_pp0_it24 <= ap_reg_ppstg_X_read_reg_478_pp0_it23;
                ap_reg_ppstg_X_read_reg_478_pp0_it25 <= ap_reg_ppstg_X_read_reg_478_pp0_it24;
                ap_reg_ppstg_X_read_reg_478_pp0_it26 <= ap_reg_ppstg_X_read_reg_478_pp0_it25;
                ap_reg_ppstg_X_read_reg_478_pp0_it27 <= ap_reg_ppstg_X_read_reg_478_pp0_it26;
                ap_reg_ppstg_X_read_reg_478_pp0_it28 <= ap_reg_ppstg_X_read_reg_478_pp0_it27;
                ap_reg_ppstg_X_read_reg_478_pp0_it29 <= ap_reg_ppstg_X_read_reg_478_pp0_it28;
                ap_reg_ppstg_X_read_reg_478_pp0_it3 <= ap_reg_ppstg_X_read_reg_478_pp0_it2;
                ap_reg_ppstg_X_read_reg_478_pp0_it30 <= ap_reg_ppstg_X_read_reg_478_pp0_it29;
                ap_reg_ppstg_X_read_reg_478_pp0_it31 <= ap_reg_ppstg_X_read_reg_478_pp0_it30;
                ap_reg_ppstg_X_read_reg_478_pp0_it32 <= ap_reg_ppstg_X_read_reg_478_pp0_it31;
                ap_reg_ppstg_X_read_reg_478_pp0_it33 <= ap_reg_ppstg_X_read_reg_478_pp0_it32;
                ap_reg_ppstg_X_read_reg_478_pp0_it34 <= ap_reg_ppstg_X_read_reg_478_pp0_it33;
                ap_reg_ppstg_X_read_reg_478_pp0_it35 <= ap_reg_ppstg_X_read_reg_478_pp0_it34;
                ap_reg_ppstg_X_read_reg_478_pp0_it36 <= ap_reg_ppstg_X_read_reg_478_pp0_it35;
                ap_reg_ppstg_X_read_reg_478_pp0_it37 <= ap_reg_ppstg_X_read_reg_478_pp0_it36;
                ap_reg_ppstg_X_read_reg_478_pp0_it38 <= ap_reg_ppstg_X_read_reg_478_pp0_it37;
                ap_reg_ppstg_X_read_reg_478_pp0_it39 <= ap_reg_ppstg_X_read_reg_478_pp0_it38;
                ap_reg_ppstg_X_read_reg_478_pp0_it4 <= ap_reg_ppstg_X_read_reg_478_pp0_it3;
                ap_reg_ppstg_X_read_reg_478_pp0_it40 <= ap_reg_ppstg_X_read_reg_478_pp0_it39;
                ap_reg_ppstg_X_read_reg_478_pp0_it41 <= ap_reg_ppstg_X_read_reg_478_pp0_it40;
                ap_reg_ppstg_X_read_reg_478_pp0_it42 <= ap_reg_ppstg_X_read_reg_478_pp0_it41;
                ap_reg_ppstg_X_read_reg_478_pp0_it43 <= ap_reg_ppstg_X_read_reg_478_pp0_it42;
                ap_reg_ppstg_X_read_reg_478_pp0_it44 <= ap_reg_ppstg_X_read_reg_478_pp0_it43;
                ap_reg_ppstg_X_read_reg_478_pp0_it45 <= ap_reg_ppstg_X_read_reg_478_pp0_it44;
                ap_reg_ppstg_X_read_reg_478_pp0_it46 <= ap_reg_ppstg_X_read_reg_478_pp0_it45;
                ap_reg_ppstg_X_read_reg_478_pp0_it47 <= ap_reg_ppstg_X_read_reg_478_pp0_it46;
                ap_reg_ppstg_X_read_reg_478_pp0_it5 <= ap_reg_ppstg_X_read_reg_478_pp0_it4;
                ap_reg_ppstg_X_read_reg_478_pp0_it6 <= ap_reg_ppstg_X_read_reg_478_pp0_it5;
                ap_reg_ppstg_X_read_reg_478_pp0_it7 <= ap_reg_ppstg_X_read_reg_478_pp0_it6;
                ap_reg_ppstg_X_read_reg_478_pp0_it8 <= ap_reg_ppstg_X_read_reg_478_pp0_it7;
                ap_reg_ppstg_X_read_reg_478_pp0_it9 <= ap_reg_ppstg_X_read_reg_478_pp0_it8;
                ap_reg_ppstg_b_read_reg_473_pp0_it1 <= b_read_reg_473;
                ap_reg_ppstg_b_read_reg_473_pp0_it10 <= ap_reg_ppstg_b_read_reg_473_pp0_it9;
                ap_reg_ppstg_b_read_reg_473_pp0_it11 <= ap_reg_ppstg_b_read_reg_473_pp0_it10;
                ap_reg_ppstg_b_read_reg_473_pp0_it12 <= ap_reg_ppstg_b_read_reg_473_pp0_it11;
                ap_reg_ppstg_b_read_reg_473_pp0_it2 <= ap_reg_ppstg_b_read_reg_473_pp0_it1;
                ap_reg_ppstg_b_read_reg_473_pp0_it3 <= ap_reg_ppstg_b_read_reg_473_pp0_it2;
                ap_reg_ppstg_b_read_reg_473_pp0_it4 <= ap_reg_ppstg_b_read_reg_473_pp0_it3;
                ap_reg_ppstg_b_read_reg_473_pp0_it5 <= ap_reg_ppstg_b_read_reg_473_pp0_it4;
                ap_reg_ppstg_b_read_reg_473_pp0_it6 <= ap_reg_ppstg_b_read_reg_473_pp0_it5;
                ap_reg_ppstg_b_read_reg_473_pp0_it7 <= ap_reg_ppstg_b_read_reg_473_pp0_it6;
                ap_reg_ppstg_b_read_reg_473_pp0_it8 <= ap_reg_ppstg_b_read_reg_473_pp0_it7;
                ap_reg_ppstg_b_read_reg_473_pp0_it9 <= ap_reg_ppstg_b_read_reg_473_pp0_it8;
                ap_reg_ppstg_rand_number_1_reg_510_pp0_it10 <= rand_number_1_reg_510;
                ap_reg_ppstg_rand_number_1_reg_510_pp0_it11 <= ap_reg_ppstg_rand_number_1_reg_510_pp0_it10;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it1 <= tmp_11_reg_490;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it10 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it9;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it11 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it10;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it12 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it11;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it13 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it12;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it14 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it13;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it15 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it14;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it16 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it15;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it17 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it16;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it18 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it17;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it19 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it18;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it2 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it1;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it20 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it19;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it21 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it20;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it22 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it21;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it23 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it22;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it24 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it23;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it25 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it24;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it26 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it25;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it27 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it26;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it28 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it27;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it29 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it28;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it3 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it2;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it30 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it29;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it31 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it30;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it32 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it31;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it33 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it32;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it34 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it33;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it35 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it34;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it36 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it35;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it37 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it36;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it38 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it37;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it39 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it38;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it4 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it3;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it40 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it39;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it41 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it40;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it42 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it41;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it43 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it42;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it44 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it43;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it45 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it44;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it46 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it45;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it47 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it46;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it48 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it47;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it49 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it48;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it5 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it4;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it6 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it5;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it7 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it6;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it8 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it7;
                ap_reg_ppstg_tmp_11_reg_490_pp0_it9 <= ap_reg_ppstg_tmp_11_reg_490_pp0_it8;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it10 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it9;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it11 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it10;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it12 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it11;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it13 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it12;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it14 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it13;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it15 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it14;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it16 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it15;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it17 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it16;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it18 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it17;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it19 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it18;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it20 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it19;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it21 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it20;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it22 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it21;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it23 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it22;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it24 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it23;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it25 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it24;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it26 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it25;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it27 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it26;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it28 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it27;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it29 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it28;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it30 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it29;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it31 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it30;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it32 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it31;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it33 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it32;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it34 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it33;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it35 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it34;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it36 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it35;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it37 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it36;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it38 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it37;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it39 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it38;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it40 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it39;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it41 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it40;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it42 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it41;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it43 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it42;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it44 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it43;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it45 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it44;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it46 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it45;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it47 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it46;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it48 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it47;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it49 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it48;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it50 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it49;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it6 <= tmp_25_reg_505;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it7 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it6;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it8 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it7;
                ap_reg_ppstg_tmp_25_reg_505_pp0_it9 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it8;
                ap_reg_ppstg_w_reg_667_pp0_it34 <= w_reg_667;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                ap_reg_ppstg_T_read_reg_456_pp0_it1 <= T_read_reg_456;
                ap_reg_ppstg_T_read_reg_456_pp0_it10 <= ap_reg_ppstg_T_read_reg_456_pp0_it9;
                ap_reg_ppstg_T_read_reg_456_pp0_it11 <= ap_reg_ppstg_T_read_reg_456_pp0_it10;
                ap_reg_ppstg_T_read_reg_456_pp0_it12 <= ap_reg_ppstg_T_read_reg_456_pp0_it11;
                ap_reg_ppstg_T_read_reg_456_pp0_it13 <= ap_reg_ppstg_T_read_reg_456_pp0_it12;
                ap_reg_ppstg_T_read_reg_456_pp0_it14 <= ap_reg_ppstg_T_read_reg_456_pp0_it13;
                ap_reg_ppstg_T_read_reg_456_pp0_it15 <= ap_reg_ppstg_T_read_reg_456_pp0_it14;
                ap_reg_ppstg_T_read_reg_456_pp0_it16 <= ap_reg_ppstg_T_read_reg_456_pp0_it15;
                ap_reg_ppstg_T_read_reg_456_pp0_it17 <= ap_reg_ppstg_T_read_reg_456_pp0_it16;
                ap_reg_ppstg_T_read_reg_456_pp0_it18 <= ap_reg_ppstg_T_read_reg_456_pp0_it17;
                ap_reg_ppstg_T_read_reg_456_pp0_it19 <= ap_reg_ppstg_T_read_reg_456_pp0_it18;
                ap_reg_ppstg_T_read_reg_456_pp0_it2 <= ap_reg_ppstg_T_read_reg_456_pp0_it1;
                ap_reg_ppstg_T_read_reg_456_pp0_it20 <= ap_reg_ppstg_T_read_reg_456_pp0_it19;
                ap_reg_ppstg_T_read_reg_456_pp0_it21 <= ap_reg_ppstg_T_read_reg_456_pp0_it20;
                ap_reg_ppstg_T_read_reg_456_pp0_it22 <= ap_reg_ppstg_T_read_reg_456_pp0_it21;
                ap_reg_ppstg_T_read_reg_456_pp0_it23 <= ap_reg_ppstg_T_read_reg_456_pp0_it22;
                ap_reg_ppstg_T_read_reg_456_pp0_it24 <= ap_reg_ppstg_T_read_reg_456_pp0_it23;
                ap_reg_ppstg_T_read_reg_456_pp0_it25 <= ap_reg_ppstg_T_read_reg_456_pp0_it24;
                ap_reg_ppstg_T_read_reg_456_pp0_it26 <= ap_reg_ppstg_T_read_reg_456_pp0_it25;
                ap_reg_ppstg_T_read_reg_456_pp0_it27 <= ap_reg_ppstg_T_read_reg_456_pp0_it26;
                ap_reg_ppstg_T_read_reg_456_pp0_it28 <= ap_reg_ppstg_T_read_reg_456_pp0_it27;
                ap_reg_ppstg_T_read_reg_456_pp0_it29 <= ap_reg_ppstg_T_read_reg_456_pp0_it28;
                ap_reg_ppstg_T_read_reg_456_pp0_it3 <= ap_reg_ppstg_T_read_reg_456_pp0_it2;
                ap_reg_ppstg_T_read_reg_456_pp0_it30 <= ap_reg_ppstg_T_read_reg_456_pp0_it29;
                ap_reg_ppstg_T_read_reg_456_pp0_it31 <= ap_reg_ppstg_T_read_reg_456_pp0_it30;
                ap_reg_ppstg_T_read_reg_456_pp0_it32 <= ap_reg_ppstg_T_read_reg_456_pp0_it31;
                ap_reg_ppstg_T_read_reg_456_pp0_it33 <= ap_reg_ppstg_T_read_reg_456_pp0_it32;
                ap_reg_ppstg_T_read_reg_456_pp0_it34 <= ap_reg_ppstg_T_read_reg_456_pp0_it33;
                ap_reg_ppstg_T_read_reg_456_pp0_it35 <= ap_reg_ppstg_T_read_reg_456_pp0_it34;
                ap_reg_ppstg_T_read_reg_456_pp0_it36 <= ap_reg_ppstg_T_read_reg_456_pp0_it35;
                ap_reg_ppstg_T_read_reg_456_pp0_it37 <= ap_reg_ppstg_T_read_reg_456_pp0_it36;
                ap_reg_ppstg_T_read_reg_456_pp0_it38 <= ap_reg_ppstg_T_read_reg_456_pp0_it37;
                ap_reg_ppstg_T_read_reg_456_pp0_it39 <= ap_reg_ppstg_T_read_reg_456_pp0_it38;
                ap_reg_ppstg_T_read_reg_456_pp0_it4 <= ap_reg_ppstg_T_read_reg_456_pp0_it3;
                ap_reg_ppstg_T_read_reg_456_pp0_it5 <= ap_reg_ppstg_T_read_reg_456_pp0_it4;
                ap_reg_ppstg_T_read_reg_456_pp0_it6 <= ap_reg_ppstg_T_read_reg_456_pp0_it5;
                ap_reg_ppstg_T_read_reg_456_pp0_it7 <= ap_reg_ppstg_T_read_reg_456_pp0_it6;
                ap_reg_ppstg_T_read_reg_456_pp0_it8 <= ap_reg_ppstg_T_read_reg_456_pp0_it7;
                ap_reg_ppstg_T_read_reg_456_pp0_it9 <= ap_reg_ppstg_T_read_reg_456_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                ap_reg_ppstg_r_read_reg_445_pp0_it1 <= r_read_reg_445;
                ap_reg_ppstg_r_read_reg_445_pp0_it10 <= ap_reg_ppstg_r_read_reg_445_pp0_it9;
                ap_reg_ppstg_r_read_reg_445_pp0_it11 <= ap_reg_ppstg_r_read_reg_445_pp0_it10;
                ap_reg_ppstg_r_read_reg_445_pp0_it12 <= ap_reg_ppstg_r_read_reg_445_pp0_it11;
                ap_reg_ppstg_r_read_reg_445_pp0_it13 <= ap_reg_ppstg_r_read_reg_445_pp0_it12;
                ap_reg_ppstg_r_read_reg_445_pp0_it14 <= ap_reg_ppstg_r_read_reg_445_pp0_it13;
                ap_reg_ppstg_r_read_reg_445_pp0_it15 <= ap_reg_ppstg_r_read_reg_445_pp0_it14;
                ap_reg_ppstg_r_read_reg_445_pp0_it16 <= ap_reg_ppstg_r_read_reg_445_pp0_it15;
                ap_reg_ppstg_r_read_reg_445_pp0_it17 <= ap_reg_ppstg_r_read_reg_445_pp0_it16;
                ap_reg_ppstg_r_read_reg_445_pp0_it18 <= ap_reg_ppstg_r_read_reg_445_pp0_it17;
                ap_reg_ppstg_r_read_reg_445_pp0_it19 <= ap_reg_ppstg_r_read_reg_445_pp0_it18;
                ap_reg_ppstg_r_read_reg_445_pp0_it2 <= ap_reg_ppstg_r_read_reg_445_pp0_it1;
                ap_reg_ppstg_r_read_reg_445_pp0_it20 <= ap_reg_ppstg_r_read_reg_445_pp0_it19;
                ap_reg_ppstg_r_read_reg_445_pp0_it21 <= ap_reg_ppstg_r_read_reg_445_pp0_it20;
                ap_reg_ppstg_r_read_reg_445_pp0_it22 <= ap_reg_ppstg_r_read_reg_445_pp0_it21;
                ap_reg_ppstg_r_read_reg_445_pp0_it23 <= ap_reg_ppstg_r_read_reg_445_pp0_it22;
                ap_reg_ppstg_r_read_reg_445_pp0_it24 <= ap_reg_ppstg_r_read_reg_445_pp0_it23;
                ap_reg_ppstg_r_read_reg_445_pp0_it25 <= ap_reg_ppstg_r_read_reg_445_pp0_it24;
                ap_reg_ppstg_r_read_reg_445_pp0_it26 <= ap_reg_ppstg_r_read_reg_445_pp0_it25;
                ap_reg_ppstg_r_read_reg_445_pp0_it27 <= ap_reg_ppstg_r_read_reg_445_pp0_it26;
                ap_reg_ppstg_r_read_reg_445_pp0_it28 <= ap_reg_ppstg_r_read_reg_445_pp0_it27;
                ap_reg_ppstg_r_read_reg_445_pp0_it29 <= ap_reg_ppstg_r_read_reg_445_pp0_it28;
                ap_reg_ppstg_r_read_reg_445_pp0_it3 <= ap_reg_ppstg_r_read_reg_445_pp0_it2;
                ap_reg_ppstg_r_read_reg_445_pp0_it30 <= ap_reg_ppstg_r_read_reg_445_pp0_it29;
                ap_reg_ppstg_r_read_reg_445_pp0_it31 <= ap_reg_ppstg_r_read_reg_445_pp0_it30;
                ap_reg_ppstg_r_read_reg_445_pp0_it32 <= ap_reg_ppstg_r_read_reg_445_pp0_it31;
                ap_reg_ppstg_r_read_reg_445_pp0_it33 <= ap_reg_ppstg_r_read_reg_445_pp0_it32;
                ap_reg_ppstg_r_read_reg_445_pp0_it34 <= ap_reg_ppstg_r_read_reg_445_pp0_it33;
                ap_reg_ppstg_r_read_reg_445_pp0_it35 <= ap_reg_ppstg_r_read_reg_445_pp0_it34;
                ap_reg_ppstg_r_read_reg_445_pp0_it36 <= ap_reg_ppstg_r_read_reg_445_pp0_it35;
                ap_reg_ppstg_r_read_reg_445_pp0_it37 <= ap_reg_ppstg_r_read_reg_445_pp0_it36;
                ap_reg_ppstg_r_read_reg_445_pp0_it38 <= ap_reg_ppstg_r_read_reg_445_pp0_it37;
                ap_reg_ppstg_r_read_reg_445_pp0_it4 <= ap_reg_ppstg_r_read_reg_445_pp0_it3;
                ap_reg_ppstg_r_read_reg_445_pp0_it5 <= ap_reg_ppstg_r_read_reg_445_pp0_it4;
                ap_reg_ppstg_r_read_reg_445_pp0_it6 <= ap_reg_ppstg_r_read_reg_445_pp0_it5;
                ap_reg_ppstg_r_read_reg_445_pp0_it7 <= ap_reg_ppstg_r_read_reg_445_pp0_it6;
                ap_reg_ppstg_r_read_reg_445_pp0_it8 <= ap_reg_ppstg_r_read_reg_445_pp0_it7;
                ap_reg_ppstg_r_read_reg_445_pp0_it9 <= ap_reg_ppstg_r_read_reg_445_pp0_it8;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it14 <= rand_number_2_reg_561;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it15 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it14;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it16 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it15;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it17 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it16;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it18 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it17;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it19 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it18;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it20 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it19;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it21 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it20;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it22 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it21;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it23 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it22;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it24 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it23;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it25 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it24;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it26 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it25;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it27 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it26;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it28 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it27;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it29 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it28;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it30 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it29;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it31 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it30;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it32 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it31;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it33 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it32;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it34 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it33;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it35 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it34;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it36 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it35;
                ap_reg_ppstg_rand_number_2_reg_561_pp0_it37 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it36;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it16 <= tmp_34_i_reg_580;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it17 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it16;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it18 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it17;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it19 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it18;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it20 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it19;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it21 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it20;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it22 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it21;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it23 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it22;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it24 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it23;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it25 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it24;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it26 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it25;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it27 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it26;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it28 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it27;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it29 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it28;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it30 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it29;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it31 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it30;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it32 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it31;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it33 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it32;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it33;
                ap_reg_ppstg_tmp_34_i_reg_580_pp0_it35 <= ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then
                ap_reg_ppstg_tmp_18_reg_706_pp0_it39 <= tmp_18_reg_706;
                ap_reg_ppstg_tmp_18_reg_706_pp0_it40 <= ap_reg_ppstg_tmp_18_reg_706_pp0_it39;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it23 <= tmp_24_i_reg_622;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it24 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it23;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it25 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it24;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it26 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it25;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it27 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it26;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it28 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it27;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it29 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it28;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it30 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it29;
                ap_reg_ppstg_tmp_24_i_reg_622_pp0_it31 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it30;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                ap_reg_ptbuf_CallPutFlag <= CallPutFlag;
                ap_reg_ptbuf_S <= S;
                ap_reg_ptbuf_T <= T;
                ap_reg_ptbuf_X <= X;
                ap_reg_ptbuf_b <= b;
                r_read_reg_445 <= r;
                tmp_51_neg_reg_451 <= tmp_51_neg_fu_257_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it50) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it49)))) then
                call_reg_743 <= call_fu_425_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                isNeg_reg_526 <= sh_assign_fu_310_p2(11 downto 11);
                p_Result_1_reg_521(0) <= p_Result_1_fu_298_p3(0);
    p_Result_1_reg_521(1) <= p_Result_1_fu_298_p3(1);
    p_Result_1_reg_521(2) <= p_Result_1_fu_298_p3(2);
    p_Result_1_reg_521(3) <= p_Result_1_fu_298_p3(3);
    p_Result_1_reg_521(4) <= p_Result_1_fu_298_p3(4);
    p_Result_1_reg_521(5) <= p_Result_1_fu_298_p3(5);
    p_Result_1_reg_521(6) <= p_Result_1_fu_298_p3(6);
    p_Result_1_reg_521(7) <= p_Result_1_fu_298_p3(7);
    p_Result_1_reg_521(8) <= p_Result_1_fu_298_p3(8);
    p_Result_1_reg_521(9) <= p_Result_1_fu_298_p3(9);
    p_Result_1_reg_521(10) <= p_Result_1_fu_298_p3(10);
    p_Result_1_reg_521(11) <= p_Result_1_fu_298_p3(11);
    p_Result_1_reg_521(12) <= p_Result_1_fu_298_p3(12);
    p_Result_1_reg_521(13) <= p_Result_1_fu_298_p3(13);
    p_Result_1_reg_521(14) <= p_Result_1_fu_298_p3(14);
    p_Result_1_reg_521(15) <= p_Result_1_fu_298_p3(15);
    p_Result_1_reg_521(16) <= p_Result_1_fu_298_p3(16);
    p_Result_1_reg_521(17) <= p_Result_1_fu_298_p3(17);
    p_Result_1_reg_521(18) <= p_Result_1_fu_298_p3(18);
    p_Result_1_reg_521(19) <= p_Result_1_fu_298_p3(19);
    p_Result_1_reg_521(20) <= p_Result_1_fu_298_p3(20);
    p_Result_1_reg_521(21) <= p_Result_1_fu_298_p3(21);
    p_Result_1_reg_521(22) <= p_Result_1_fu_298_p3(22);
    p_Result_1_reg_521(23) <= p_Result_1_fu_298_p3(23);
    p_Result_1_reg_521(24) <= p_Result_1_fu_298_p3(24);
    p_Result_1_reg_521(25) <= p_Result_1_fu_298_p3(25);
    p_Result_1_reg_521(26) <= p_Result_1_fu_298_p3(26);
    p_Result_1_reg_521(27) <= p_Result_1_fu_298_p3(27);
    p_Result_1_reg_521(28) <= p_Result_1_fu_298_p3(28);
    p_Result_1_reg_521(29) <= p_Result_1_fu_298_p3(29);
    p_Result_1_reg_521(30) <= p_Result_1_fu_298_p3(30);
    p_Result_1_reg_521(31) <= p_Result_1_fu_298_p3(31);
    p_Result_1_reg_521(32) <= p_Result_1_fu_298_p3(32);
    p_Result_1_reg_521(33) <= p_Result_1_fu_298_p3(33);
    p_Result_1_reg_521(34) <= p_Result_1_fu_298_p3(34);
    p_Result_1_reg_521(35) <= p_Result_1_fu_298_p3(35);
    p_Result_1_reg_521(36) <= p_Result_1_fu_298_p3(36);
    p_Result_1_reg_521(37) <= p_Result_1_fu_298_p3(37);
    p_Result_1_reg_521(38) <= p_Result_1_fu_298_p3(38);
    p_Result_1_reg_521(39) <= p_Result_1_fu_298_p3(39);
    p_Result_1_reg_521(40) <= p_Result_1_fu_298_p3(40);
    p_Result_1_reg_521(41) <= p_Result_1_fu_298_p3(41);
    p_Result_1_reg_521(42) <= p_Result_1_fu_298_p3(42);
    p_Result_1_reg_521(43) <= p_Result_1_fu_298_p3(43);
    p_Result_1_reg_521(44) <= p_Result_1_fu_298_p3(44);
    p_Result_1_reg_521(45) <= p_Result_1_fu_298_p3(45);
    p_Result_1_reg_521(46) <= p_Result_1_fu_298_p3(46);
    p_Result_1_reg_521(47) <= p_Result_1_fu_298_p3(47);
    p_Result_1_reg_521(48) <= p_Result_1_fu_298_p3(48);
    p_Result_1_reg_521(49) <= p_Result_1_fu_298_p3(49);
    p_Result_1_reg_521(50) <= p_Result_1_fu_298_p3(50);
    p_Result_1_reg_521(51) <= p_Result_1_fu_298_p3(51);
                p_Result_s_reg_516 <= p_Val2_s_fu_273_p1(63 downto 63);
                sh_assign_1_cast_reg_531 <= sh_assign_1_cast_fu_342_p1;
                tmp_69_i_i_reg_536 <= tmp_69_i_i_fu_350_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it50) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then
                p_0_v_reg_748 <= p_0_v_fu_439_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                p_Val2_4_reg_541 <= p_Val2_3_fu_371_p3(115 downto 52);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = p_Result_s_reg_516)))) then
                p_Val2_i_i_reg_546 <= p_Val2_i_i_fu_388_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it9) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                rand_number_1_reg_510 <= grp_fu_207_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it13) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                rand_number_2_reg_561 <= grp_fu_159_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                rand_number_reg_500 <= grp_fu_217_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it39) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and not((ap_reg_ppstg_tmp_11_reg_490_pp0_it38 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it39) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and (ap_reg_ppstg_tmp_11_reg_490_pp0_it38 = ap_const_lv1_0)))) then
                reg_238 <= grp_fu_163_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it41) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it40))) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it41) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it40)))) then
                reg_243 <= grp_fu_194_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it42) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it41))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it42) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it41)))) then
                reg_248 <= grp_fu_170_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                sig_reg_678 <= sig_fu_420_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it36) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                tmp_12_reg_690 <= grp_fu_202_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it38) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                tmp_13_reg_700 <= grp_fu_198_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then
                tmp_16_reg_685 <= grp_fu_223_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it37) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_17_reg_695 <= grp_fu_187_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it38) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then
                tmp_18_reg_706 <= grp_fu_198_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it17) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_20_i_reg_595 <= grp_fu_163_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it46) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it45)))) then
                tmp_20_reg_711 <= grp_fu_233_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it15) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                tmp_21_i_reg_590 <= grp_fu_187_p2;
                tmp_i_reg_585 <= grp_fu_181_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it49) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it48)))) then
                tmp_21_reg_731 <= grp_fu_170_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it17) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                tmp_22_i_reg_600 <= grp_fu_181_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_23_i_reg_612 <= grp_fu_233_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then
                tmp_24_i_reg_622 <= grp_fu_187_p2;
                tmp_26_i_reg_627 <= grp_fu_159_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then
                tmp_24_reg_495 <= grp_fu_181_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                tmp_25_i_reg_617 <= grp_fu_187_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                tmp_25_reg_505 <= grp_fu_233_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_27_i_reg_632 <= grp_fu_181_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                tmp_28_i_reg_637 <= grp_fu_163_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it26) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                tmp_29_i_reg_642 <= grp_fu_194_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it46) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it45))) then
                tmp_29_reg_716 <= grp_fu_233_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it28) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_30_i_reg_647 <= grp_fu_170_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it49) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it48))) then
                tmp_30_reg_737 <= grp_fu_163_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it29) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then
                tmp_31_i_reg_652 <= grp_fu_194_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it30) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                tmp_32_i_reg_657 <= grp_fu_159_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it32) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then
                tmp_33_i_reg_662 <= grp_fu_194_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it15) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                tmp_34_i_reg_580 <= grp_fu_212_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34))) then
                tmp_35_i_reg_673 <= grp_fu_176_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then
                tmp_reg_468 <= grp_rand_uint32_fu_143_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                tmp_s_reg_556 <= grp_fu_220_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it48) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it47)))) then
                vc_reg_721 <= grp_fu_198_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it48) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it47))) then
                vp_reg_726 <= grp_fu_202_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it33) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then
                w_reg_667 <= grp_fu_198_p2;
            end if;
        end if;
    end process;
    p_Result_1_reg_521(52) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9, ap_reg_ppiten_pp0_it10, ap_reg_ppiten_pp0_it11, ap_reg_ppiten_pp0_it12, ap_reg_ppiten_pp0_it13, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp0_it15, ap_reg_ppiten_pp0_it16, ap_reg_ppiten_pp0_it17, ap_reg_ppiten_pp0_it18, ap_reg_ppiten_pp0_it19, ap_reg_ppiten_pp0_it20, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it22, ap_reg_ppiten_pp0_it23, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it25, ap_reg_ppiten_pp0_it26, ap_reg_ppiten_pp0_it27, ap_reg_ppiten_pp0_it28, ap_reg_ppiten_pp0_it29, ap_reg_ppiten_pp0_it30, ap_reg_ppiten_pp0_it31, ap_reg_ppiten_pp0_it32, ap_reg_ppiten_pp0_it33, ap_reg_ppiten_pp0_it34, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp0_it37, ap_reg_ppiten_pp0_it38, ap_reg_ppiten_pp0_it39, ap_reg_ppiten_pp0_it40, ap_reg_ppiten_pp0_it41, ap_reg_ppiten_pp0_it42, ap_reg_ppiten_pp0_it43, ap_reg_ppiten_pp0_it44, ap_reg_ppiten_pp0_it45, ap_reg_ppiten_pp0_it46, ap_reg_ppiten_pp0_it47, ap_reg_ppiten_pp0_it48, ap_reg_ppiten_pp0_it49, ap_reg_ppiten_pp0_it50, ap_reg_ppiten_pp0_it51, ap_reg_ppiten_pp0_it52, ap_ce, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and not(((ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it12) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it13) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it14) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it15) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it16) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it17) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it18) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it19) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it20) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it21) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it22) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it23) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it25) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it26) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it27) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it28) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it29) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it30) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it31) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it32) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it33) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it34) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it35) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it36) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it37) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it38) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it39) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it40) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it41) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it42) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it43) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it44) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it45) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it46) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it47) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it48) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it49) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it50) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it51) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it52) and (ap_const_logic_0 = ap_start))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                end if;
            when ap_ST_pp0_stg2_fsm_2 => 
                if (((ap_const_logic_1 = ap_ce) and not((ap_const_logic_1 = ap_sig_pprstidle_pp0)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
                elsif (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_pprstidle_pp0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
                end if;
            when ap_ST_pp0_stg3_fsm_3 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it52, ap_ce)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it52) and (ap_const_logic_1 = ap_ce) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9, ap_reg_ppiten_pp0_it10, ap_reg_ppiten_pp0_it11, ap_reg_ppiten_pp0_it12, ap_reg_ppiten_pp0_it13, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp0_it15, ap_reg_ppiten_pp0_it16, ap_reg_ppiten_pp0_it17, ap_reg_ppiten_pp0_it18, ap_reg_ppiten_pp0_it19, ap_reg_ppiten_pp0_it20, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it22, ap_reg_ppiten_pp0_it23, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it25, ap_reg_ppiten_pp0_it26, ap_reg_ppiten_pp0_it27, ap_reg_ppiten_pp0_it28, ap_reg_ppiten_pp0_it29, ap_reg_ppiten_pp0_it30, ap_reg_ppiten_pp0_it31, ap_reg_ppiten_pp0_it32, ap_reg_ppiten_pp0_it33, ap_reg_ppiten_pp0_it34, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp0_it37, ap_reg_ppiten_pp0_it38, ap_reg_ppiten_pp0_it39, ap_reg_ppiten_pp0_it40, ap_reg_ppiten_pp0_it41, ap_reg_ppiten_pp0_it42, ap_reg_ppiten_pp0_it43, ap_reg_ppiten_pp0_it44, ap_reg_ppiten_pp0_it45, ap_reg_ppiten_pp0_it46, ap_reg_ppiten_pp0_it47, ap_reg_ppiten_pp0_it48, ap_reg_ppiten_pp0_it49, ap_reg_ppiten_pp0_it50, ap_reg_ppiten_pp0_it51, ap_reg_ppiten_pp0_it52)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it12) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it13) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it14) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it15) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it16) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it17) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it18) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it19) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it20) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it21) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it22) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it23) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it25) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it26) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it27) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it28) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it29) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it30) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it31) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it32) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it33) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it34) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it35) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it36) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it37) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it38) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it39) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it40) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it41) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it42) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it43) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it44) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it45) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it46) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it47) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it48) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it49) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it50) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it51) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it52))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0_preg)
    begin
        if ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_it0_preg;
        end if; 
    end process;

    ap_return <= grp_fu_202_p2;

    -- ap_sig_bdd_1441 assign process. --
    ap_sig_bdd_1441_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it51)
    begin
                ap_sig_bdd_1441 <= ((ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it51)));
    end process;


    -- ap_sig_pprstidle_pp0 assign process. --
    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp0_it9, ap_reg_ppiten_pp0_it10, ap_reg_ppiten_pp0_it11, ap_reg_ppiten_pp0_it12, ap_reg_ppiten_pp0_it13, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp0_it15, ap_reg_ppiten_pp0_it16, ap_reg_ppiten_pp0_it17, ap_reg_ppiten_pp0_it18, ap_reg_ppiten_pp0_it19, ap_reg_ppiten_pp0_it20, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it22, ap_reg_ppiten_pp0_it23, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it25, ap_reg_ppiten_pp0_it26, ap_reg_ppiten_pp0_it27, ap_reg_ppiten_pp0_it28, ap_reg_ppiten_pp0_it29, ap_reg_ppiten_pp0_it30, ap_reg_ppiten_pp0_it31, ap_reg_ppiten_pp0_it32, ap_reg_ppiten_pp0_it33, ap_reg_ppiten_pp0_it34, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it36, ap_reg_ppiten_pp0_it37, ap_reg_ppiten_pp0_it38, ap_reg_ppiten_pp0_it39, ap_reg_ppiten_pp0_it40, ap_reg_ppiten_pp0_it41, ap_reg_ppiten_pp0_it42, ap_reg_ppiten_pp0_it43, ap_reg_ppiten_pp0_it44, ap_reg_ppiten_pp0_it45, ap_reg_ppiten_pp0_it46, ap_reg_ppiten_pp0_it47, ap_reg_ppiten_pp0_it48, ap_reg_ppiten_pp0_it49, ap_reg_ppiten_pp0_it50, ap_reg_ppiten_pp0_it51)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it4) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it5) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it6) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it7) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it8) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it9) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it10) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it11) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it12) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it13) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it14) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it15) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it16) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it17) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it18) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it19) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it20) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it21) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it22) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it23) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it24) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it25) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it26) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it27) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it28) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it29) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it30) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it31) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it32) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it33) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it34) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it35) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it36) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it37) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it38) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it39) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it40) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it41) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it42) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it43) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it44) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it45) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it46) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it47) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it48) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it49) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it50) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it51) and (ap_const_logic_0 = ap_start))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_grp_rand_uint32_fu_143_ap_start assign process. --
    ap_sig_start_in_grp_rand_uint32_fu_143_ap_start_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_start = ap_const_logic_0)))) then 
            ap_sig_start_in_grp_rand_uint32_fu_143_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_grp_rand_uint32_fu_143_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    call_fu_425_p3 <= 
        ap_const_lv64_0 when (grp_fu_212_p2(0) = '1') else 
        tmp_21_reg_731;

    -- grp_fu_159_ce assign process. --
    grp_fu_159_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if ((not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_fu_159_ce <= ap_const_logic_0;
        else 
            grp_fu_159_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fu_159_opcode assign process. --
    grp_fu_159_opcode_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it12, ap_reg_ppiten_pp0_it13, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it29)
    begin
        if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then 
            grp_fu_159_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it13) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it29) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm)))) then 
            grp_fu_159_opcode <= ap_const_lv2_0;
        else 
            grp_fu_159_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_159_p0 assign process. --
    grp_fu_159_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it12, ap_reg_ppiten_pp0_it13, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it29, ap_reg_ppstg_rand_number_1_reg_510_pp0_it11, rand_number_2_reg_561, tmp_25_i_reg_617, tmp_31_i_reg_652)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it29) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_159_p0 <= tmp_31_i_reg_652;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_159_p0 <= tmp_25_i_reg_617;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it13) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_159_p0 <= rand_number_2_reg_561;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it12))) then 
            grp_fu_159_p0 <= ap_reg_ppstg_rand_number_1_reg_510_pp0_it11;
        else 
            grp_fu_159_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_159_p1 assign process. --
    grp_fu_159_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it12, ap_reg_ppiten_pp0_it13, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it29, ap_reg_ppstg_b_read_reg_473_pp0_it12, tmp_s_reg_556)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it29) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_159_p1 <= ap_const_lv64_3FD470BF3A92F8EC;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_159_p1 <= ap_const_lv64_BFFD23DD4EF278D0;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it13) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_159_p1 <= ap_reg_ppstg_b_read_reg_473_pp0_it12;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it12))) then 
            grp_fu_159_p1 <= tmp_s_reg_556;
        else 
            grp_fu_159_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_163_ce assign process. --
    grp_fu_163_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) or (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)))) then 
            grp_fu_163_ce <= ap_const_logic_1;
        else 
            grp_fu_163_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_163_opcode assign process. --
    grp_fu_163_opcode_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it16, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it38, ap_reg_ppiten_pp0_it48, ap_reg_ppstg_tmp_11_reg_490_pp0_it37, ap_reg_ppstg_tmp_11_reg_490_pp0_it47)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it38) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it37))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it48) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it47)))) then 
            grp_fu_163_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it38) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it37)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it16) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            grp_fu_163_opcode <= ap_const_lv2_0;
        else 
            grp_fu_163_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_163_p0 assign process. --
    grp_fu_163_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it16, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it38, ap_reg_ppiten_pp0_it48, ap_reg_ppstg_r_read_reg_445_pp0_it38, ap_reg_ppstg_X_read_reg_478_pp0_it47, ap_reg_ppstg_tmp_11_reg_490_pp0_it37, tmp_i_reg_585, tmp_27_i_reg_632, tmp_13_reg_700)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it48) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_163_p0 <= ap_reg_ppstg_X_read_reg_478_pp0_it47;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it38) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it37))) then 
            grp_fu_163_p0 <= tmp_13_reg_700;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it38) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it37)))) then 
            grp_fu_163_p0 <= ap_reg_ppstg_r_read_reg_445_pp0_it38;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_163_p0 <= tmp_27_i_reg_632;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it16))) then 
            grp_fu_163_p0 <= tmp_i_reg_585;
        else 
            grp_fu_163_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_163_p1 assign process. --
    grp_fu_163_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it16, ap_reg_ppiten_pp0_it24, ap_reg_ppiten_pp0_it38, ap_reg_ppiten_pp0_it48, ap_reg_ppstg_r_read_reg_445_pp0_it38, ap_reg_ppstg_tmp_11_reg_490_pp0_it37, tmp_13_reg_700, vp_reg_726)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it48) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_163_p1 <= vp_reg_726;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it38) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it37))) then 
            grp_fu_163_p1 <= ap_reg_ppstg_r_read_reg_445_pp0_it38;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it38) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it37)))) then 
            grp_fu_163_p1 <= tmp_13_reg_700;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it24) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_163_p1 <= ap_const_lv64_3FFC80EF025F5E68;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it16))) then 
            grp_fu_163_p1 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_163_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_170_ce assign process. --
    grp_fu_170_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) or (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)))) then 
            grp_fu_170_ce <= ap_const_logic_1;
        else 
            grp_fu_170_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_170_opcode assign process. --
    grp_fu_170_opcode_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it27, ap_reg_ppiten_pp0_it41, ap_reg_ppiten_pp0_it48, ap_reg_ppstg_tmp_11_reg_490_pp0_it40, ap_reg_ppstg_tmp_11_reg_490_pp0_it47)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it48) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it47)))) then 
            grp_fu_170_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it41) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it40)) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it41) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it40) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it27) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            grp_fu_170_opcode <= ap_const_lv2_0;
        else 
            grp_fu_170_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_170_p0 assign process. --
    grp_fu_170_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it27, ap_reg_ppiten_pp0_it41, ap_reg_ppiten_pp0_it48, reg_243, ap_reg_ppstg_tmp_11_reg_490_pp0_it40, tmp_29_i_reg_642, vc_reg_721)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it48) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_170_p0 <= vc_reg_721;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it41) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it40)) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it41) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it40) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)))) then 
            grp_fu_170_p0 <= reg_243;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it27))) then 
            grp_fu_170_p0 <= tmp_29_i_reg_642;
        else 
            grp_fu_170_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_170_p1 assign process. --
    grp_fu_170_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it27, ap_reg_ppiten_pp0_it41, ap_reg_ppiten_pp0_it48, ap_reg_ppstg_tmp_11_reg_490_pp0_it40, ap_reg_ppstg_X_read_reg_478_pp0_it47, ap_reg_ppstg_tmp_18_reg_706_pp0_it40)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it48) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_170_p1 <= ap_reg_ppstg_X_read_reg_478_pp0_it47;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it41) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it40)) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it41) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it40) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)))) then 
            grp_fu_170_p1 <= ap_reg_ppstg_tmp_18_reg_706_pp0_it40;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it27))) then 
            grp_fu_170_p1 <= ap_const_lv64_BFD6D1F0E5A8325B;
        else 
            grp_fu_170_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_176_ce assign process. --
    grp_fu_176_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce, ap_reg_ppstg_tmp_34_i_reg_580_pp0_it33, ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34) or (ap_const_lv1_0 = ap_reg_ppstg_tmp_34_i_reg_580_pp0_it33))) or ((ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34)) or ((ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34)) or ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_34_i_reg_580_pp0_it34))))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_176_p0 <= ap_const_lv64_3FF0000000000000;
    grp_fu_176_p1 <= w_reg_667;

    -- grp_fu_181_ce assign process. --
    grp_fu_181_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if ((not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_fu_181_ce <= ap_const_logic_0;
        else 
            grp_fu_181_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fu_181_p0 assign process. --
    grp_fu_181_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp0_it16, ap_reg_ppiten_pp0_it22, tmp_23_fu_263_p1, ret_i_i_i_i_i_i_fu_415_p1, tmp_21_i_reg_590, ap_reg_ppstg_K_reg_605_pp0_it21)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_181_p0 <= ap_reg_ppstg_K_reg_605_pp0_it21;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it16))) then 
            grp_fu_181_p0 <= tmp_21_i_reg_590;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_181_p0 <= ret_i_i_i_i_i_i_fu_415_p1;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_181_p0 <= tmp_23_fu_263_p1;
        else 
            grp_fu_181_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_181_p1 assign process. --
    grp_fu_181_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp0_it16, ap_reg_ppiten_pp0_it22, tmp_26_i_reg_627, ap_reg_ptbuf_T)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_181_p1 <= tmp_26_i_reg_627;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it16))) then 
            grp_fu_181_p1 <= ap_const_lv64_BFE0000000000000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_181_p1 <= ap_const_lv64_3FCDA6711871100E;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_181_p1 <= ap_reg_ptbuf_T;
        else 
            grp_fu_181_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_187_ce assign process. --
    grp_fu_187_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if ((not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_fu_187_ce <= ap_const_logic_0;
        else 
            grp_fu_187_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fu_187_p0 assign process. --
    grp_fu_187_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp0_it20, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it35, X_assign_reg_567, K_reg_605, tmp_23_i_reg_612, sig_reg_678)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_187_p0 <= sig_reg_678;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_187_p0 <= tmp_23_i_reg_612;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it20))) then 
            grp_fu_187_p0 <= K_reg_605;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_187_p0 <= X_assign_reg_567;
        else 
            grp_fu_187_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_187_p1 assign process. --
    grp_fu_187_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp0_it20, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it35, X_assign_reg_567, tmp_16_reg_685)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_187_p1 <= tmp_16_reg_685;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_187_p1 <= ap_const_lv64_3FD9884533D43651;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it20))) then 
            grp_fu_187_p1 <= ap_const_lv64_3FF548CDD6F42943;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_187_p1 <= X_assign_reg_567;
        else 
            grp_fu_187_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_194_ce assign process. --
    grp_fu_194_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) or (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)))) then 
            grp_fu_194_ce <= ap_const_logic_1;
        else 
            grp_fu_194_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_194_p0 assign process. --
    grp_fu_194_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it25, ap_reg_ppiten_pp0_it28, ap_reg_ppiten_pp0_it31, ap_reg_ppiten_pp0_it39, reg_238, ap_reg_ppstg_tmp_11_reg_490_pp0_it38, ap_reg_ppstg_K_reg_605_pp0_it24, ap_reg_ppstg_K_reg_605_pp0_it27, ap_reg_ppstg_K_reg_605_pp0_it30)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it39) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and not((ap_reg_ppstg_tmp_11_reg_490_pp0_it38 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it39) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_reg_ppstg_tmp_11_reg_490_pp0_it38 = ap_const_lv1_0)))) then 
            grp_fu_194_p0 <= reg_238;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it31))) then 
            grp_fu_194_p0 <= ap_reg_ppstg_K_reg_605_pp0_it30;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it28) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_194_p0 <= ap_reg_ppstg_K_reg_605_pp0_it27;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_194_p0 <= ap_reg_ppstg_K_reg_605_pp0_it24;
        else 
            grp_fu_194_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_194_p1 assign process. --
    grp_fu_194_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it25, ap_reg_ppiten_pp0_it28, ap_reg_ppiten_pp0_it31, ap_reg_ppiten_pp0_it39, ap_reg_ppstg_tmp_11_reg_490_pp0_it38, ap_reg_ppstg_T_read_reg_456_pp0_it39, tmp_28_i_reg_637, tmp_30_i_reg_647, tmp_32_i_reg_657)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it39) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and not((ap_reg_ppstg_tmp_11_reg_490_pp0_it38 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it39) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) and (ap_reg_ppstg_tmp_11_reg_490_pp0_it38 = ap_const_lv1_0)))) then 
            grp_fu_194_p1 <= ap_reg_ppstg_T_read_reg_456_pp0_it39;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it31))) then 
            grp_fu_194_p1 <= tmp_32_i_reg_657;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it28) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_194_p1 <= tmp_30_i_reg_647;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it25) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_194_p1 <= tmp_28_i_reg_637;
        else 
            grp_fu_194_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_198_ce assign process. --
    grp_fu_198_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) or (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)))) then 
            grp_fu_198_ce <= ap_const_logic_1;
        else 
            grp_fu_198_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_198_p0 assign process. --
    grp_fu_198_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it32, ap_reg_ppiten_pp0_it37, ap_reg_ppiten_pp0_it46, ap_reg_ppstg_tmp_24_i_reg_622_pp0_it31, tmp_12_reg_690, tmp_17_reg_695, tmp_20_reg_711)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it46) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_198_p0 <= tmp_20_reg_711;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it37) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_198_p0 <= tmp_17_reg_695;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it37))) then 
            grp_fu_198_p0 <= tmp_12_reg_690;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it32) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_198_p0 <= ap_reg_ppstg_tmp_24_i_reg_622_pp0_it31;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_198_p1 assign process. --
    grp_fu_198_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it32, ap_reg_ppiten_pp0_it37, ap_reg_ppiten_pp0_it46, ap_reg_ppstg_S_read_reg_484_pp0_it45, ap_reg_ppstg_rand_number_2_reg_561_pp0_it37, tmp_33_i_reg_662)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it46) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_198_p1 <= ap_reg_ppstg_S_read_reg_484_pp0_it45;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it37) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_198_p1 <= ap_reg_ppstg_rand_number_2_reg_561_pp0_it37;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it37))) then 
            grp_fu_198_p1 <= ap_const_lv64_3FE0000000000000;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it32) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_198_p1 <= tmp_33_i_reg_662;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_202_ce assign process. --
    grp_fu_202_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) or (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)))) then 
            grp_fu_202_ce <= ap_const_logic_1;
        else 
            grp_fu_202_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_202_p0 assign process. --
    grp_fu_202_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it47, ap_reg_ppiten_pp0_it51, ap_reg_ppstg_tmp_25_reg_505_pp0_it50, sig_reg_678, tmp_29_reg_716)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it51) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_202_p0 <= ap_reg_ppstg_tmp_25_reg_505_pp0_it50;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it47))) then 
            grp_fu_202_p0 <= tmp_29_reg_716;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_202_p0 <= sig_reg_678;
        else 
            grp_fu_202_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_202_p1 assign process. --
    grp_fu_202_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it35, ap_reg_ppiten_pp0_it47, ap_reg_ppiten_pp0_it51, ap_reg_ppstg_S_read_reg_484_pp0_it46, sig_reg_678, p_0_v_reg_748)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it51) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_202_p1 <= p_0_v_reg_748;
        elsif (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it47))) then 
            grp_fu_202_p1 <= ap_reg_ppstg_S_read_reg_484_pp0_it46;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it35) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_202_p1 <= sig_reg_678;
        else 
            grp_fu_202_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_207_ce assign process. --
    grp_fu_207_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if ((not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_fu_207_ce <= ap_const_logic_0;
        else 
            grp_fu_207_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_207_p0 <= rand_number_reg_500;
    grp_fu_207_p1 <= ap_const_lv64_41CDCD6500000000;

    -- grp_fu_212_ce assign process. --
    grp_fu_212_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce, ap_reg_ppstg_tmp_11_reg_490_pp0_it49)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) or (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or ((ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm) and ((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it49) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_490_pp0_it49))))))) then 
            grp_fu_212_ce <= ap_const_logic_1;
        else 
            grp_fu_212_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_212_opcode <= ap_const_lv5_4;

    -- grp_fu_212_p0 assign process. --
    grp_fu_212_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp0_it49, ap_reg_ppiten_pp0_it50, X_assign_reg_567, tmp_21_reg_731, tmp_30_reg_737)
    begin
        if (((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it50))) then 
            grp_fu_212_p0 <= tmp_30_reg_737;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it49) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm))) then 
            grp_fu_212_p0 <= tmp_21_reg_731;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_212_p0 <= X_assign_reg_567;
        else 
            grp_fu_212_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_212_p1 <= ap_const_lv64_0;

    -- grp_fu_217_ce assign process. --
    grp_fu_217_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if ((not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_fu_217_ce <= ap_const_logic_0;
        else 
            grp_fu_217_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_217_p0 <= tmp_reg_468;

    -- grp_fu_220_ce assign process. --
    grp_fu_220_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if ((not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_fu_220_ce <= ap_const_logic_0;
        else 
            grp_fu_220_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_220_p0 <= 
        p_Val2_i_i_reg_546 when (p_Result_s_reg_516(0) = '1') else 
        p_Val2_4_reg_541;

    -- grp_fu_223_ce assign process. --
    grp_fu_223_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if ((not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_fu_223_ce <= ap_const_logic_0;
        else 
            grp_fu_223_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_223_p0 <= ap_const_lv64_0;
    grp_fu_223_p1 <= ap_reg_ppstg_T_read_reg_456_pp0_it27;

    -- grp_fu_228_ce assign process. --
    grp_fu_228_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if ((not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_fu_228_ce <= ap_const_logic_0;
        else 
            grp_fu_228_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_228_p0 <= ap_const_lv64_0;
    grp_fu_228_p1 <= tmp_20_i_reg_595;

    -- grp_fu_233_ce assign process. --
    grp_fu_233_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) or (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) or (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm)))) then 
            grp_fu_233_ce <= ap_const_logic_1;
        else 
            grp_fu_233_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_233_p0 <= ap_const_lv64_0;

    -- grp_fu_233_p1 assign process. --
    grp_fu_233_p1_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it17, ap_reg_ppiten_pp0_it42, ap_reg_ppiten_pp0_it43, reg_248, tmp_24_reg_495, tmp_22_i_reg_600)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it42) and (ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it43)))) then 
            grp_fu_233_p1 <= reg_248;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it17) and (ap_ST_pp0_stg2_fsm_2 = ap_CS_fsm))) then 
            grp_fu_233_p1 <= tmp_22_i_reg_600;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_ST_pp0_stg1_fsm_1 = ap_CS_fsm))) then 
            grp_fu_233_p1 <= tmp_24_reg_495;
        else 
            grp_fu_233_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_rand_uint32_fu_143_ap_ce assign process. --
    grp_rand_uint32_fu_143_ap_ce_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_ST_pp0_stg3_fsm_3 = ap_CS_fsm) or not((ap_const_logic_1 = ap_ce)) or ((ap_ST_pp0_stg0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) then 
            grp_rand_uint32_fu_143_ap_ce <= ap_const_logic_0;
        else 
            grp_rand_uint32_fu_143_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_rand_uint32_fu_143_ap_start assign process. --
    grp_rand_uint32_fu_143_ap_start_assign_proc : process(ap_sig_start_in_grp_rand_uint32_fu_143_ap_start)
    begin
        if ((ap_const_logic_1 = ap_sig_start_in_grp_rand_uint32_fu_143_ap_start)) then 
            grp_rand_uint32_fu_143_ap_start <= ap_sig_start_in_grp_rand_uint32_fu_143_ap_start;
        else 
            grp_rand_uint32_fu_143_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_316_p3 <= sh_assign_fu_310_p2(11 downto 11);
    loc_V_1_fu_294_p1 <= p_Val2_s_fu_273_p1(52 - 1 downto 0);
    loc_V_fu_284_p4 <= p_Val2_s_fu_273_p1(62 downto 52);
    p_0_v_fu_439_p3 <= 
        call_reg_743 when (ap_reg_ppstg_tmp_11_reg_490_pp0_it49(0) = '1') else 
        put_fu_432_p3;
    p_Result_1_fu_298_p3 <= (ap_const_lv1_1 & loc_V_1_fu_294_p1);
    p_Result_2_fu_407_p3 <= (ap_const_lv1_0 & tmp_35_fu_403_p1);
    p_Val2_3_fu_371_p3 <= 
        tmp_69_i_i_cast_fu_362_p1 when (isNeg_reg_526(0) = '1') else 
        tmp_71_i_i_fu_365_p2;
    p_Val2_4_fu_378_p4 <= p_Val2_3_fu_371_p3(115 downto 52);
    p_Val2_7_fu_400_p1 <= X_assign_reg_567;
    p_Val2_i_i_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv64_0) - unsigned(p_Val2_4_fu_378_p4));
    p_Val2_s_fu_273_p1 <= rand_number_1_reg_510;
    put_fu_432_p3 <= 
        ap_const_lv64_0 when (grp_fu_212_p2(0) = '1') else 
        tmp_30_reg_737;
    ret_i_i_i_i_i_i_fu_415_p1 <= p_Result_2_fu_407_p3;
    
    sh_assign_1_fu_334_p3_temp <= signed(sh_assign_1_fu_334_p3);
    sh_assign_1_cast_fu_342_p1 <= std_logic_vector(resize(sh_assign_1_fu_334_p3_temp,32));

    
    tmp_i_i_101_fu_324_p2_temp <= signed(tmp_i_i_101_fu_324_p2);
    sh_assign_1_fu_334_p1 <= std_logic_vector(resize(tmp_i_i_101_fu_324_p2_temp,12));

    sh_assign_1_fu_334_p3 <= 
        sh_assign_1_fu_334_p1 when (isNeg_fu_316_p3(0) = '1') else 
        sh_assign_fu_310_p2;
    sh_assign_fu_310_p2 <= std_logic_vector(unsigned(tmp_i_i_i_cast1_fu_306_p1) + unsigned(ap_const_lv12_C01));
    sig_fu_420_p3 <= 
        ap_reg_ppstg_w_reg_667_pp0_it34 when (ap_reg_ppstg_tmp_34_i_reg_580_pp0_it35(0) = '1') else 
        tmp_35_i_reg_673;
    tmp_11_fu_267_p2 <= "1" when (ap_reg_ptbuf_CallPutFlag = ap_const_lv8_63) else "0";
    tmp_23_fu_263_p1 <= tmp_51_neg_reg_451;
    tmp_35_fu_403_p1 <= p_Val2_7_fu_400_p1(63 - 1 downto 0);
    tmp_51_neg_fu_257_p2 <= (tmp_51_to_int_fu_253_p1 xor ap_const_lv64_8000000000000000);
    tmp_51_to_int_fu_253_p1 <= r;
    
    sh_assign_1_fu_334_p3_temp <= signed(sh_assign_1_fu_334_p3);
    tmp_68_i_i_cast_fu_346_p0 <= std_logic_vector(resize(sh_assign_1_fu_334_p3_temp,32));

    tmp_68_i_i_cast_fu_346_p1 <= std_logic_vector(resize(unsigned(tmp_68_i_i_cast_fu_346_p0),53));
    tmp_68_i_i_fu_359_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_reg_531),168));
    tmp_69_i_i_cast_fu_362_p1 <= std_logic_vector(resize(unsigned(tmp_69_i_i_reg_536),168));
    tmp_69_i_i_fu_350_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_298_p3),to_integer(unsigned('0' & tmp_68_i_i_cast_fu_346_p1(31-1 downto 0)))));
    tmp_71_i_i_fu_365_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_356_p1),to_integer(unsigned('0' & tmp_68_i_i_fu_359_p1(31-1 downto 0)))));
    tmp_i_i_101_fu_324_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_284_p4));
    tmp_i_i_fu_356_p1 <= std_logic_vector(resize(unsigned(p_Result_1_reg_521),168));
    tmp_i_i_i_cast1_fu_306_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_284_p4),12));
end behav;
