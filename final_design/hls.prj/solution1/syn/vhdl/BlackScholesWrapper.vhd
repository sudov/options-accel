-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BlackScholesWrapper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    CallPutFlag : IN STD_LOGIC_VECTOR (7 downto 0);
    S : IN STD_LOGIC_VECTOR (63 downto 0);
    X : IN STD_LOGIC_VECTOR (63 downto 0);
    T : IN STD_LOGIC_VECTOR (63 downto 0);
    r : IN STD_LOGIC_VECTOR (63 downto 0);
    b : IN STD_LOGIC_VECTOR (63 downto 0);
    a_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of BlackScholesWrapper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "BlackScholesWrapper,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.623000,HLS_SYN_LAT=400210,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st215_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_186A0 : STD_LOGIC_VECTOR (16 downto 0) := "11000011010100000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_reg_116 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it23 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it24 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it25 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it26 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it27 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it28 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it29 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it30 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it31 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it32 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it33 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it34 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it35 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it36 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it37 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it38 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it39 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it40 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it41 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it42 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it43 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it44 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it45 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it46 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it47 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it48 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it49 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it50 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it51 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it52 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it53 : STD_LOGIC := '0';
    signal ap_reg_ppstg_i_reg_116_pp0_it2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it4 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it5 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it6 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it7 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it8 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it9 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it10 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it11 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it12 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it13 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it14 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it15 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it16 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it17 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it18 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it19 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it20 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it21 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it22 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it23 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it24 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it25 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it26 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it27 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it28 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it29 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it30 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it31 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it32 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it33 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it34 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it35 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it36 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it37 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it38 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it39 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it40 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it41 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it42 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it43 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it44 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it45 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it46 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it47 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it48 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it49 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it50 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it51 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_ppstg_i_reg_116_pp0_it52 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_198 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it22 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it23 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it24 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it25 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it26 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it27 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it28 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it29 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it30 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it31 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it32 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it33 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it34 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it35 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it36 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it37 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it38 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it39 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it40 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it41 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it42 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it43 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it44 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it45 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it46 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it47 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it48 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it49 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it50 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it51 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_198_pp0_it52 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_157_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_1_reg_202 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_BlackScholes_fu_129_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_207 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_BlackScholes_fu_129_ap_start : STD_LOGIC;
    signal grp_BlackScholes_fu_129_ap_done : STD_LOGIC;
    signal grp_BlackScholes_fu_129_ap_idle : STD_LOGIC;
    signal grp_BlackScholes_fu_129_ap_ready : STD_LOGIC;
    signal grp_BlackScholes_fu_129_ap_ce : STD_LOGIC;
    signal grp_BlackScholes_fu_129_CallPutFlag : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_BlackScholes_fu_129_S : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_BlackScholes_fu_129_X : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_BlackScholes_fu_129_T : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_BlackScholes_fu_129_r : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_BlackScholes_fu_129_b : STD_LOGIC_VECTOR (63 downto 0);
    signal i_phi_fu_120_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_BlackScholes_fu_129_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_s_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component BlackScholes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        CallPutFlag : IN STD_LOGIC_VECTOR (7 downto 0);
        S : IN STD_LOGIC_VECTOR (63 downto 0);
        X : IN STD_LOGIC_VECTOR (63 downto 0);
        T : IN STD_LOGIC_VECTOR (63 downto 0);
        r : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_BlackScholes_fu_129 : component BlackScholes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_BlackScholes_fu_129_ap_start,
        ap_done => grp_BlackScholes_fu_129_ap_done,
        ap_idle => grp_BlackScholes_fu_129_ap_idle,
        ap_ready => grp_BlackScholes_fu_129_ap_ready,
        ap_ce => grp_BlackScholes_fu_129_ap_ce,
        CallPutFlag => grp_BlackScholes_fu_129_CallPutFlag,
        S => grp_BlackScholes_fu_129_S,
        X => grp_BlackScholes_fu_129_X,
        T => grp_BlackScholes_fu_129_T,
        r => grp_BlackScholes_fu_129_r,
        b => grp_BlackScholes_fu_129_b,
        ap_return => grp_BlackScholes_fu_129_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and not((exitcond_fu_151_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and (exitcond_reg_198 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and not((exitcond_reg_198 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it23 assign process. --
    ap_reg_ppiten_pp0_it23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it23 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it23 <= ap_reg_ppiten_pp0_it22;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it24 assign process. --
    ap_reg_ppiten_pp0_it24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it24 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it24 <= ap_reg_ppiten_pp0_it23;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it25 assign process. --
    ap_reg_ppiten_pp0_it25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it25 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it25 <= ap_reg_ppiten_pp0_it24;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it26 assign process. --
    ap_reg_ppiten_pp0_it26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it26 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it26 <= ap_reg_ppiten_pp0_it25;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it27 assign process. --
    ap_reg_ppiten_pp0_it27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it27 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it27 <= ap_reg_ppiten_pp0_it26;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it28 assign process. --
    ap_reg_ppiten_pp0_it28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it28 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it28 <= ap_reg_ppiten_pp0_it27;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it29 assign process. --
    ap_reg_ppiten_pp0_it29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it29 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it29 <= ap_reg_ppiten_pp0_it28;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it30 assign process. --
    ap_reg_ppiten_pp0_it30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it30 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it30 <= ap_reg_ppiten_pp0_it29;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it31 assign process. --
    ap_reg_ppiten_pp0_it31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it31 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it31 <= ap_reg_ppiten_pp0_it30;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it32 assign process. --
    ap_reg_ppiten_pp0_it32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it32 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it32 <= ap_reg_ppiten_pp0_it31;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it33 assign process. --
    ap_reg_ppiten_pp0_it33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it33 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it33 <= ap_reg_ppiten_pp0_it32;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it34 assign process. --
    ap_reg_ppiten_pp0_it34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it34 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it34 <= ap_reg_ppiten_pp0_it33;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it35 assign process. --
    ap_reg_ppiten_pp0_it35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it35 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it35 <= ap_reg_ppiten_pp0_it34;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it36 assign process. --
    ap_reg_ppiten_pp0_it36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it36 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it36 <= ap_reg_ppiten_pp0_it35;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it37 assign process. --
    ap_reg_ppiten_pp0_it37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it37 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it37 <= ap_reg_ppiten_pp0_it36;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it38 assign process. --
    ap_reg_ppiten_pp0_it38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it38 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it38 <= ap_reg_ppiten_pp0_it37;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it39 assign process. --
    ap_reg_ppiten_pp0_it39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it39 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it39 <= ap_reg_ppiten_pp0_it38;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it40 assign process. --
    ap_reg_ppiten_pp0_it40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it40 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it40 <= ap_reg_ppiten_pp0_it39;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it41 assign process. --
    ap_reg_ppiten_pp0_it41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it41 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it41 <= ap_reg_ppiten_pp0_it40;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it42 assign process. --
    ap_reg_ppiten_pp0_it42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it42 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it42 <= ap_reg_ppiten_pp0_it41;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it43 assign process. --
    ap_reg_ppiten_pp0_it43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it43 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it43 <= ap_reg_ppiten_pp0_it42;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it44 assign process. --
    ap_reg_ppiten_pp0_it44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it44 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it44 <= ap_reg_ppiten_pp0_it43;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it45 assign process. --
    ap_reg_ppiten_pp0_it45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it45 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it45 <= ap_reg_ppiten_pp0_it44;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it46 assign process. --
    ap_reg_ppiten_pp0_it46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it46 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it46 <= ap_reg_ppiten_pp0_it45;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it47 assign process. --
    ap_reg_ppiten_pp0_it47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it47 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it47 <= ap_reg_ppiten_pp0_it46;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it48 assign process. --
    ap_reg_ppiten_pp0_it48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it48 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it48 <= ap_reg_ppiten_pp0_it47;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it49 assign process. --
    ap_reg_ppiten_pp0_it49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it49 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it49 <= ap_reg_ppiten_pp0_it48;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it50 assign process. --
    ap_reg_ppiten_pp0_it50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it50 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it50 <= ap_reg_ppiten_pp0_it49;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it51 assign process. --
    ap_reg_ppiten_pp0_it51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it51 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it51 <= ap_reg_ppiten_pp0_it50;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it52 assign process. --
    ap_reg_ppiten_pp0_it52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it52 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it52 <= ap_reg_ppiten_pp0_it51;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it53 assign process. --
    ap_reg_ppiten_pp0_it53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it53 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it53 <= ap_reg_ppiten_pp0_it52;
                elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it53 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- grp_BlackScholes_fu_129_ap_start_ap_start_reg assign process. --
    grp_BlackScholes_fu_129_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_BlackScholes_fu_129_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_fu_151_p2 = ap_const_lv1_0))) then 
                    grp_BlackScholes_fu_129_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_BlackScholes_fu_129_ap_ready)) then 
                    grp_BlackScholes_fu_129_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_116 assign process. --
    i_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_198 = ap_const_lv1_0))) then 
                i_reg_116 <= i_1_reg_202;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_116 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_reg_198_pp0_it1 <= exitcond_reg_198;
                ap_reg_ppstg_exitcond_reg_198_pp0_it10 <= ap_reg_ppstg_exitcond_reg_198_pp0_it9;
                ap_reg_ppstg_exitcond_reg_198_pp0_it11 <= ap_reg_ppstg_exitcond_reg_198_pp0_it10;
                ap_reg_ppstg_exitcond_reg_198_pp0_it12 <= ap_reg_ppstg_exitcond_reg_198_pp0_it11;
                ap_reg_ppstg_exitcond_reg_198_pp0_it13 <= ap_reg_ppstg_exitcond_reg_198_pp0_it12;
                ap_reg_ppstg_exitcond_reg_198_pp0_it14 <= ap_reg_ppstg_exitcond_reg_198_pp0_it13;
                ap_reg_ppstg_exitcond_reg_198_pp0_it15 <= ap_reg_ppstg_exitcond_reg_198_pp0_it14;
                ap_reg_ppstg_exitcond_reg_198_pp0_it16 <= ap_reg_ppstg_exitcond_reg_198_pp0_it15;
                ap_reg_ppstg_exitcond_reg_198_pp0_it17 <= ap_reg_ppstg_exitcond_reg_198_pp0_it16;
                ap_reg_ppstg_exitcond_reg_198_pp0_it18 <= ap_reg_ppstg_exitcond_reg_198_pp0_it17;
                ap_reg_ppstg_exitcond_reg_198_pp0_it19 <= ap_reg_ppstg_exitcond_reg_198_pp0_it18;
                ap_reg_ppstg_exitcond_reg_198_pp0_it2 <= ap_reg_ppstg_exitcond_reg_198_pp0_it1;
                ap_reg_ppstg_exitcond_reg_198_pp0_it20 <= ap_reg_ppstg_exitcond_reg_198_pp0_it19;
                ap_reg_ppstg_exitcond_reg_198_pp0_it21 <= ap_reg_ppstg_exitcond_reg_198_pp0_it20;
                ap_reg_ppstg_exitcond_reg_198_pp0_it22 <= ap_reg_ppstg_exitcond_reg_198_pp0_it21;
                ap_reg_ppstg_exitcond_reg_198_pp0_it23 <= ap_reg_ppstg_exitcond_reg_198_pp0_it22;
                ap_reg_ppstg_exitcond_reg_198_pp0_it24 <= ap_reg_ppstg_exitcond_reg_198_pp0_it23;
                ap_reg_ppstg_exitcond_reg_198_pp0_it25 <= ap_reg_ppstg_exitcond_reg_198_pp0_it24;
                ap_reg_ppstg_exitcond_reg_198_pp0_it26 <= ap_reg_ppstg_exitcond_reg_198_pp0_it25;
                ap_reg_ppstg_exitcond_reg_198_pp0_it27 <= ap_reg_ppstg_exitcond_reg_198_pp0_it26;
                ap_reg_ppstg_exitcond_reg_198_pp0_it28 <= ap_reg_ppstg_exitcond_reg_198_pp0_it27;
                ap_reg_ppstg_exitcond_reg_198_pp0_it29 <= ap_reg_ppstg_exitcond_reg_198_pp0_it28;
                ap_reg_ppstg_exitcond_reg_198_pp0_it3 <= ap_reg_ppstg_exitcond_reg_198_pp0_it2;
                ap_reg_ppstg_exitcond_reg_198_pp0_it30 <= ap_reg_ppstg_exitcond_reg_198_pp0_it29;
                ap_reg_ppstg_exitcond_reg_198_pp0_it31 <= ap_reg_ppstg_exitcond_reg_198_pp0_it30;
                ap_reg_ppstg_exitcond_reg_198_pp0_it32 <= ap_reg_ppstg_exitcond_reg_198_pp0_it31;
                ap_reg_ppstg_exitcond_reg_198_pp0_it33 <= ap_reg_ppstg_exitcond_reg_198_pp0_it32;
                ap_reg_ppstg_exitcond_reg_198_pp0_it34 <= ap_reg_ppstg_exitcond_reg_198_pp0_it33;
                ap_reg_ppstg_exitcond_reg_198_pp0_it35 <= ap_reg_ppstg_exitcond_reg_198_pp0_it34;
                ap_reg_ppstg_exitcond_reg_198_pp0_it36 <= ap_reg_ppstg_exitcond_reg_198_pp0_it35;
                ap_reg_ppstg_exitcond_reg_198_pp0_it37 <= ap_reg_ppstg_exitcond_reg_198_pp0_it36;
                ap_reg_ppstg_exitcond_reg_198_pp0_it38 <= ap_reg_ppstg_exitcond_reg_198_pp0_it37;
                ap_reg_ppstg_exitcond_reg_198_pp0_it39 <= ap_reg_ppstg_exitcond_reg_198_pp0_it38;
                ap_reg_ppstg_exitcond_reg_198_pp0_it4 <= ap_reg_ppstg_exitcond_reg_198_pp0_it3;
                ap_reg_ppstg_exitcond_reg_198_pp0_it40 <= ap_reg_ppstg_exitcond_reg_198_pp0_it39;
                ap_reg_ppstg_exitcond_reg_198_pp0_it41 <= ap_reg_ppstg_exitcond_reg_198_pp0_it40;
                ap_reg_ppstg_exitcond_reg_198_pp0_it42 <= ap_reg_ppstg_exitcond_reg_198_pp0_it41;
                ap_reg_ppstg_exitcond_reg_198_pp0_it43 <= ap_reg_ppstg_exitcond_reg_198_pp0_it42;
                ap_reg_ppstg_exitcond_reg_198_pp0_it44 <= ap_reg_ppstg_exitcond_reg_198_pp0_it43;
                ap_reg_ppstg_exitcond_reg_198_pp0_it45 <= ap_reg_ppstg_exitcond_reg_198_pp0_it44;
                ap_reg_ppstg_exitcond_reg_198_pp0_it46 <= ap_reg_ppstg_exitcond_reg_198_pp0_it45;
                ap_reg_ppstg_exitcond_reg_198_pp0_it47 <= ap_reg_ppstg_exitcond_reg_198_pp0_it46;
                ap_reg_ppstg_exitcond_reg_198_pp0_it48 <= ap_reg_ppstg_exitcond_reg_198_pp0_it47;
                ap_reg_ppstg_exitcond_reg_198_pp0_it49 <= ap_reg_ppstg_exitcond_reg_198_pp0_it48;
                ap_reg_ppstg_exitcond_reg_198_pp0_it5 <= ap_reg_ppstg_exitcond_reg_198_pp0_it4;
                ap_reg_ppstg_exitcond_reg_198_pp0_it50 <= ap_reg_ppstg_exitcond_reg_198_pp0_it49;
                ap_reg_ppstg_exitcond_reg_198_pp0_it51 <= ap_reg_ppstg_exitcond_reg_198_pp0_it50;
                ap_reg_ppstg_exitcond_reg_198_pp0_it52 <= ap_reg_ppstg_exitcond_reg_198_pp0_it51;
                ap_reg_ppstg_exitcond_reg_198_pp0_it6 <= ap_reg_ppstg_exitcond_reg_198_pp0_it5;
                ap_reg_ppstg_exitcond_reg_198_pp0_it7 <= ap_reg_ppstg_exitcond_reg_198_pp0_it6;
                ap_reg_ppstg_exitcond_reg_198_pp0_it8 <= ap_reg_ppstg_exitcond_reg_198_pp0_it7;
                ap_reg_ppstg_exitcond_reg_198_pp0_it9 <= ap_reg_ppstg_exitcond_reg_198_pp0_it8;
                ap_reg_ppstg_i_reg_116_pp0_it1 <= i_reg_116;
                ap_reg_ppstg_i_reg_116_pp0_it10 <= ap_reg_ppstg_i_reg_116_pp0_it9;
                ap_reg_ppstg_i_reg_116_pp0_it11 <= ap_reg_ppstg_i_reg_116_pp0_it10;
                ap_reg_ppstg_i_reg_116_pp0_it12 <= ap_reg_ppstg_i_reg_116_pp0_it11;
                ap_reg_ppstg_i_reg_116_pp0_it13 <= ap_reg_ppstg_i_reg_116_pp0_it12;
                ap_reg_ppstg_i_reg_116_pp0_it14 <= ap_reg_ppstg_i_reg_116_pp0_it13;
                ap_reg_ppstg_i_reg_116_pp0_it15 <= ap_reg_ppstg_i_reg_116_pp0_it14;
                ap_reg_ppstg_i_reg_116_pp0_it16 <= ap_reg_ppstg_i_reg_116_pp0_it15;
                ap_reg_ppstg_i_reg_116_pp0_it17 <= ap_reg_ppstg_i_reg_116_pp0_it16;
                ap_reg_ppstg_i_reg_116_pp0_it18 <= ap_reg_ppstg_i_reg_116_pp0_it17;
                ap_reg_ppstg_i_reg_116_pp0_it19 <= ap_reg_ppstg_i_reg_116_pp0_it18;
                ap_reg_ppstg_i_reg_116_pp0_it2 <= ap_reg_ppstg_i_reg_116_pp0_it1;
                ap_reg_ppstg_i_reg_116_pp0_it20 <= ap_reg_ppstg_i_reg_116_pp0_it19;
                ap_reg_ppstg_i_reg_116_pp0_it21 <= ap_reg_ppstg_i_reg_116_pp0_it20;
                ap_reg_ppstg_i_reg_116_pp0_it22 <= ap_reg_ppstg_i_reg_116_pp0_it21;
                ap_reg_ppstg_i_reg_116_pp0_it23 <= ap_reg_ppstg_i_reg_116_pp0_it22;
                ap_reg_ppstg_i_reg_116_pp0_it24 <= ap_reg_ppstg_i_reg_116_pp0_it23;
                ap_reg_ppstg_i_reg_116_pp0_it25 <= ap_reg_ppstg_i_reg_116_pp0_it24;
                ap_reg_ppstg_i_reg_116_pp0_it26 <= ap_reg_ppstg_i_reg_116_pp0_it25;
                ap_reg_ppstg_i_reg_116_pp0_it27 <= ap_reg_ppstg_i_reg_116_pp0_it26;
                ap_reg_ppstg_i_reg_116_pp0_it28 <= ap_reg_ppstg_i_reg_116_pp0_it27;
                ap_reg_ppstg_i_reg_116_pp0_it29 <= ap_reg_ppstg_i_reg_116_pp0_it28;
                ap_reg_ppstg_i_reg_116_pp0_it3 <= ap_reg_ppstg_i_reg_116_pp0_it2;
                ap_reg_ppstg_i_reg_116_pp0_it30 <= ap_reg_ppstg_i_reg_116_pp0_it29;
                ap_reg_ppstg_i_reg_116_pp0_it31 <= ap_reg_ppstg_i_reg_116_pp0_it30;
                ap_reg_ppstg_i_reg_116_pp0_it32 <= ap_reg_ppstg_i_reg_116_pp0_it31;
                ap_reg_ppstg_i_reg_116_pp0_it33 <= ap_reg_ppstg_i_reg_116_pp0_it32;
                ap_reg_ppstg_i_reg_116_pp0_it34 <= ap_reg_ppstg_i_reg_116_pp0_it33;
                ap_reg_ppstg_i_reg_116_pp0_it35 <= ap_reg_ppstg_i_reg_116_pp0_it34;
                ap_reg_ppstg_i_reg_116_pp0_it36 <= ap_reg_ppstg_i_reg_116_pp0_it35;
                ap_reg_ppstg_i_reg_116_pp0_it37 <= ap_reg_ppstg_i_reg_116_pp0_it36;
                ap_reg_ppstg_i_reg_116_pp0_it38 <= ap_reg_ppstg_i_reg_116_pp0_it37;
                ap_reg_ppstg_i_reg_116_pp0_it39 <= ap_reg_ppstg_i_reg_116_pp0_it38;
                ap_reg_ppstg_i_reg_116_pp0_it4 <= ap_reg_ppstg_i_reg_116_pp0_it3;
                ap_reg_ppstg_i_reg_116_pp0_it40 <= ap_reg_ppstg_i_reg_116_pp0_it39;
                ap_reg_ppstg_i_reg_116_pp0_it41 <= ap_reg_ppstg_i_reg_116_pp0_it40;
                ap_reg_ppstg_i_reg_116_pp0_it42 <= ap_reg_ppstg_i_reg_116_pp0_it41;
                ap_reg_ppstg_i_reg_116_pp0_it43 <= ap_reg_ppstg_i_reg_116_pp0_it42;
                ap_reg_ppstg_i_reg_116_pp0_it44 <= ap_reg_ppstg_i_reg_116_pp0_it43;
                ap_reg_ppstg_i_reg_116_pp0_it45 <= ap_reg_ppstg_i_reg_116_pp0_it44;
                ap_reg_ppstg_i_reg_116_pp0_it46 <= ap_reg_ppstg_i_reg_116_pp0_it45;
                ap_reg_ppstg_i_reg_116_pp0_it47 <= ap_reg_ppstg_i_reg_116_pp0_it46;
                ap_reg_ppstg_i_reg_116_pp0_it48 <= ap_reg_ppstg_i_reg_116_pp0_it47;
                ap_reg_ppstg_i_reg_116_pp0_it49 <= ap_reg_ppstg_i_reg_116_pp0_it48;
                ap_reg_ppstg_i_reg_116_pp0_it5 <= ap_reg_ppstg_i_reg_116_pp0_it4;
                ap_reg_ppstg_i_reg_116_pp0_it50 <= ap_reg_ppstg_i_reg_116_pp0_it49;
                ap_reg_ppstg_i_reg_116_pp0_it51 <= ap_reg_ppstg_i_reg_116_pp0_it50;
                ap_reg_ppstg_i_reg_116_pp0_it52 <= ap_reg_ppstg_i_reg_116_pp0_it51;
                ap_reg_ppstg_i_reg_116_pp0_it6 <= ap_reg_ppstg_i_reg_116_pp0_it5;
                ap_reg_ppstg_i_reg_116_pp0_it7 <= ap_reg_ppstg_i_reg_116_pp0_it6;
                ap_reg_ppstg_i_reg_116_pp0_it8 <= ap_reg_ppstg_i_reg_116_pp0_it7;
                ap_reg_ppstg_i_reg_116_pp0_it9 <= ap_reg_ppstg_i_reg_116_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                exitcond_reg_198 <= exitcond_fu_151_p2;
                i_1_reg_202 <= i_1_fu_157_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it52) and (ap_ST_pp0_stg3_fsm_4 = ap_CS_fsm) and (ap_reg_ppstg_exitcond_reg_198_pp0_it52 = ap_const_lv1_0))) then
                tmp_reg_207 <= grp_BlackScholes_fu_129_ap_return;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it52, ap_reg_ppiten_pp0_it53, exitcond_fu_151_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it53) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it52)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_151_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_fu_151_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st215_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st215_fsm_5;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st215_fsm_5 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_address0 <= tmp_s_fu_163_p1(17 - 1 downto 0);

    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it53)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it53))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_d0 <= tmp_reg_207;

    -- a_we0 assign process. --
    a_we0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it53, ap_reg_ppstg_exitcond_reg_198_pp0_it52)
    begin
        if ((((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it53) and (ap_reg_ppstg_exitcond_reg_198_pp0_it52 = ap_const_lv1_0)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st215_fsm_5 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st215_fsm_5 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_151_p2 <= "1" when (i_phi_fu_120_p4 = ap_const_lv17_186A0) else "0";
    grp_BlackScholes_fu_129_CallPutFlag <= CallPutFlag;
    grp_BlackScholes_fu_129_S <= S;
    grp_BlackScholes_fu_129_T <= T;
    grp_BlackScholes_fu_129_X <= X;
    grp_BlackScholes_fu_129_ap_ce <= ap_const_logic_1;
    grp_BlackScholes_fu_129_ap_start <= grp_BlackScholes_fu_129_ap_start_ap_start_reg;
    grp_BlackScholes_fu_129_b <= b;
    grp_BlackScholes_fu_129_r <= r;
    i_1_fu_157_p2 <= std_logic_vector(unsigned(i_phi_fu_120_p4) + unsigned(ap_const_lv17_1));

    -- i_phi_fu_120_p4 assign process. --
    i_phi_fu_120_p4_assign_proc : process(ap_CS_fsm, i_reg_116, ap_reg_ppiten_pp0_it1, exitcond_reg_198, i_1_reg_202)
    begin
        if (((ap_ST_pp0_stg0_fsm_1 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_reg_198 = ap_const_lv1_0))) then 
            i_phi_fu_120_p4 <= i_1_reg_202;
        else 
            i_phi_fu_120_p4 <= i_reg_116;
        end if; 
    end process;

    tmp_s_fu_163_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_reg_116_pp0_it52),64));
end behav;
