// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module BlackScholes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg   [1:0] ap_CS_fsm = 2'b00;
reg    grp_rand_uint32_fu_25_ap_start;
wire    grp_rand_uint32_fu_25_ap_done;
wire    grp_rand_uint32_fu_25_ap_idle;
wire    grp_rand_uint32_fu_25_ap_ready;
reg    grp_rand_uint32_fu_25_ap_ce;
reg   [1:0] ap_NS_fsm;


rand_uint32 grp_rand_uint32_fu_25(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_rand_uint32_fu_25_ap_start ),
    .ap_done( grp_rand_uint32_fu_25_ap_done ),
    .ap_idle( grp_rand_uint32_fu_25_ap_idle ),
    .ap_ready( grp_rand_uint32_fu_25_ap_ready ),
    .ap_ce( grp_rand_uint32_fu_25_ap_ce )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or ap_ce)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_ce)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or ap_ce)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_1 == ap_ce))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// grp_rand_uint32_fu_25_ap_ce assign process. ///
always @ (ap_start or ap_CS_fsm or ap_ce)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce))) begin
        grp_rand_uint32_fu_25_ap_ce = ap_const_logic_0;
    end else begin
        grp_rand_uint32_fu_25_ap_ce = ap_const_logic_1;
    end
end

/// grp_rand_uint32_fu_25_ap_start assign process. ///
always @ (ap_start or ap_CS_fsm or ap_ce)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_ce) & ~(ap_start == ap_const_logic_0))) begin
        grp_rand_uint32_fu_25_ap_start = ap_const_logic_1;
    end else begin
        grp_rand_uint32_fu_25_ap_start = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_ce)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (((ap_const_logic_1 == ap_ce) & ~(ap_start == ap_const_logic_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_logic_1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((ap_const_logic_1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



endmodule //BlackScholes

