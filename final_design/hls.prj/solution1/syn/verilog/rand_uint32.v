// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rand_uint32 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 1'b0;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv16_18D = 16'b110001101;
parameter    ap_const_lv16_26F = 16'b1001101111;
parameter    ap_const_lv16_FD91 = 16'b1111110110010001;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv64_9908B0DF = 64'b10011001000010001011000011011111;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg   [0:0] ap_CS_fsm = 1'b0;
wire    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [15:0] kk = 16'b0000000000000000;
wire   [9:0] mt_kk_address0;
reg    mt_kk_ce0;
wire   [63:0] mt_kk_q0;
wire   [9:0] mt_kk_address1;
reg    mt_kk_ce1;
reg    mt_kk_we1;
wire   [63:0] mt_kk_d1;
reg   [15:0] kk_p1 = 16'b1;
wire   [9:0] mt_kkp1_address0;
reg    mt_kkp1_ce0;
wire   [63:0] mt_kkp1_q0;
wire   [9:0] mt_kkp1_address1;
reg    mt_kkp1_ce1;
reg    mt_kkp1_we1;
wire   [63:0] mt_kkp1_d1;
reg   [15:0] kk_pm = 16'b110001101;
wire   [9:0] mt_kkpm_address0;
reg    mt_kkpm_ce0;
wire   [63:0] mt_kkpm_q0;
wire   [9:0] mt_kkpm_address1;
reg    mt_kkpm_ce1;
reg    mt_kkpm_we1;
wire   [63:0] mt_kkpm_d1;
reg   [9:0] mt_kkp1_addr_reg_264;
reg   [9:0] ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1;
reg   [9:0] mt_kk_addr_reg_270;
wire   [0:0] tmp_3_fu_136_p1;
reg   [0:0] tmp_3_reg_276;
reg   [9:0] mt_kkpm_addr_reg_281;
reg   [29:0] tmp_2_reg_287;
wire   [63:0] tmp_5_fu_90_p1;
wire   [63:0] tmp_fu_131_p1;
wire   [63:0] tmp_9_fu_144_p1;
wire   [15:0] a_assign_1_fu_177_p3;
wire   [15:0] a_assign_3_fu_113_p3;
wire   [15:0] a_assign_5_fu_209_p3;
wire   [63:0] mt_kk_new_fu_255_p2;
wire   [15:0] a_assign_2_fu_95_p2;
wire   [0:0] tmp_i1_fu_101_p2;
wire   [15:0] tmp_2_i_fu_107_p2;
wire   [15:0] a_assign_fu_159_p2;
wire   [0:0] tmp_i_fu_165_p2;
wire   [15:0] tmp_1_i_fu_171_p2;
wire   [15:0] a_assign_4_fu_191_p2;
wire   [0:0] tmp_i3_fu_197_p2;
wire   [15:0] tmp_3_i_fu_203_p2;
wire   [0:0] tmp_1_fu_223_p3;
wire   [30:0] tmp_s_fu_238_p3;
wire   [63:0] mag01_cast_cast_fu_231_p3;
wire   [63:0] tmp1_fu_249_p2;
wire   [63:0] tmp_cast_fu_245_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;


rand_uint32_mt_kk #(
    .DataWidth( 64 ),
    .AddressRange( 624 ),
    .AddressWidth( 10 ))
mt_kk_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( mt_kk_address0 ),
    .ce0( mt_kk_ce0 ),
    .q0( mt_kk_q0 ),
    .address1( mt_kk_address1 ),
    .ce1( mt_kk_ce1 ),
    .we1( mt_kk_we1 ),
    .d1( mt_kk_d1 )
);

rand_uint32_mt_kk #(
    .DataWidth( 64 ),
    .AddressRange( 624 ),
    .AddressWidth( 10 ))
mt_kkp1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( mt_kkp1_address0 ),
    .ce0( mt_kkp1_ce0 ),
    .q0( mt_kkp1_q0 ),
    .address1( mt_kkp1_address1 ),
    .ce1( mt_kkp1_ce1 ),
    .we1( mt_kkp1_we1 ),
    .d1( mt_kkp1_d1 )
);

rand_uint32_mt_kk #(
    .DataWidth( 64 ),
    .AddressRange( 624 ),
    .AddressWidth( 10 ))
mt_kkpm_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( mt_kkpm_address0 ),
    .ce0( mt_kkpm_ce0 ),
    .q0( mt_kkpm_q0 ),
    .address1( mt_kkpm_address1 ),
    .ce1( mt_kkpm_ce1 ),
    .we1( mt_kkpm_we1 ),
    .d1( mt_kkpm_d1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~(((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) | ~(ap_const_logic_1 == ap_ce)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// kk assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_kk
    if (ap_rst == 1'b1) begin
        kk <= ap_const_lv16_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
            kk <= a_assign_1_fu_177_p3;
        end
    end
end

/// kk_p1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_kk_p1
    if (ap_rst == 1'b1) begin
        kk_p1 <= ap_const_lv16_1;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
            kk_p1 <= a_assign_3_fu_113_p3;
        end
    end
end

/// kk_pm assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_kk_pm
    if (ap_rst == 1'b1) begin
        kk_pm <= ap_const_lv16_18D;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
            kk_pm <= a_assign_5_fu_209_p3;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1 <= mt_kkp1_addr_reg_264;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kk_addr_reg_270 <= tmp_fu_131_p1;
        mt_kkpm_addr_reg_281 <= tmp_9_fu_144_p1;
        tmp_2_reg_287 <= {{mt_kkp1_q0[ap_const_lv32_1E : ap_const_lv32_1]}};
        tmp_3_reg_276 <= tmp_3_fu_136_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kkp1_addr_reg_264 <= tmp_5_fu_90_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_ce)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it2)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it2))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_pprstidle_pp0 assign process. ///
always @ (ap_start or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1)
begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

/// mt_kk_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kk_ce0 = ap_const_logic_1;
    end else begin
        mt_kk_ce0 = ap_const_logic_0;
    end
end

/// mt_kk_ce1 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kk_ce1 = ap_const_logic_1;
    end else begin
        mt_kk_ce1 = ap_const_logic_0;
    end
end

/// mt_kk_we1 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kk_we1 = ap_const_logic_1;
    end else begin
        mt_kk_we1 = ap_const_logic_0;
    end
end

/// mt_kkp1_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kkp1_ce0 = ap_const_logic_1;
    end else begin
        mt_kkp1_ce0 = ap_const_logic_0;
    end
end

/// mt_kkp1_ce1 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kkp1_ce1 = ap_const_logic_1;
    end else begin
        mt_kkp1_ce1 = ap_const_logic_0;
    end
end

/// mt_kkp1_we1 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kkp1_we1 = ap_const_logic_1;
    end else begin
        mt_kkp1_we1 = ap_const_logic_0;
    end
end

/// mt_kkpm_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kkpm_ce0 = ap_const_logic_1;
    end else begin
        mt_kkpm_ce0 = ap_const_logic_0;
    end
end

/// mt_kkpm_ce1 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kkpm_ce1 = ap_const_logic_1;
    end else begin
        mt_kkpm_ce1 = ap_const_logic_0;
    end
end

/// mt_kkpm_we1 assign process. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it2 or ap_ce)
begin
    if (((ap_ST_pp0_stg0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_ce))) begin
        mt_kkpm_we1 = ap_const_logic_1;
    end else begin
        mt_kkpm_we1 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_ce or ap_sig_pprstidle_pp0)
begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_1_fu_177_p3 = ((tmp_i_fu_165_p2)? tmp_1_i_fu_171_p2: a_assign_fu_159_p2);
assign a_assign_2_fu_95_p2 = (kk_p1 + ap_const_lv16_1);
assign a_assign_3_fu_113_p3 = ((tmp_i1_fu_101_p2)? tmp_2_i_fu_107_p2: a_assign_2_fu_95_p2);
assign a_assign_4_fu_191_p2 = (kk_pm + ap_const_lv16_1);
assign a_assign_5_fu_209_p3 = ((tmp_i3_fu_197_p2)? tmp_3_i_fu_203_p2: a_assign_4_fu_191_p2);
assign a_assign_fu_159_p2 = (kk + ap_const_lv16_1);
assign ap_reg_ppiten_pp0_it0 = ap_start;
assign mag01_cast_cast_fu_231_p3 = ((tmp_3_reg_276)? ap_const_lv64_9908B0DF: ap_const_lv64_0);
assign mt_kk_address0 = tmp_fu_131_p1;
assign mt_kk_address1 = mt_kk_addr_reg_270;
assign mt_kk_d1 = mt_kk_new_fu_255_p2;
assign mt_kk_new_fu_255_p2 = (tmp1_fu_249_p2 ^ tmp_cast_fu_245_p1);
assign mt_kkp1_address0 = tmp_5_fu_90_p1;
assign mt_kkp1_address1 = ap_reg_ppstg_mt_kkp1_addr_reg_264_pp0_it1;
assign mt_kkp1_d1 = mt_kk_new_fu_255_p2;
assign mt_kkpm_address0 = tmp_9_fu_144_p1;
assign mt_kkpm_address1 = mt_kkpm_addr_reg_281;
assign mt_kkpm_d1 = mt_kk_new_fu_255_p2;
assign tmp1_fu_249_p2 = (mag01_cast_cast_fu_231_p3 ^ mt_kkpm_q0);
assign tmp_1_fu_223_p3 = mt_kk_q0[ap_const_lv32_1F];
assign tmp_1_i_fu_171_p2 = (kk + ap_const_lv16_FD91);
assign tmp_2_i_fu_107_p2 = (kk_p1 + ap_const_lv16_FD91);
assign tmp_3_fu_136_p1 = mt_kkp1_q0[0:0];
assign tmp_3_i_fu_203_p2 = (kk_pm + ap_const_lv16_FD91);
assign tmp_5_fu_90_p1 = $unsigned(kk_p1);
assign tmp_9_fu_144_p1 = $unsigned(kk_pm);
assign tmp_cast_fu_245_p1 = $unsigned(tmp_s_fu_238_p3);
assign tmp_fu_131_p1 = $unsigned(kk);
assign tmp_i1_fu_101_p2 = (a_assign_2_fu_95_p2 > ap_const_lv16_26F? 1'b1: 1'b0);
assign tmp_i3_fu_197_p2 = (a_assign_4_fu_191_p2 > ap_const_lv16_26F? 1'b1: 1'b0);
assign tmp_i_fu_165_p2 = (a_assign_fu_159_p2 > ap_const_lv16_26F? 1'b1: 1'b0);
assign tmp_s_fu_238_p3 = {{tmp_1_fu_223_p3}, {tmp_2_reg_287}};


endmodule //rand_uint32

