// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.3
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "dut.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut::ap_const_logic_1 = SC_LOGIC_1;
const sc_logic dut::ap_const_logic_0 = SC_LOGIC_0;
const sc_lv<1> dut::ap_ST_st1_fsm_0 = "0";
const sc_lv<32> dut::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dut::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";

dut::dut(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_24 );

    SC_METHOD(thread_ap_sig_bdd_24);
    sensitive << ( in_fifo_V_empty_n );
    sensitive << ( out_fifo_V_full_n );

    SC_METHOD(thread_in_fifo_V_read);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_24 );

    SC_METHOD(thread_out_fifo_V_din);
    sensitive << ( cnt );

    SC_METHOD(thread_out_fifo_V_write);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_bdd_24 );

    SC_METHOD(thread_tmp_fu_49_p2);
    sensitive << ( cnt );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    cnt = "00000000000000000000000000000000";
    ap_CS_fsm = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(-12);
    const char* dump_vcd = std::getenv("AP_WRITE_VCD");
    if (dump_vcd && string(dump_vcd) == "1" ) {
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, in_fifo_V_dout, "(port)in_fifo_V_dout");
    sc_trace(mVcdFile, in_fifo_V_empty_n, "(port)in_fifo_V_empty_n");
    sc_trace(mVcdFile, in_fifo_V_read, "(port)in_fifo_V_read");
    sc_trace(mVcdFile, out_fifo_V_din, "(port)out_fifo_V_din");
    sc_trace(mVcdFile, out_fifo_V_full_n, "(port)out_fifo_V_full_n");
    sc_trace(mVcdFile, out_fifo_V_write, "(port)out_fifo_V_write");
    sc_trace(mVcdFile, cnt, "cnt");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_bdd_24, "ap_sig_bdd_24");
    sc_trace(mVcdFile, tmp_fu_49_p2, "tmp_fu_49_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");

    }
    mHdltvinHandle.open("dut.hdltvin.dat");
    mHdltvoutHandle.open("dut.hdltvout.dat");
}

dut::~dut() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void dut::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        cnt = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
             !ap_sig_bdd_24.read())) {
            cnt = tmp_fu_49_p2.read();
        }
    }
}

void dut::thread_ap_NS_fsm() {
    if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !ap_sig_bdd_24.read())) {
        ap_NS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_NS_fsm = ap_CS_fsm.read();
    }
}

void dut::thread_ap_sig_bdd_24() {
    ap_sig_bdd_24 = (esl_seteq<1,1,1>(in_fifo_V_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(out_fifo_V_full_n.read(), ap_const_logic_0));
}

void dut::thread_in_fifo_V_read() {
    if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !ap_sig_bdd_24.read())) {
        in_fifo_V_read = ap_const_logic_1;
    } else {
        in_fifo_V_read = ap_const_logic_0;
    }
}

void dut::thread_out_fifo_V_din() {
    out_fifo_V_din = (!cnt.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_bigint<32>(cnt.read()) + sc_biguint<32>(ap_const_lv32_FFFFFFFF));
}

void dut::thread_out_fifo_V_write() {
    if ((esl_seteq<1,1,1>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
         !ap_sig_bdd_24.read())) {
        out_fifo_V_write = ap_const_logic_1;
    } else {
        out_fifo_V_write = ap_const_logic_0;
    }
}

void dut::thread_tmp_fu_49_p2() {
    tmp_fu_49_p2 = (!cnt.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_bigint<32>(cnt.read()) + sc_biguint<32>(ap_const_lv32_FFFFFFFF));
}

void dut::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    ofstream mAeslHdltvinHandle("dut.autohdltvin.dat");
    ofstream mAeslHdltvoutHandle("dut.autohdltvout.dat");
    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        mAeslHdltvinHandle << "[[cycle]] " << ap_cycleNo << endl;
        mAeslHdltvoutHandle << "[[cycle]] " << ap_cycleNo << endl;
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mAeslHdltvinHandle << "[ap_rst]" << endl;
        mAeslHdltvinHandle << ap_rst.read() << endl;
        mAeslHdltvinHandle << "[/ap_rst]" << endl;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mAeslHdltvinHandle << "[in_fifo_V_dout]" << endl;
        mAeslHdltvinHandle << in_fifo_V_dout.read() << endl;
        mAeslHdltvinHandle << "[/in_fifo_V_dout]" << endl;
        mHdltvinHandle << " , " <<  " \"in_fifo_V_dout\" :  \"" << in_fifo_V_dout.read() << "\" ";
        mAeslHdltvinHandle << "[in_fifo_V_empty_n]" << endl;
        mAeslHdltvinHandle << in_fifo_V_empty_n.read() << endl;
        mAeslHdltvinHandle << "[/in_fifo_V_empty_n]" << endl;
        mHdltvinHandle << " , " <<  " \"in_fifo_V_empty_n\" :  \"" << in_fifo_V_empty_n.read() << "\" ";
        mAeslHdltvoutHandle << "[in_fifo_V_read]" << endl;
        mAeslHdltvoutHandle << in_fifo_V_read.read() << endl;
        mAeslHdltvoutHandle << "[/in_fifo_V_read]" << endl;
        mHdltvoutHandle << mComma << "{"  <<  " \"in_fifo_V_read\" :  \"" << in_fifo_V_read.read() << "\" ";
        mAeslHdltvoutHandle << "[out_fifo_V_din]" << endl;
        mAeslHdltvoutHandle << out_fifo_V_din.read() << endl;
        mAeslHdltvoutHandle << "[/out_fifo_V_din]" << endl;
        mHdltvoutHandle << " , " <<  " \"out_fifo_V_din\" :  \"" << out_fifo_V_din.read() << "\" ";
        mAeslHdltvinHandle << "[out_fifo_V_full_n]" << endl;
        mAeslHdltvinHandle << out_fifo_V_full_n.read() << endl;
        mAeslHdltvinHandle << "[/out_fifo_V_full_n]" << endl;
        mHdltvinHandle << " , " <<  " \"out_fifo_V_full_n\" :  \"" << out_fifo_V_full_n.read() << "\" ";
        mAeslHdltvoutHandle << "[out_fifo_V_write]" << endl;
        mAeslHdltvoutHandle << out_fifo_V_write.read() << endl;
        mAeslHdltvoutHandle << "[/out_fifo_V_write]" << endl;
        mHdltvoutHandle << " , " <<  " \"out_fifo_V_write\" :  \"" << out_fifo_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        mAeslHdltvinHandle << "[[/cycle]]" << endl;
        mAeslHdltvoutHandle << "[[/cycle]]" << endl;
        ap_cycleNo++;
    }
}

}

