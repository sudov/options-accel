-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2012.3
-- Copyright (C) 2012 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_fifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_fifo_V_empty_n : IN STD_LOGIC;
    in_fifo_V_read : OUT STD_LOGIC;
    out_fifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_fifo_V_full_n : IN STD_LOGIC;
    out_fifo_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut_inst,dut,{component_name=dut_inst,HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.352000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=34}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal cnt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_sig_bdd_24 : BOOLEAN;
    signal tmp_fu_49_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin



    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- cnt assign process. --
    cnt_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                cnt <= ap_const_lv32_0;
            else
                if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_24))) then 
                    cnt <= tmp_fu_49_p2;
                end if; 
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process(ap_CS_fsm, ap_sig_bdd_24)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_24))) then 
            ap_NS_fsm <= ap_ST_st1_fsm_0;
        else 
            ap_NS_fsm <= ap_CS_fsm;
        end if; 
    end process;


    -- ap_sig_bdd_24 assign process. --
    ap_sig_bdd_24_assign_proc : process(in_fifo_V_empty_n, out_fifo_V_full_n)
    begin
                ap_sig_bdd_24 <= ((in_fifo_V_empty_n = ap_const_logic_0) or (out_fifo_V_full_n = ap_const_logic_0));
    end process;


    -- in_fifo_V_read assign process. --
    in_fifo_V_read_assign_proc : process(ap_CS_fsm, ap_sig_bdd_24)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_24))) then 
            in_fifo_V_read <= ap_const_logic_1;
        else 
            in_fifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

    out_fifo_V_din <= std_logic_vector(unsigned(cnt) + unsigned(ap_const_lv32_FFFFFFFF));

    -- out_fifo_V_write assign process. --
    out_fifo_V_write_assign_proc : process(ap_CS_fsm, ap_sig_bdd_24)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_24))) then 
            out_fifo_V_write <= ap_const_logic_1;
        else 
            out_fifo_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_49_p2 <= std_logic_vector(unsigned(cnt) + unsigned(ap_const_lv32_FFFFFFFF));
end behav;
